
MAX30100_I2C_CONTROL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c00  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  08009dd0  08009dd0  00019dd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a20c  0800a20c  0002022c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a20c  0800a20c  0001a20c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a214  0800a214  0002022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a214  0800a214  0001a214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a218  0800a218  0001a218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  0800a21c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  2000022c  0800a448  0002022c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000051c  0800a448  0002051c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016167  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002896  00000000  00000000  000363c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001180  00000000  00000000  00038c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010b0  00000000  00000000  00039de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024cea  00000000  00000000  0003ae90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b13  00000000  00000000  0005fb7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1833  00000000  00000000  0007568d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00156ec0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cbc  00000000  00000000  00156f14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000022c 	.word	0x2000022c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009db8 	.word	0x08009db8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000230 	.word	0x20000230
 800020c:	08009db8 	.word	0x08009db8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f82:	f2ad 4dc4 	subw	sp, sp, #1220	; 0x4c4
 8000f86:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE BEGIN 1 */
	uint8_t buf[64];
	uint8_t array_indx;
	uint8_t powerRegCheck = POWER_REG_ONOFF;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	f887 3469 	strb.w	r3, [r7, #1129]	; 0x469
	uint8_t tempCheck = TEMP_ONOFF;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	f887 3468 	strb.w	r3, [r7, #1128]	; 0x468
	//uint8_t spo2_rdy = 0x00;
	uint16_t SpO2_c = 3;
 8000f94:	2303      	movs	r3, #3
 8000f96:	f8a7 346c 	strh.w	r3, [r7, #1132]	; 0x46c
	uint16_t xx = 0; // Variable created for value acquisition
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f8a7 346a 	strh.w	r3, [r7, #1130]	; 0x46a
	//float* spo2Point;
	float ir_s, vr_s, SpO2_s, SpO2_avg;
	float temperature = 0;
 8000fa0:	f04f 0300 	mov.w	r3, #0
 8000fa4:	f207 4264 	addw	r2, r7, #1124	; 0x464
 8000fa8:	6013      	str	r3, [r2, #0]
	float FiveVoltVal = 0;
 8000faa:	f04f 0300 	mov.w	r3, #0
 8000fae:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 8000fb2:	6013      	str	r3, [r2, #0]
	float TwelveVoltVal = 0;
 8000fb4:	f04f 0300 	mov.w	r3, #0
 8000fb8:	f207 425c 	addw	r2, r7, #1116	; 0x45c
 8000fbc:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fbe:	f001 fb3b 	bl	8002638 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc2:	f000 fa51 	bl	8001468 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc6:	f000 fd31 	bl	8001a2c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fca:	f000 fcdb 	bl	8001984 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000fce:	f000 fbb1 	bl	8001734 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000fd2:	f000 fbdd 	bl	8001790 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000fd6:	f000 fcff 	bl	80019d8 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000fda:	f000 fab3 	bl	8001544 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000fde:	f000 fb03 	bl	80015e8 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000fe2:	f000 fb55 	bl	8001690 <MX_ADC3_Init>
  MX_TIM7_Init();
 8000fe6:	f000 fc97 	bl	8001918 <MX_TIM7_Init>
  MX_TIM3_Init();
 8000fea:	f000 fc47 	bl	800187c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	array_indx = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
	output_indx = 0;
 8000ff4:	4b99      	ldr	r3, [pc, #612]	; (800125c <main+0x2dc>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	701a      	strb	r2, [r3, #0]
	outputToggle = 0;
 8000ffa:	4b99      	ldr	r3, [pc, #612]	; (8001260 <main+0x2e0>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	701a      	strb	r2, [r3, #0]

	pData = 0x50; // Programmed to generate Temp_RDY and SpO2_RDY interrupts
 8001000:	4b98      	ldr	r3, [pc, #608]	; (8001264 <main+0x2e4>)
 8001002:	2250      	movs	r2, #80	; 0x50
 8001004:	701a      	strb	r2, [r3, #0]
	MAX30100_WRITE(hi2c1, REG_INTERRUPT_CONFIG, pData);
 8001006:	4b97      	ldr	r3, [pc, #604]	; (8001264 <main+0x2e4>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	4c97      	ldr	r4, [pc, #604]	; (8001268 <main+0x2e8>)
 800100c:	9312      	str	r3, [sp, #72]	; 0x48
 800100e:	2340      	movs	r3, #64	; 0x40
 8001010:	9311      	str	r3, [sp, #68]	; 0x44
 8001012:	4668      	mov	r0, sp
 8001014:	f104 0310 	add.w	r3, r4, #16
 8001018:	2244      	movs	r2, #68	; 0x44
 800101a:	4619      	mov	r1, r3
 800101c:	f006 f82e 	bl	800707c <memcpy>
 8001020:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001024:	f000 fdff 	bl	8001c26 <MAX30100_WRITE>

	pData = 0x0B; // Enable Temperature and SpO2 measurement
 8001028:	4b8e      	ldr	r3, [pc, #568]	; (8001264 <main+0x2e4>)
 800102a:	220b      	movs	r2, #11
 800102c:	701a      	strb	r2, [r3, #0]
	MAX30100_WRITE(hi2c1, REG_CONFIG_MODE, pData);
 800102e:	4b8d      	ldr	r3, [pc, #564]	; (8001264 <main+0x2e4>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	4c8d      	ldr	r4, [pc, #564]	; (8001268 <main+0x2e8>)
 8001034:	9312      	str	r3, [sp, #72]	; 0x48
 8001036:	2306      	movs	r3, #6
 8001038:	9311      	str	r3, [sp, #68]	; 0x44
 800103a:	4668      	mov	r0, sp
 800103c:	f104 0310 	add.w	r3, r4, #16
 8001040:	2244      	movs	r2, #68	; 0x44
 8001042:	4619      	mov	r1, r3
 8001044:	f006 f81a 	bl	800707c <memcpy>
 8001048:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800104c:	f000 fdeb 	bl	8001c26 <MAX30100_WRITE>

	pData = 0x55; // Set samples per second to 600 and pulse width to 400us (14 bit resolution)
 8001050:	4b84      	ldr	r3, [pc, #528]	; (8001264 <main+0x2e4>)
 8001052:	2255      	movs	r2, #85	; 0x55
 8001054:	701a      	strb	r2, [r3, #0]
	MAX30100_WRITE(hi2c1, REG_CONFIG_SpO2, pData);
 8001056:	4b83      	ldr	r3, [pc, #524]	; (8001264 <main+0x2e4>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	4c83      	ldr	r4, [pc, #524]	; (8001268 <main+0x2e8>)
 800105c:	9312      	str	r3, [sp, #72]	; 0x48
 800105e:	2307      	movs	r3, #7
 8001060:	9311      	str	r3, [sp, #68]	; 0x44
 8001062:	4668      	mov	r0, sp
 8001064:	f104 0310 	add.w	r3, r4, #16
 8001068:	2244      	movs	r2, #68	; 0x44
 800106a:	4619      	mov	r1, r3
 800106c:	f006 f806 	bl	800707c <memcpy>
 8001070:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001074:	f000 fdd7 	bl	8001c26 <MAX30100_WRITE>

	pData = LED_POWER; // Set both IR and Red LED current (by default, 27.1mA)
 8001078:	4b7a      	ldr	r3, [pc, #488]	; (8001264 <main+0x2e4>)
 800107a:	2288      	movs	r2, #136	; 0x88
 800107c:	701a      	strb	r2, [r3, #0]
	MAX30100_WRITE(hi2c1, REG_CONFIG_LEDS, pData);
 800107e:	4b79      	ldr	r3, [pc, #484]	; (8001264 <main+0x2e4>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	4c79      	ldr	r4, [pc, #484]	; (8001268 <main+0x2e8>)
 8001084:	9312      	str	r3, [sp, #72]	; 0x48
 8001086:	2309      	movs	r3, #9
 8001088:	9311      	str	r3, [sp, #68]	; 0x44
 800108a:	4668      	mov	r0, sp
 800108c:	f104 0310 	add.w	r3, r4, #16
 8001090:	2244      	movs	r2, #68	; 0x44
 8001092:	4619      	mov	r1, r3
 8001094:	f005 fff2 	bl	800707c <memcpy>
 8001098:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800109c:	f000 fdc3 	bl	8001c26 <MAX30100_WRITE>

	timerFlag = 0;
 80010a0:	4b72      	ldr	r3, [pc, #456]	; (800126c <main+0x2ec>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim3);
 80010a6:	4872      	ldr	r0, [pc, #456]	; (8001270 <main+0x2f0>)
 80010a8:	f004 fcbc 	bl	8005a24 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 80010ac:	4871      	ldr	r0, [pc, #452]	; (8001274 <main+0x2f4>)
 80010ae:	f004 fcb9 	bl	8005a24 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80010b2:	2100      	movs	r1, #0
 80010b4:	4870      	ldr	r0, [pc, #448]	; (8001278 <main+0x2f8>)
 80010b6:	f004 fd7f 	bl	8005bb8 <HAL_TIM_PWM_Start>
	CH1_DC = 0;
 80010ba:	4b70      	ldr	r3, [pc, #448]	; (800127c <main+0x2fc>)
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]

	MAX30100_DATA_REQUEST(hi2c1); // Request the first sample
 80010c0:	4c69      	ldr	r4, [pc, #420]	; (8001268 <main+0x2e8>)
 80010c2:	4668      	mov	r0, sp
 80010c4:	f104 0310 	add.w	r3, r4, #16
 80010c8:	2244      	movs	r2, #68	; 0x44
 80010ca:	4619      	mov	r1, r3
 80010cc:	f005 ffd6 	bl	800707c <memcpy>
 80010d0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80010d4:	f000 fdc5 	bl	8001c62 <MAX30100_DATA_REQUEST>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if(timerFlag == 1) // At 500HZ, give the program time to take all 4 measurements, plus a little extra for wiggle room
 80010d8:	4b64      	ldr	r3, [pc, #400]	; (800126c <main+0x2ec>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d1fb      	bne.n	80010d8 <main+0x158>
		{
			xx += 1;
 80010e0:	f8b7 346a 	ldrh.w	r3, [r7, #1130]	; 0x46a
 80010e4:	3301      	adds	r3, #1
 80010e6:	f8a7 346a 	strh.w	r3, [r7, #1130]	; 0x46a
			HAL_GPIO_TogglePin( GPIOA, GPIO_PIN_12); // Pin toggle to manually check if the timing is properly established
 80010ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ee:	4864      	ldr	r0, [pc, #400]	; (8001280 <main+0x300>)
 80010f0:	f002 fa8f 	bl	8003612 <HAL_GPIO_TogglePin>
			if(tempCheck == 1) { HAL_ADC_Start_IT(&hadc2); } // Start Temperature reading (if toggled on)
 80010f4:	f897 3468 	ldrb.w	r3, [r7, #1128]	; 0x468
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d102      	bne.n	8001102 <main+0x182>
 80010fc:	4861      	ldr	r0, [pc, #388]	; (8001284 <main+0x304>)
 80010fe:	f001 fb51 	bl	80027a4 <HAL_ADC_Start_IT>
			if(powerRegCheck == 1) { HAL_ADC_Start_IT(&hadc1); HAL_ADC_Start_IT(&hadc3); } // Start power supply reading (if toggled on)
 8001102:	f897 3469 	ldrb.w	r3, [r7, #1129]	; 0x469
 8001106:	2b01      	cmp	r3, #1
 8001108:	d105      	bne.n	8001116 <main+0x196>
 800110a:	485f      	ldr	r0, [pc, #380]	; (8001288 <main+0x308>)
 800110c:	f001 fb4a 	bl	80027a4 <HAL_ADC_Start_IT>
 8001110:	485e      	ldr	r0, [pc, #376]	; (800128c <main+0x30c>)
 8001112:	f001 fb47 	bl	80027a4 <HAL_ADC_Start_IT>

			// Now check that the FIFO is ready to provide the data
			do
			{
			  buf[0] = REG_INTERRUPTS;
 8001116:	2300      	movs	r3, #0
 8001118:	f887 3408 	strb.w	r3, [r7, #1032]	; 0x408
			  ret = HAL_I2C_Master_Receive(&hi2c1, MAX_ADDR, buf, 2, HAL_MAX_DELAY);
 800111c:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 8001120:	f04f 33ff 	mov.w	r3, #4294967295
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	2302      	movs	r3, #2
 8001128:	21ae      	movs	r1, #174	; 0xae
 800112a:	484f      	ldr	r0, [pc, #316]	; (8001268 <main+0x2e8>)
 800112c:	f002 fcce 	bl	8003acc <HAL_I2C_Master_Receive>
 8001130:	4603      	mov	r3, r0
 8001132:	f887 345b 	strb.w	r3, [r7, #1115]	; 0x45b
			  if ( ret != HAL_OK ) {
 8001136:	f897 345b 	ldrb.w	r3, [r7, #1115]	; 0x45b
 800113a:	2b00      	cmp	r3, #0
 800113c:	d005      	beq.n	800114a <main+0x1ca>
					  strcpy((char*)buf, "ErrorRqst\r\n");
 800113e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001142:	4a53      	ldr	r2, [pc, #332]	; (8001290 <main+0x310>)
 8001144:	ca07      	ldmia	r2, {r0, r1, r2}
 8001146:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			  }
			} while(buf[0] && 0x50 != 0x50);

			// We now want to actually read the FIFO
			do {
				ret = MAX30100_TRANSMIT(hi2c1, REG_SpO2_WRPT); // Ask for the data
 800114a:	4c47      	ldr	r4, [pc, #284]	; (8001268 <main+0x2e8>)
 800114c:	2302      	movs	r3, #2
 800114e:	9311      	str	r3, [sp, #68]	; 0x44
 8001150:	4668      	mov	r0, sp
 8001152:	f104 0310 	add.w	r3, r4, #16
 8001156:	2244      	movs	r2, #68	; 0x44
 8001158:	4619      	mov	r1, r3
 800115a:	f005 ff8f 	bl	800707c <memcpy>
 800115e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001162:	f000 fdbd 	bl	8001ce0 <MAX30100_TRANSMIT>
 8001166:	4603      	mov	r3, r0
 8001168:	f887 345b 	strb.w	r3, [r7, #1115]	; 0x45b
			} while (ret != HAL_OK);
 800116c:	f897 345b 	ldrb.w	r3, [r7, #1115]	; 0x45b
 8001170:	2b00      	cmp	r3, #0
 8001172:	d1ea      	bne.n	800114a <main+0x1ca>

			// Read the values
			to_recieve = MAX30100_SPO2_EXTRACT(hi2c1); // Receive data from the FIFO. Note that, this reads the average of all 4 of the samples stored in the FIFO
 8001174:	4c3c      	ldr	r4, [pc, #240]	; (8001268 <main+0x2e8>)
 8001176:	4668      	mov	r0, sp
 8001178:	f104 0310 	add.w	r3, r4, #16
 800117c:	2244      	movs	r2, #68	; 0x44
 800117e:	4619      	mov	r1, r3
 8001180:	f005 ff7c 	bl	800707c <memcpy>
 8001184:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001188:	f000 fdcc 	bl	8001d24 <MAX30100_SPO2_EXTRACT>
 800118c:	eeb0 7a40 	vmov.f32	s14, s0
 8001190:	eef0 7a60 	vmov.f32	s15, s1
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	ed83 7a00 	vstr	s14, [r3]
 800119a:	edc3 7a01 	vstr	s15, [r3, #4]
			ir_s = to_recieve.ir_val;
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f207 4254 	addw	r2, r7, #1108	; 0x454
 80011a6:	6013      	str	r3, [r2, #0]
			vr_s = to_recieve.vr_val;
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 80011b0:	6013      	str	r3, [r2, #0]
			SpO2_s = ir_s / (ir_s + vr_s) * 100;
 80011b2:	f207 4354 	addw	r3, r7, #1108	; 0x454
 80011b6:	ed93 7a00 	vldr	s14, [r3]
 80011ba:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80011be:	edd3 7a00 	vldr	s15, [r3]
 80011c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011c6:	f207 4354 	addw	r3, r7, #1108	; 0x454
 80011ca:	edd3 6a00 	vldr	s13, [r3]
 80011ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011d2:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001294 <main+0x314>
 80011d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011da:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 80011de:	edc3 7a00 	vstr	s15, [r3]
			SpO2_arr[array_indx] = SpO2_s;
 80011e2:	f897 346f 	ldrb.w	r3, [r7, #1135]	; 0x46f
 80011e6:	f107 020c 	add.w	r2, r7, #12
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	4413      	add	r3, r2
 80011ee:	f207 424c 	addw	r2, r7, #1100	; 0x44c
 80011f2:	6812      	ldr	r2, [r2, #0]
 80011f4:	601a      	str	r2, [r3, #0]
			array_indx++;
 80011f6:	f897 346f 	ldrb.w	r3, [r7, #1135]	; 0x46f
 80011fa:	3301      	adds	r3, #1
 80011fc:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
			if(array_indx >= DEPTH)
 8001200:	f897 346f 	ldrb.w	r3, [r7, #1135]	; 0x46f
 8001204:	2bff      	cmp	r3, #255	; 0xff
 8001206:	d102      	bne.n	800120e <main+0x28e>
			{
				array_indx = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
			}

			SpO2_avg = MAX30100_SPO2_AVRG(SpO2_arr);
 800120e:	f107 030c 	add.w	r3, r7, #12
 8001212:	4618      	mov	r0, r3
 8001214:	f000 fe2e 	bl	8001e74 <MAX30100_SPO2_AVRG>
 8001218:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800121c:	ed83 0a00 	vstr	s0, [r3]

			if(SpO2_avg < SpO2_s)
 8001220:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8001224:	ed93 7a00 	vldr	s14, [r3]
 8001228:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 800122c:	edd3 7a00 	vldr	s15, [r3]
 8001230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001238:	d52e      	bpl.n	8001298 <main+0x318>
			{
				SpO2_c = SpO2_c + UPTICK;
 800123a:	f8b7 346c 	ldrh.w	r3, [r7, #1132]	; 0x46c
 800123e:	330f      	adds	r3, #15
 8001240:	f8a7 346c 	strh.w	r3, [r7, #1132]	; 0x46c
				if(SpO2_c >= THRESHOLD)
 8001244:	f8b7 346c 	ldrh.w	r3, [r7, #1132]	; 0x46c
 8001248:	2b63      	cmp	r3, #99	; 0x63
 800124a:	d931      	bls.n	80012b0 <main+0x330>
				{
					outputToggle = 1;
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <main+0x2e0>)
 800124e:	2201      	movs	r2, #1
 8001250:	701a      	strb	r2, [r3, #0]
					SpO2_c = THRESHOLD;
 8001252:	2364      	movs	r3, #100	; 0x64
 8001254:	f8a7 346c 	strh.w	r3, [r7, #1132]	; 0x46c
 8001258:	e02a      	b.n	80012b0 <main+0x330>
 800125a:	bf00      	nop
 800125c:	20000421 	.word	0x20000421
 8001260:	20000420 	.word	0x20000420
 8001264:	20000340 	.word	0x20000340
 8001268:	200002ec 	.word	0x200002ec
 800126c:	20000248 	.word	0x20000248
 8001270:	20000344 	.word	0x20000344
 8001274:	200004c0 	.word	0x200004c0
 8001278:	20000434 	.word	0x20000434
 800127c:	2000024c 	.word	0x2000024c
 8001280:	40020000 	.word	0x40020000
 8001284:	200002a4 	.word	0x200002a4
 8001288:	20000390 	.word	0x20000390
 800128c:	200003d8 	.word	0x200003d8
 8001290:	08009dd0 	.word	0x08009dd0
 8001294:	42c80000 	.word	0x42c80000
				}
			} else {
				SpO2_c = SpO2_c - DOWNTICK;
 8001298:	f8b7 346c 	ldrh.w	r3, [r7, #1132]	; 0x46c
 800129c:	3b1e      	subs	r3, #30
 800129e:	f8a7 346c 	strh.w	r3, [r7, #1132]	; 0x46c
				if(SpO2_c <= DOWNTICK)
 80012a2:	f8b7 346c 	ldrh.w	r3, [r7, #1132]	; 0x46c
 80012a6:	2b1e      	cmp	r3, #30
 80012a8:	d802      	bhi.n	80012b0 <main+0x330>
				{
					SpO2_c = DOWNTICK;
 80012aa:	231e      	movs	r3, #30
 80012ac:	f8a7 346c 	strh.w	r3, [r7, #1132]	; 0x46c
				}
			}


			// Debug UART transmission
			if(tempCheck == 1)
 80012b0:	f897 3468 	ldrb.w	r3, [r7, #1128]	; 0x468
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d123      	bne.n	8001300 <main+0x380>
			{
				temperature = (float) ADC_thermRes;
 80012b8:	4b61      	ldr	r3, [pc, #388]	; (8001440 <main+0x4c0>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	ee07 3a90 	vmov	s15, r3
 80012c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012c4:	f207 4364 	addw	r3, r7, #1124	; 0x464
 80012c8:	edc3 7a00 	vstr	s15, [r3]
				sprintf((char*)buf, "%3.0f ", temperature);
 80012cc:	f207 4364 	addw	r3, r7, #1124	; 0x464
 80012d0:	6818      	ldr	r0, [r3, #0]
 80012d2:	f7ff f959 	bl	8000588 <__aeabi_f2d>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	f507 6081 	add.w	r0, r7, #1032	; 0x408
 80012de:	4959      	ldr	r1, [pc, #356]	; (8001444 <main+0x4c4>)
 80012e0:	f006 fb4c 	bl	800797c <siprintf>
				HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80012e4:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7fe ff91 	bl	8000210 <strlen>
 80012ee:	4603      	mov	r3, r0
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 80012f6:	f04f 33ff 	mov.w	r3, #4294967295
 80012fa:	4853      	ldr	r0, [pc, #332]	; (8001448 <main+0x4c8>)
 80012fc:	f005 fbcb 	bl	8006a96 <HAL_UART_Transmit>
			}
			if(powerRegCheck == 1)
 8001300:	f897 3469 	ldrb.w	r3, [r7, #1129]	; 0x469
 8001304:	2b01      	cmp	r3, #1
 8001306:	d156      	bne.n	80013b6 <main+0x436>
			{
				FiveVoltVal = (float) (ADC_power5Res / 4096 * 3.3);
 8001308:	4b50      	ldr	r3, [pc, #320]	; (800144c <main+0x4cc>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	da01      	bge.n	8001314 <main+0x394>
 8001310:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001314:	131b      	asrs	r3, r3, #12
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff f924 	bl	8000564 <__aeabi_i2d>
 800131c:	a346      	add	r3, pc, #280	; (adr r3, 8001438 <main+0x4b8>)
 800131e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001322:	f7ff f989 	bl	8000638 <__aeabi_dmul>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4610      	mov	r0, r2
 800132c:	4619      	mov	r1, r3
 800132e:	f7ff fc5b 	bl	8000be8 <__aeabi_d2f>
 8001332:	4603      	mov	r3, r0
 8001334:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 8001338:	6013      	str	r3, [r2, #0]
				TwelveVoltVal = (float) (ADC_power12Res / 4096 * 3.3);
 800133a:	4b45      	ldr	r3, [pc, #276]	; (8001450 <main+0x4d0>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	da01      	bge.n	8001346 <main+0x3c6>
 8001342:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001346:	131b      	asrs	r3, r3, #12
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff f90b 	bl	8000564 <__aeabi_i2d>
 800134e:	a33a      	add	r3, pc, #232	; (adr r3, 8001438 <main+0x4b8>)
 8001350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001354:	f7ff f970 	bl	8000638 <__aeabi_dmul>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	4610      	mov	r0, r2
 800135e:	4619      	mov	r1, r3
 8001360:	f7ff fc42 	bl	8000be8 <__aeabi_d2f>
 8001364:	4603      	mov	r3, r0
 8001366:	f207 425c 	addw	r2, r7, #1116	; 0x45c
 800136a:	6013      	str	r3, [r2, #0]
				sprintf((char*)buf, "%3.0f %3.0f || ", FiveVoltVal, TwelveVoltVal);
 800136c:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001370:	6818      	ldr	r0, [r3, #0]
 8001372:	f7ff f909 	bl	8000588 <__aeabi_f2d>
 8001376:	4604      	mov	r4, r0
 8001378:	460d      	mov	r5, r1
 800137a:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 800137e:	6818      	ldr	r0, [r3, #0]
 8001380:	f7ff f902 	bl	8000588 <__aeabi_f2d>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	f507 6081 	add.w	r0, r7, #1032	; 0x408
 800138c:	e9cd 2300 	strd	r2, r3, [sp]
 8001390:	4622      	mov	r2, r4
 8001392:	462b      	mov	r3, r5
 8001394:	492f      	ldr	r1, [pc, #188]	; (8001454 <main+0x4d4>)
 8001396:	f006 faf1 	bl	800797c <siprintf>
				HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 800139a:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800139e:	4618      	mov	r0, r3
 80013a0:	f7fe ff36 	bl	8000210 <strlen>
 80013a4:	4603      	mov	r3, r0
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 80013ac:	f04f 33ff 	mov.w	r3, #4294967295
 80013b0:	4825      	ldr	r0, [pc, #148]	; (8001448 <main+0x4c8>)
 80013b2:	f005 fb70 	bl	8006a96 <HAL_UART_Transmit>


			// Debug UART transmit values
			// sprintf((char*)buf, "%i %d :  || ", output_indx, (int) CH1_DC);
			// HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
			sprintf((char*)buf, "%i %4.2f %4.2f %i %i ;\n\r", xx, SpO2_s, SpO2_avg, SpO2_c, outputToggle);
 80013b6:	f8b7 646a 	ldrh.w	r6, [r7, #1130]	; 0x46a
 80013ba:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 80013be:	6818      	ldr	r0, [r3, #0]
 80013c0:	f7ff f8e2 	bl	8000588 <__aeabi_f2d>
 80013c4:	4604      	mov	r4, r0
 80013c6:	460d      	mov	r5, r1
 80013c8:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80013cc:	6818      	ldr	r0, [r3, #0]
 80013ce:	f7ff f8db 	bl	8000588 <__aeabi_f2d>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	f8b7 146c 	ldrh.w	r1, [r7, #1132]	; 0x46c
 80013da:	481f      	ldr	r0, [pc, #124]	; (8001458 <main+0x4d8>)
 80013dc:	7800      	ldrb	r0, [r0, #0]
 80013de:	f507 6c81 	add.w	ip, r7, #1032	; 0x408
 80013e2:	9005      	str	r0, [sp, #20]
 80013e4:	9104      	str	r1, [sp, #16]
 80013e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80013ea:	e9cd 4500 	strd	r4, r5, [sp]
 80013ee:	4632      	mov	r2, r6
 80013f0:	491a      	ldr	r1, [pc, #104]	; (800145c <main+0x4dc>)
 80013f2:	4660      	mov	r0, ip
 80013f4:	f006 fac2 	bl	800797c <siprintf>
			HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80013f8:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7fe ff07 	bl	8000210 <strlen>
 8001402:	4603      	mov	r3, r0
 8001404:	b29a      	uxth	r2, r3
 8001406:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 800140a:	f04f 33ff 	mov.w	r3, #4294967295
 800140e:	480e      	ldr	r0, [pc, #56]	; (8001448 <main+0x4c8>)
 8001410:	f005 fb41 	bl	8006a96 <HAL_UART_Transmit>

			MAX30100_DATA_REQUEST(hi2c1); // Request the next sample
 8001414:	4c12      	ldr	r4, [pc, #72]	; (8001460 <main+0x4e0>)
 8001416:	4668      	mov	r0, sp
 8001418:	f104 0310 	add.w	r3, r4, #16
 800141c:	2244      	movs	r2, #68	; 0x44
 800141e:	4619      	mov	r1, r3
 8001420:	f005 fe2c 	bl	800707c <memcpy>
 8001424:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001428:	f000 fc1b 	bl	8001c62 <MAX30100_DATA_REQUEST>

			timerFlag = 0;
 800142c:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <main+0x4e4>)
 800142e:	2200      	movs	r2, #0
 8001430:	701a      	strb	r2, [r3, #0]
		if(timerFlag == 1) // At 500HZ, give the program time to take all 4 measurements, plus a little extra for wiggle room
 8001432:	e651      	b.n	80010d8 <main+0x158>
 8001434:	f3af 8000 	nop.w
 8001438:	66666666 	.word	0x66666666
 800143c:	400a6666 	.word	0x400a6666
 8001440:	20000341 	.word	0x20000341
 8001444:	08009ddc 	.word	0x08009ddc
 8001448:	2000047c 	.word	0x2000047c
 800144c:	2000038c 	.word	0x2000038c
 8001450:	2000025c 	.word	0x2000025c
 8001454:	08009de4 	.word	0x08009de4
 8001458:	20000420 	.word	0x20000420
 800145c:	08009df4 	.word	0x08009df4
 8001460:	200002ec 	.word	0x200002ec
 8001464:	20000248 	.word	0x20000248

08001468 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b094      	sub	sp, #80	; 0x50
 800146c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800146e:	f107 031c 	add.w	r3, r7, #28
 8001472:	2234      	movs	r2, #52	; 0x34
 8001474:	2100      	movs	r1, #0
 8001476:	4618      	mov	r0, r3
 8001478:	f005 fe0e 	bl	8007098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800147c:	f107 0308 	add.w	r3, r7, #8
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800148c:	2300      	movs	r3, #0
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	4b2a      	ldr	r3, [pc, #168]	; (800153c <SystemClock_Config+0xd4>)
 8001492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001494:	4a29      	ldr	r2, [pc, #164]	; (800153c <SystemClock_Config+0xd4>)
 8001496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149a:	6413      	str	r3, [r2, #64]	; 0x40
 800149c:	4b27      	ldr	r3, [pc, #156]	; (800153c <SystemClock_Config+0xd4>)
 800149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80014a8:	2300      	movs	r3, #0
 80014aa:	603b      	str	r3, [r7, #0]
 80014ac:	4b24      	ldr	r3, [pc, #144]	; (8001540 <SystemClock_Config+0xd8>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014b4:	4a22      	ldr	r2, [pc, #136]	; (8001540 <SystemClock_Config+0xd8>)
 80014b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ba:	6013      	str	r3, [r2, #0]
 80014bc:	4b20      	ldr	r3, [pc, #128]	; (8001540 <SystemClock_Config+0xd8>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014c4:	603b      	str	r3, [r7, #0]
 80014c6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014c8:	2302      	movs	r3, #2
 80014ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014cc:	2301      	movs	r3, #1
 80014ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014d0:	2310      	movs	r3, #16
 80014d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014d4:	2302      	movs	r3, #2
 80014d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014d8:	2300      	movs	r3, #0
 80014da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80014dc:	2310      	movs	r3, #16
 80014de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014e0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80014e4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80014e6:	2304      	movs	r3, #4
 80014e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014ea:	2302      	movs	r3, #2
 80014ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014ee:	2302      	movs	r3, #2
 80014f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014f2:	f107 031c 	add.w	r3, r7, #28
 80014f6:	4618      	mov	r0, r3
 80014f8:	f003 ffa6 	bl	8005448 <HAL_RCC_OscConfig>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001502:	f000 fb8b 	bl	8001c1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001506:	230f      	movs	r3, #15
 8001508:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800150a:	2302      	movs	r3, #2
 800150c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001512:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001516:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001518:	2300      	movs	r3, #0
 800151a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800151c:	f107 0308 	add.w	r3, r7, #8
 8001520:	2102      	movs	r1, #2
 8001522:	4618      	mov	r0, r3
 8001524:	f003 fcc4 	bl	8004eb0 <HAL_RCC_ClockConfig>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800152e:	f000 fb75 	bl	8001c1c <Error_Handler>
  }
}
 8001532:	bf00      	nop
 8001534:	3750      	adds	r7, #80	; 0x50
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40023800 	.word	0x40023800
 8001540:	40007000 	.word	0x40007000

08001544 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800154a:	463b      	mov	r3, r7
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001556:	4b21      	ldr	r3, [pc, #132]	; (80015dc <MX_ADC1_Init+0x98>)
 8001558:	4a21      	ldr	r2, [pc, #132]	; (80015e0 <MX_ADC1_Init+0x9c>)
 800155a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800155c:	4b1f      	ldr	r3, [pc, #124]	; (80015dc <MX_ADC1_Init+0x98>)
 800155e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001562:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001564:	4b1d      	ldr	r3, [pc, #116]	; (80015dc <MX_ADC1_Init+0x98>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800156a:	4b1c      	ldr	r3, [pc, #112]	; (80015dc <MX_ADC1_Init+0x98>)
 800156c:	2200      	movs	r2, #0
 800156e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001570:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <MX_ADC1_Init+0x98>)
 8001572:	2200      	movs	r2, #0
 8001574:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001576:	4b19      	ldr	r3, [pc, #100]	; (80015dc <MX_ADC1_Init+0x98>)
 8001578:	2200      	movs	r2, #0
 800157a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800157e:	4b17      	ldr	r3, [pc, #92]	; (80015dc <MX_ADC1_Init+0x98>)
 8001580:	2200      	movs	r2, #0
 8001582:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001584:	4b15      	ldr	r3, [pc, #84]	; (80015dc <MX_ADC1_Init+0x98>)
 8001586:	4a17      	ldr	r2, [pc, #92]	; (80015e4 <MX_ADC1_Init+0xa0>)
 8001588:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800158a:	4b14      	ldr	r3, [pc, #80]	; (80015dc <MX_ADC1_Init+0x98>)
 800158c:	2200      	movs	r2, #0
 800158e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <MX_ADC1_Init+0x98>)
 8001592:	2201      	movs	r2, #1
 8001594:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <MX_ADC1_Init+0x98>)
 8001598:	2200      	movs	r2, #0
 800159a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800159e:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <MX_ADC1_Init+0x98>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015a4:	480d      	ldr	r0, [pc, #52]	; (80015dc <MX_ADC1_Init+0x98>)
 80015a6:	f001 f8b9 	bl	800271c <HAL_ADC_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80015b0:	f000 fb34 	bl	8001c1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015b4:	2301      	movs	r3, #1
 80015b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015b8:	2301      	movs	r3, #1
 80015ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015c0:	463b      	mov	r3, r7
 80015c2:	4619      	mov	r1, r3
 80015c4:	4805      	ldr	r0, [pc, #20]	; (80015dc <MX_ADC1_Init+0x98>)
 80015c6:	f001 fb2d 	bl	8002c24 <HAL_ADC_ConfigChannel>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80015d0:	f000 fb24 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015d4:	bf00      	nop
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000390 	.word	0x20000390
 80015e0:	40012000 	.word	0x40012000
 80015e4:	0f000001 	.word	0x0f000001

080015e8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015ee:	463b      	mov	r3, r7
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80015fa:	4b22      	ldr	r3, [pc, #136]	; (8001684 <MX_ADC2_Init+0x9c>)
 80015fc:	4a22      	ldr	r2, [pc, #136]	; (8001688 <MX_ADC2_Init+0xa0>)
 80015fe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001600:	4b20      	ldr	r3, [pc, #128]	; (8001684 <MX_ADC2_Init+0x9c>)
 8001602:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001606:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 8001608:	4b1e      	ldr	r3, [pc, #120]	; (8001684 <MX_ADC2_Init+0x9c>)
 800160a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800160e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001610:	4b1c      	ldr	r3, [pc, #112]	; (8001684 <MX_ADC2_Init+0x9c>)
 8001612:	2200      	movs	r2, #0
 8001614:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001616:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <MX_ADC2_Init+0x9c>)
 8001618:	2200      	movs	r2, #0
 800161a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800161c:	4b19      	ldr	r3, [pc, #100]	; (8001684 <MX_ADC2_Init+0x9c>)
 800161e:	2200      	movs	r2, #0
 8001620:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001624:	4b17      	ldr	r3, [pc, #92]	; (8001684 <MX_ADC2_Init+0x9c>)
 8001626:	2200      	movs	r2, #0
 8001628:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800162a:	4b16      	ldr	r3, [pc, #88]	; (8001684 <MX_ADC2_Init+0x9c>)
 800162c:	4a17      	ldr	r2, [pc, #92]	; (800168c <MX_ADC2_Init+0xa4>)
 800162e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001630:	4b14      	ldr	r3, [pc, #80]	; (8001684 <MX_ADC2_Init+0x9c>)
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001636:	4b13      	ldr	r3, [pc, #76]	; (8001684 <MX_ADC2_Init+0x9c>)
 8001638:	2201      	movs	r2, #1
 800163a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800163c:	4b11      	ldr	r3, [pc, #68]	; (8001684 <MX_ADC2_Init+0x9c>)
 800163e:	2200      	movs	r2, #0
 8001640:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001644:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <MX_ADC2_Init+0x9c>)
 8001646:	2201      	movs	r2, #1
 8001648:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800164a:	480e      	ldr	r0, [pc, #56]	; (8001684 <MX_ADC2_Init+0x9c>)
 800164c:	f001 f866 	bl	800271c <HAL_ADC_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 8001656:	f000 fae1 	bl	8001c1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800165a:	230e      	movs	r3, #14
 800165c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800165e:	2301      	movs	r3, #1
 8001660:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001662:	2300      	movs	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001666:	463b      	mov	r3, r7
 8001668:	4619      	mov	r1, r3
 800166a:	4806      	ldr	r0, [pc, #24]	; (8001684 <MX_ADC2_Init+0x9c>)
 800166c:	f001 fada 	bl	8002c24 <HAL_ADC_ConfigChannel>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 8001676:	f000 fad1 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800167a:	bf00      	nop
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200002a4 	.word	0x200002a4
 8001688:	40012100 	.word	0x40012100
 800168c:	0f000001 	.word	0x0f000001

08001690 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001696:	463b      	mov	r3, r7
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80016a2:	4b21      	ldr	r3, [pc, #132]	; (8001728 <MX_ADC3_Init+0x98>)
 80016a4:	4a21      	ldr	r2, [pc, #132]	; (800172c <MX_ADC3_Init+0x9c>)
 80016a6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016a8:	4b1f      	ldr	r3, [pc, #124]	; (8001728 <MX_ADC3_Init+0x98>)
 80016aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016ae:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80016b0:	4b1d      	ldr	r3, [pc, #116]	; (8001728 <MX_ADC3_Init+0x98>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80016b6:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <MX_ADC3_Init+0x98>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80016bc:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <MX_ADC3_Init+0x98>)
 80016be:	2200      	movs	r2, #0
 80016c0:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80016c2:	4b19      	ldr	r3, [pc, #100]	; (8001728 <MX_ADC3_Init+0x98>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016ca:	4b17      	ldr	r3, [pc, #92]	; (8001728 <MX_ADC3_Init+0x98>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016d0:	4b15      	ldr	r3, [pc, #84]	; (8001728 <MX_ADC3_Init+0x98>)
 80016d2:	4a17      	ldr	r2, [pc, #92]	; (8001730 <MX_ADC3_Init+0xa0>)
 80016d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016d6:	4b14      	ldr	r3, [pc, #80]	; (8001728 <MX_ADC3_Init+0x98>)
 80016d8:	2200      	movs	r2, #0
 80016da:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80016dc:	4b12      	ldr	r3, [pc, #72]	; (8001728 <MX_ADC3_Init+0x98>)
 80016de:	2201      	movs	r2, #1
 80016e0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80016e2:	4b11      	ldr	r3, [pc, #68]	; (8001728 <MX_ADC3_Init+0x98>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016ea:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <MX_ADC3_Init+0x98>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80016f0:	480d      	ldr	r0, [pc, #52]	; (8001728 <MX_ADC3_Init+0x98>)
 80016f2:	f001 f813 	bl	800271c <HAL_ADC_Init>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80016fc:	f000 fa8e 	bl	8001c1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001700:	230d      	movs	r3, #13
 8001702:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001704:	2301      	movs	r3, #1
 8001706:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001708:	2300      	movs	r3, #0
 800170a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800170c:	463b      	mov	r3, r7
 800170e:	4619      	mov	r1, r3
 8001710:	4805      	ldr	r0, [pc, #20]	; (8001728 <MX_ADC3_Init+0x98>)
 8001712:	f001 fa87 	bl	8002c24 <HAL_ADC_ConfigChannel>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800171c:	f000 fa7e 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001720:	bf00      	nop
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	200003d8 	.word	0x200003d8
 800172c:	40012200 	.word	0x40012200
 8001730:	0f000001 	.word	0x0f000001

08001734 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001738:	4b12      	ldr	r3, [pc, #72]	; (8001784 <MX_I2C1_Init+0x50>)
 800173a:	4a13      	ldr	r2, [pc, #76]	; (8001788 <MX_I2C1_Init+0x54>)
 800173c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800173e:	4b11      	ldr	r3, [pc, #68]	; (8001784 <MX_I2C1_Init+0x50>)
 8001740:	4a12      	ldr	r2, [pc, #72]	; (800178c <MX_I2C1_Init+0x58>)
 8001742:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001744:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <MX_I2C1_Init+0x50>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800174a:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <MX_I2C1_Init+0x50>)
 800174c:	2200      	movs	r2, #0
 800174e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001750:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <MX_I2C1_Init+0x50>)
 8001752:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001756:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001758:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <MX_I2C1_Init+0x50>)
 800175a:	2200      	movs	r2, #0
 800175c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800175e:	4b09      	ldr	r3, [pc, #36]	; (8001784 <MX_I2C1_Init+0x50>)
 8001760:	2200      	movs	r2, #0
 8001762:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001764:	4b07      	ldr	r3, [pc, #28]	; (8001784 <MX_I2C1_Init+0x50>)
 8001766:	2200      	movs	r2, #0
 8001768:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800176a:	4b06      	ldr	r3, [pc, #24]	; (8001784 <MX_I2C1_Init+0x50>)
 800176c:	2200      	movs	r2, #0
 800176e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001770:	4804      	ldr	r0, [pc, #16]	; (8001784 <MX_I2C1_Init+0x50>)
 8001772:	f001 ff69 	bl	8003648 <HAL_I2C_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800177c:	f000 fa4e 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	200002ec 	.word	0x200002ec
 8001788:	40005400 	.word	0x40005400
 800178c:	000186a0 	.word	0x000186a0

08001790 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08e      	sub	sp, #56	; 0x38
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001796:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a4:	f107 0320 	add.w	r3, r7, #32
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ae:	1d3b      	adds	r3, r7, #4
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
 80017bc:	615a      	str	r2, [r3, #20]
 80017be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017c0:	4b2d      	ldr	r3, [pc, #180]	; (8001878 <MX_TIM2_Init+0xe8>)
 80017c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80017c8:	4b2b      	ldr	r3, [pc, #172]	; (8001878 <MX_TIM2_Init+0xe8>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ce:	4b2a      	ldr	r3, [pc, #168]	; (8001878 <MX_TIM2_Init+0xe8>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80017d4:	4b28      	ldr	r3, [pc, #160]	; (8001878 <MX_TIM2_Init+0xe8>)
 80017d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017dc:	4b26      	ldr	r3, [pc, #152]	; (8001878 <MX_TIM2_Init+0xe8>)
 80017de:	2200      	movs	r2, #0
 80017e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017e2:	4b25      	ldr	r3, [pc, #148]	; (8001878 <MX_TIM2_Init+0xe8>)
 80017e4:	2280      	movs	r2, #128	; 0x80
 80017e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017e8:	4823      	ldr	r0, [pc, #140]	; (8001878 <MX_TIM2_Init+0xe8>)
 80017ea:	f004 f8cb 	bl	8005984 <HAL_TIM_Base_Init>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80017f4:	f000 fa12 	bl	8001c1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017fc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001802:	4619      	mov	r1, r3
 8001804:	481c      	ldr	r0, [pc, #112]	; (8001878 <MX_TIM2_Init+0xe8>)
 8001806:	f004 fc69 	bl	80060dc <HAL_TIM_ConfigClockSource>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001810:	f000 fa04 	bl	8001c1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001814:	4818      	ldr	r0, [pc, #96]	; (8001878 <MX_TIM2_Init+0xe8>)
 8001816:	f004 f975 	bl	8005b04 <HAL_TIM_PWM_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001820:	f000 f9fc 	bl	8001c1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001824:	2300      	movs	r3, #0
 8001826:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001828:	2300      	movs	r3, #0
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800182c:	f107 0320 	add.w	r3, r7, #32
 8001830:	4619      	mov	r1, r3
 8001832:	4811      	ldr	r0, [pc, #68]	; (8001878 <MX_TIM2_Init+0xe8>)
 8001834:	f005 f852 	bl	80068dc <HAL_TIMEx_MasterConfigSynchronization>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800183e:	f000 f9ed 	bl	8001c1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001842:	2360      	movs	r3, #96	; 0x60
 8001844:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001846:	2300      	movs	r3, #0
 8001848:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001852:	1d3b      	adds	r3, r7, #4
 8001854:	2200      	movs	r2, #0
 8001856:	4619      	mov	r1, r3
 8001858:	4807      	ldr	r0, [pc, #28]	; (8001878 <MX_TIM2_Init+0xe8>)
 800185a:	f004 fb7d 	bl	8005f58 <HAL_TIM_PWM_ConfigChannel>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001864:	f000 f9da 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001868:	4803      	ldr	r0, [pc, #12]	; (8001878 <MX_TIM2_Init+0xe8>)
 800186a:	f000 fcbb 	bl	80021e4 <HAL_TIM_MspPostInit>

}
 800186e:	bf00      	nop
 8001870:	3738      	adds	r7, #56	; 0x38
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000434 	.word	0x20000434

0800187c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001882:	f107 0308 	add.w	r3, r7, #8
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	609a      	str	r2, [r3, #8]
 800188e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001890:	463b      	mov	r3, r7
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001898:	4b1d      	ldr	r3, [pc, #116]	; (8001910 <MX_TIM3_Init+0x94>)
 800189a:	4a1e      	ldr	r2, [pc, #120]	; (8001914 <MX_TIM3_Init+0x98>)
 800189c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8000-1;
 800189e:	4b1c      	ldr	r3, [pc, #112]	; (8001910 <MX_TIM3_Init+0x94>)
 80018a0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80018a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a6:	4b1a      	ldr	r3, [pc, #104]	; (8001910 <MX_TIM3_Init+0x94>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80018ac:	4b18      	ldr	r3, [pc, #96]	; (8001910 <MX_TIM3_Init+0x94>)
 80018ae:	2263      	movs	r2, #99	; 0x63
 80018b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b2:	4b17      	ldr	r3, [pc, #92]	; (8001910 <MX_TIM3_Init+0x94>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018b8:	4b15      	ldr	r3, [pc, #84]	; (8001910 <MX_TIM3_Init+0x94>)
 80018ba:	2280      	movs	r2, #128	; 0x80
 80018bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018be:	4814      	ldr	r0, [pc, #80]	; (8001910 <MX_TIM3_Init+0x94>)
 80018c0:	f004 f860 	bl	8005984 <HAL_TIM_Base_Init>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80018ca:	f000 f9a7 	bl	8001c1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018d4:	f107 0308 	add.w	r3, r7, #8
 80018d8:	4619      	mov	r1, r3
 80018da:	480d      	ldr	r0, [pc, #52]	; (8001910 <MX_TIM3_Init+0x94>)
 80018dc:	f004 fbfe 	bl	80060dc <HAL_TIM_ConfigClockSource>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80018e6:	f000 f999 	bl	8001c1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ea:	2300      	movs	r3, #0
 80018ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018f2:	463b      	mov	r3, r7
 80018f4:	4619      	mov	r1, r3
 80018f6:	4806      	ldr	r0, [pc, #24]	; (8001910 <MX_TIM3_Init+0x94>)
 80018f8:	f004 fff0 	bl	80068dc <HAL_TIMEx_MasterConfigSynchronization>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001902:	f000 f98b 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001906:	bf00      	nop
 8001908:	3718      	adds	r7, #24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000344 	.word	0x20000344
 8001914:	40000400 	.word	0x40000400

08001918 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800191e:	463b      	mov	r3, r7
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001926:	4b15      	ldr	r3, [pc, #84]	; (800197c <MX_TIM7_Init+0x64>)
 8001928:	4a15      	ldr	r2, [pc, #84]	; (8001980 <MX_TIM7_Init+0x68>)
 800192a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8000 - 1;
 800192c:	4b13      	ldr	r3, [pc, #76]	; (800197c <MX_TIM7_Init+0x64>)
 800192e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001932:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001934:	4b11      	ldr	r3, [pc, #68]	; (800197c <MX_TIM7_Init+0x64>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = TIMER7PERIOD - 1;
 800193a:	4b10      	ldr	r3, [pc, #64]	; (800197c <MX_TIM7_Init+0x64>)
 800193c:	f240 6226 	movw	r2, #1574	; 0x626
 8001940:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001942:	4b0e      	ldr	r3, [pc, #56]	; (800197c <MX_TIM7_Init+0x64>)
 8001944:	2280      	movs	r2, #128	; 0x80
 8001946:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001948:	480c      	ldr	r0, [pc, #48]	; (800197c <MX_TIM7_Init+0x64>)
 800194a:	f004 f81b 	bl	8005984 <HAL_TIM_Base_Init>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001954:	f000 f962 	bl	8001c1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001958:	2300      	movs	r3, #0
 800195a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800195c:	2300      	movs	r3, #0
 800195e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001960:	463b      	mov	r3, r7
 8001962:	4619      	mov	r1, r3
 8001964:	4805      	ldr	r0, [pc, #20]	; (800197c <MX_TIM7_Init+0x64>)
 8001966:	f004 ffb9 	bl	80068dc <HAL_TIMEx_MasterConfigSynchronization>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001970:	f000 f954 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001974:	bf00      	nop
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	200004c0 	.word	0x200004c0
 8001980:	40001400 	.word	0x40001400

08001984 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001988:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <MX_USART2_UART_Init+0x4c>)
 800198a:	4a12      	ldr	r2, [pc, #72]	; (80019d4 <MX_USART2_UART_Init+0x50>)
 800198c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800198e:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <MX_USART2_UART_Init+0x4c>)
 8001990:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001994:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001996:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <MX_USART2_UART_Init+0x4c>)
 8001998:	2200      	movs	r2, #0
 800199a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <MX_USART2_UART_Init+0x4c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019a2:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <MX_USART2_UART_Init+0x4c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <MX_USART2_UART_Init+0x4c>)
 80019aa:	220c      	movs	r2, #12
 80019ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ae:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <MX_USART2_UART_Init+0x4c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <MX_USART2_UART_Init+0x4c>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019ba:	4805      	ldr	r0, [pc, #20]	; (80019d0 <MX_USART2_UART_Init+0x4c>)
 80019bc:	f005 f81e 	bl	80069fc <HAL_UART_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80019c6:	f000 f929 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	2000047c 	.word	0x2000047c
 80019d4:	40004400 	.word	0x40004400

080019d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019dc:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <MX_USART3_UART_Init+0x4c>)
 80019de:	4a12      	ldr	r2, [pc, #72]	; (8001a28 <MX_USART3_UART_Init+0x50>)
 80019e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019e2:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <MX_USART3_UART_Init+0x4c>)
 80019e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019ea:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <MX_USART3_UART_Init+0x4c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <MX_USART3_UART_Init+0x4c>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019f6:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <MX_USART3_UART_Init+0x4c>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019fc:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <MX_USART3_UART_Init+0x4c>)
 80019fe:	220c      	movs	r2, #12
 8001a00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a02:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <MX_USART3_UART_Init+0x4c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <MX_USART3_UART_Init+0x4c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a0e:	4805      	ldr	r0, [pc, #20]	; (8001a24 <MX_USART3_UART_Init+0x4c>)
 8001a10:	f004 fff4 	bl	80069fc <HAL_UART_Init>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001a1a:	f000 f8ff 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000260 	.word	0x20000260
 8001a28:	40004800 	.word	0x40004800

08001a2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	; 0x28
 8001a30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a32:	f107 0314 	add.w	r3, r7, #20
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	609a      	str	r2, [r3, #8]
 8001a3e:	60da      	str	r2, [r3, #12]
 8001a40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	4b2e      	ldr	r3, [pc, #184]	; (8001b00 <MX_GPIO_Init+0xd4>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a2d      	ldr	r2, [pc, #180]	; (8001b00 <MX_GPIO_Init+0xd4>)
 8001a4c:	f043 0304 	orr.w	r3, r3, #4
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b2b      	ldr	r3, [pc, #172]	; (8001b00 <MX_GPIO_Init+0xd4>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0304 	and.w	r3, r3, #4
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	4b27      	ldr	r3, [pc, #156]	; (8001b00 <MX_GPIO_Init+0xd4>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	4a26      	ldr	r2, [pc, #152]	; (8001b00 <MX_GPIO_Init+0xd4>)
 8001a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6e:	4b24      	ldr	r3, [pc, #144]	; (8001b00 <MX_GPIO_Init+0xd4>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	4b20      	ldr	r3, [pc, #128]	; (8001b00 <MX_GPIO_Init+0xd4>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	4a1f      	ldr	r2, [pc, #124]	; (8001b00 <MX_GPIO_Init+0xd4>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8a:	4b1d      	ldr	r3, [pc, #116]	; (8001b00 <MX_GPIO_Init+0xd4>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	607b      	str	r3, [r7, #4]
 8001a9a:	4b19      	ldr	r3, [pc, #100]	; (8001b00 <MX_GPIO_Init+0xd4>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	4a18      	ldr	r2, [pc, #96]	; (8001b00 <MX_GPIO_Init+0xd4>)
 8001aa0:	f043 0302 	orr.w	r3, r3, #2
 8001aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa6:	4b16      	ldr	r3, [pc, #88]	; (8001b00 <MX_GPIO_Init+0xd4>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	607b      	str	r3, [r7, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_12, GPIO_PIN_RESET);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8001ab8:	4812      	ldr	r0, [pc, #72]	; (8001b04 <MX_GPIO_Init+0xd8>)
 8001aba:	f001 fd91 	bl	80035e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001abe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ac2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ac4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ace:	f107 0314 	add.w	r3, r7, #20
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	480c      	ldr	r0, [pc, #48]	; (8001b08 <MX_GPIO_Init+0xdc>)
 8001ad6:	f001 fbef 	bl	80032b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_12;
 8001ada:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	4619      	mov	r1, r3
 8001af2:	4804      	ldr	r0, [pc, #16]	; (8001b04 <MX_GPIO_Init+0xd8>)
 8001af4:	f001 fbe0 	bl	80032b8 <HAL_GPIO_Init>

}
 8001af8:	bf00      	nop
 8001afa:	3728      	adds	r7, #40	; 0x28
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40023800 	.word	0x40023800
 8001b04:	40020000 	.word	0x40020000
 8001b08:	40020800 	.word	0x40020800

08001b0c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
	// Check which version of the timer triggered this callback
	if (htim == &htim3) {
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a1d      	ldr	r2, [pc, #116]	; (8001b8c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d103      	bne.n	8001b24 <HAL_TIM_PeriodElapsedCallback+0x18>
		timerFlag = 1;
 8001b1c:	4b1c      	ldr	r3, [pc, #112]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	701a      	strb	r2, [r3, #0]
		{
			output_indx = 0;
			outputToggle = 0;
		}
	}
}
 8001b22:	e02d      	b.n	8001b80 <HAL_TIM_PeriodElapsedCallback+0x74>
	} else if ((htim == &htim7) && (outputToggle == 1))	{
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a1b      	ldr	r2, [pc, #108]	; (8001b94 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d129      	bne.n	8001b80 <HAL_TIM_PeriodElapsedCallback+0x74>
 8001b2c:	4b1a      	ldr	r3, [pc, #104]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d125      	bne.n	8001b80 <HAL_TIM_PeriodElapsedCallback+0x74>
		CH1_DC = (int) (65535 * output_array[output_indx]);
 8001b34:	4b19      	ldr	r3, [pc, #100]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	4a19      	ldr	r2, [pc, #100]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	edd3 7a00 	vldr	s15, [r3]
 8001b42:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001ba4 <HAL_TIM_PeriodElapsedCallback+0x98>
 8001b46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b4e:	ee17 2a90 	vmov	r2, s15
 8001b52:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001b54:	601a      	str	r2, [r3, #0]
		output_indx = output_indx + 1;
 8001b56:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001b60:	701a      	strb	r2, [r3, #0]
		TIM2->CCR1 = CH1_DC;
 8001b62:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b6a:	635a      	str	r2, [r3, #52]	; 0x34
		if(output_indx > 20)
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b14      	cmp	r3, #20
 8001b72:	d905      	bls.n	8001b80 <HAL_TIM_PeriodElapsedCallback+0x74>
			output_indx = 0;
 8001b74:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	701a      	strb	r2, [r3, #0]
			outputToggle = 0;
 8001b7a:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	20000344 	.word	0x20000344
 8001b90:	20000248 	.word	0x20000248
 8001b94:	200004c0 	.word	0x200004c0
 8001b98:	20000420 	.word	0x20000420
 8001b9c:	20000421 	.word	0x20000421
 8001ba0:	20000000 	.word	0x20000000
 8001ba4:	477fff00 	.word	0x477fff00
 8001ba8:	2000024c 	.word	0x2000024c

08001bac <HAL_ADC_ConvCpltCallback>:

// Callback: An ADC conversion has finished.
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
	if(hadc == &hadc2)// Thermometer check
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a13      	ldr	r2, [pc, #76]	; (8001c04 <HAL_ADC_ConvCpltCallback+0x58>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d107      	bne.n	8001bcc <HAL_ADC_ConvCpltCallback+0x20>
	{
		ADC_thermRes = HAL_ADC_GetValue(&hadc2);
 8001bbc:	4811      	ldr	r0, [pc, #68]	; (8001c04 <HAL_ADC_ConvCpltCallback+0x58>)
 8001bbe:	f001 f810 	bl	8002be2 <HAL_ADC_GetValue>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001bc8:	701a      	strb	r2, [r3, #0]
	}
	else if (hadc == &hadc3) //12V check
	{
		ADC_power12Res = HAL_ADC_GetValue(&hadc3);
	}
}
 8001bca:	e016      	b.n	8001bfa <HAL_ADC_ConvCpltCallback+0x4e>
	else if (hadc == &hadc1) // 5V	check
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a0f      	ldr	r2, [pc, #60]	; (8001c0c <HAL_ADC_ConvCpltCallback+0x60>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d107      	bne.n	8001be4 <HAL_ADC_ConvCpltCallback+0x38>
		ADC_power5Res = HAL_ADC_GetValue(&hadc1);
 8001bd4:	480d      	ldr	r0, [pc, #52]	; (8001c0c <HAL_ADC_ConvCpltCallback+0x60>)
 8001bd6:	f001 f804 	bl	8002be2 <HAL_ADC_GetValue>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <HAL_ADC_ConvCpltCallback+0x64>)
 8001be0:	701a      	strb	r2, [r3, #0]
}
 8001be2:	e00a      	b.n	8001bfa <HAL_ADC_ConvCpltCallback+0x4e>
	else if (hadc == &hadc3) //12V check
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a0b      	ldr	r2, [pc, #44]	; (8001c14 <HAL_ADC_ConvCpltCallback+0x68>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d106      	bne.n	8001bfa <HAL_ADC_ConvCpltCallback+0x4e>
		ADC_power12Res = HAL_ADC_GetValue(&hadc3);
 8001bec:	4809      	ldr	r0, [pc, #36]	; (8001c14 <HAL_ADC_ConvCpltCallback+0x68>)
 8001bee:	f000 fff8 	bl	8002be2 <HAL_ADC_GetValue>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001bf8:	701a      	strb	r2, [r3, #0]
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	200002a4 	.word	0x200002a4
 8001c08:	20000341 	.word	0x20000341
 8001c0c:	20000390 	.word	0x20000390
 8001c10:	2000038c 	.word	0x2000038c
 8001c14:	200003d8 	.word	0x200003d8
 8001c18:	2000025c 	.word	0x2000025c

08001c1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c20:	b672      	cpsid	i
}
 8001c22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c24:	e7fe      	b.n	8001c24 <Error_Handler+0x8>

08001c26 <MAX30100_WRITE>:
#include "main.h"

HAL_StatusTypeDef ret;

void MAX30100_WRITE(I2C_HandleTypeDef h, uint16_t target, uint8_t pData)
{
 8001c26:	b084      	sub	sp, #16
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af04      	add	r7, sp, #16
 8001c2e:	f107 0c08 	add.w	ip, r7, #8
 8001c32:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_I2C_Mem_Write(&h, MAX_ADDR, target, 1, &pData, 1, HAL_MAX_DELAY);
 8001c36:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8001c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c3e:	9302      	str	r3, [sp, #8]
 8001c40:	2301      	movs	r3, #1
 8001c42:	9301      	str	r3, [sp, #4]
 8001c44:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	21ae      	movs	r1, #174	; 0xae
 8001c4e:	f107 0008 	add.w	r0, r7, #8
 8001c52:	f002 f961 	bl	8003f18 <HAL_I2C_Mem_Write>
}
 8001c56:	bf00      	nop
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c5e:	b004      	add	sp, #16
 8001c60:	4770      	bx	lr

08001c62 <MAX30100_DATA_REQUEST>:
	}
	return buf[0];
}

void MAX30100_DATA_REQUEST(I2C_HandleTypeDef h)
{
 8001c62:	b084      	sub	sp, #16
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af04      	add	r7, sp, #16
 8001c6a:	f107 0c10 	add.w	ip, r7, #16
 8001c6e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t pData = 0x00;
 8001c72:	2300      	movs	r3, #0
 8001c74:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&h, MAX_ADDR, REG_SpO2_WRPT, 1, &pData, 1, HAL_MAX_DELAY);
 8001c76:	f04f 33ff 	mov.w	r3, #4294967295
 8001c7a:	9302      	str	r3, [sp, #8]
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	9301      	str	r3, [sp, #4]
 8001c80:	1dfb      	adds	r3, r7, #7
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	2301      	movs	r3, #1
 8001c86:	2202      	movs	r2, #2
 8001c88:	21ae      	movs	r1, #174	; 0xae
 8001c8a:	f107 0010 	add.w	r0, r7, #16
 8001c8e:	f002 f943 	bl	8003f18 <HAL_I2C_Mem_Write>
	pData = 0x00;
 8001c92:	2300      	movs	r3, #0
 8001c94:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&h, MAX_ADDR, REG_SpO2_OVFC, 1, &pData, 1, HAL_MAX_DELAY);
 8001c96:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9a:	9302      	str	r3, [sp, #8]
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	9301      	str	r3, [sp, #4]
 8001ca0:	1dfb      	adds	r3, r7, #7
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	2203      	movs	r2, #3
 8001ca8:	21ae      	movs	r1, #174	; 0xae
 8001caa:	f107 0010 	add.w	r0, r7, #16
 8001cae:	f002 f933 	bl	8003f18 <HAL_I2C_Mem_Write>
	pData = 0x00;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&h, MAX_ADDR, REG_SpO2_RDPT, 1, &pData, 1, HAL_MAX_DELAY);
 8001cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cba:	9302      	str	r3, [sp, #8]
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	9301      	str	r3, [sp, #4]
 8001cc0:	1dfb      	adds	r3, r7, #7
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	2204      	movs	r2, #4
 8001cc8:	21ae      	movs	r1, #174	; 0xae
 8001cca:	f107 0010 	add.w	r0, r7, #16
 8001cce:	f002 f923 	bl	8003f18 <HAL_I2C_Mem_Write>
}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001cdc:	b004      	add	sp, #16
 8001cde:	4770      	bx	lr

08001ce0 <MAX30100_TRANSMIT>:

HAL_StatusTypeDef MAX30100_TRANSMIT(I2C_HandleTypeDef h, uint16_t target)
{
 8001ce0:	b084      	sub	sp, #16
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b08c      	sub	sp, #48	; 0x30
 8001ce6:	af02      	add	r7, sp, #8
 8001ce8:	f107 0c30 	add.w	ip, r7, #48	; 0x30
 8001cec:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t buf[32];
	buf[0] = target;
 8001cf0:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	713b      	strb	r3, [r7, #4]
	HAL_StatusTypeDef ret =	HAL_I2C_Master_Transmit(&h, MAX_ADDR, buf, 1, HAL_MAX_DELAY);
 8001cf8:	1d3a      	adds	r2, r7, #4
 8001cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	2301      	movs	r3, #1
 8001d02:	21ae      	movs	r1, #174	; 0xae
 8001d04:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001d08:	f001 fde2 	bl	80038d0 <HAL_I2C_Master_Transmit>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	return ret;
 8001d12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3728      	adds	r7, #40	; 0x28
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d20:	b004      	add	sp, #16
 8001d22:	4770      	bx	lr

08001d24 <MAX30100_SPO2_EXTRACT>:



struct spo2vals MAX30100_SPO2_EXTRACT(I2C_HandleTypeDef h)
{
 8001d24:	b084      	sub	sp, #16
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b0a2      	sub	sp, #136	; 0x88
 8001d2a:	af04      	add	r7, sp, #16
 8001d2c:	f107 0c80 	add.w	ip, r7, #128	; 0x80
 8001d30:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t pDataI[64];
	float ir_s1, ir_s2, ir_s3, ir_s4;
	float vr_s1, vr_s2, vr_s3, vr_s4;
	struct spo2vals to_return;

	HAL_I2C_Mem_Read(&h, MAX_ADDR, REG_SpO2_DATA, 1, pDataI, 16, HAL_MAX_DELAY);
 8001d34:	f04f 33ff 	mov.w	r3, #4294967295
 8001d38:	9302      	str	r3, [sp, #8]
 8001d3a:	2310      	movs	r3, #16
 8001d3c:	9301      	str	r3, [sp, #4]
 8001d3e:	f107 0310 	add.w	r3, r7, #16
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	2301      	movs	r3, #1
 8001d46:	2205      	movs	r2, #5
 8001d48:	21ae      	movs	r1, #174	; 0xae
 8001d4a:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8001d4e:	f002 f9dd 	bl	800410c <HAL_I2C_Mem_Read>

	ir_s1 = (pDataI[0] << 8) + pDataI[1];
 8001d52:	7c3b      	ldrb	r3, [r7, #16]
 8001d54:	021b      	lsls	r3, r3, #8
 8001d56:	7c7a      	ldrb	r2, [r7, #17]
 8001d58:	4413      	add	r3, r2
 8001d5a:	ee07 3a90 	vmov	s15, r3
 8001d5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d62:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	vr_s1 = (pDataI[2] << 8) + pDataI[3];
 8001d66:	7cbb      	ldrb	r3, [r7, #18]
 8001d68:	021b      	lsls	r3, r3, #8
 8001d6a:	7cfa      	ldrb	r2, [r7, #19]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	ee07 3a90 	vmov	s15, r3
 8001d72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d76:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

	ir_s2 = (pDataI[4] << 8) + pDataI[5];
 8001d7a:	7d3b      	ldrb	r3, [r7, #20]
 8001d7c:	021b      	lsls	r3, r3, #8
 8001d7e:	7d7a      	ldrb	r2, [r7, #21]
 8001d80:	4413      	add	r3, r2
 8001d82:	ee07 3a90 	vmov	s15, r3
 8001d86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d8a:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	vr_s2 = (pDataI[6] << 8) + pDataI[7];
 8001d8e:	7dbb      	ldrb	r3, [r7, #22]
 8001d90:	021b      	lsls	r3, r3, #8
 8001d92:	7dfa      	ldrb	r2, [r7, #23]
 8001d94:	4413      	add	r3, r2
 8001d96:	ee07 3a90 	vmov	s15, r3
 8001d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d9e:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

	ir_s3 = (pDataI[8] << 8) + pDataI[9];
 8001da2:	7e3b      	ldrb	r3, [r7, #24]
 8001da4:	021b      	lsls	r3, r3, #8
 8001da6:	7e7a      	ldrb	r2, [r7, #25]
 8001da8:	4413      	add	r3, r2
 8001daa:	ee07 3a90 	vmov	s15, r3
 8001dae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001db2:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	vr_s3 = (pDataI[10] << 8) + pDataI[11];
 8001db6:	7ebb      	ldrb	r3, [r7, #26]
 8001db8:	021b      	lsls	r3, r3, #8
 8001dba:	7efa      	ldrb	r2, [r7, #27]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	ee07 3a90 	vmov	s15, r3
 8001dc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dc6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

	ir_s4 = (pDataI[12] << 8) + pDataI[13];
 8001dca:	7f3b      	ldrb	r3, [r7, #28]
 8001dcc:	021b      	lsls	r3, r3, #8
 8001dce:	7f7a      	ldrb	r2, [r7, #29]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	ee07 3a90 	vmov	s15, r3
 8001dd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dda:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	vr_s4 = (pDataI[14] << 8) + pDataI[15];
 8001dde:	7fbb      	ldrb	r3, [r7, #30]
 8001de0:	021b      	lsls	r3, r3, #8
 8001de2:	7ffa      	ldrb	r2, [r7, #31]
 8001de4:	4413      	add	r3, r2
 8001de6:	ee07 3a90 	vmov	s15, r3
 8001dea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dee:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

	to_return.ir_val = (float)((ir_s1 + ir_s2 + ir_s3 + ir_s4) / 4);
 8001df2:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8001df6:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001dfa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dfe:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001e02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e06:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001e0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e0e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001e12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e16:	edc7 7a02 	vstr	s15, [r7, #8]
	to_return.vr_val = (float)((vr_s1 + vr_s2 + vr_s3 + vr_s4) / 4);
 8001e1a:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8001e1e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001e22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e26:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001e2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e2e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001e32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e36:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001e3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e3e:	edc7 7a03 	vstr	s15, [r7, #12]

	return to_return;
 8001e42:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e46:	f107 0208 	add.w	r2, r7, #8
 8001e4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e4e:	e883 0003 	stmia.w	r3, {r0, r1}
 8001e52:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001e54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e56:	ee07 2a10 	vmov	s14, r2
 8001e5a:	ee07 3a90 	vmov	s15, r3
}
 8001e5e:	eeb0 0a47 	vmov.f32	s0, s14
 8001e62:	eef0 0a67 	vmov.f32	s1, s15
 8001e66:	3778      	adds	r7, #120	; 0x78
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e6e:	b004      	add	sp, #16
 8001e70:	4770      	bx	lr
	...

08001e74 <MAX30100_SPO2_AVRG>:

float MAX30100_SPO2_AVRG(float array[])
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
	float med = 0;
 8001e7c:	f04f 0300 	mov.w	r3, #0
 8001e80:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < DEPTH; i++)
 8001e82:	2300      	movs	r3, #0
 8001e84:	60bb      	str	r3, [r7, #8]
 8001e86:	e00e      	b.n	8001ea6 <MAX30100_SPO2_AVRG+0x32>
	{
		med = med + array[i];
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	4413      	add	r3, r2
 8001e90:	edd3 7a00 	vldr	s15, [r3]
 8001e94:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e9c:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int i = 0; i < DEPTH; i++)
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	60bb      	str	r3, [r7, #8]
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	2bfe      	cmp	r3, #254	; 0xfe
 8001eaa:	dded      	ble.n	8001e88 <MAX30100_SPO2_AVRG+0x14>
	}
	med = med/DEPTH;
 8001eac:	ed97 7a03 	vldr	s14, [r7, #12]
 8001eb0:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001ed0 <MAX30100_SPO2_AVRG+0x5c>
 8001eb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eb8:	edc7 7a03 	vstr	s15, [r7, #12]
	return med;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	ee07 3a90 	vmov	s15, r3
}
 8001ec2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	437f0000 	.word	0x437f0000

08001ed4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	607b      	str	r3, [r7, #4]
 8001ede:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <HAL_MspInit+0x4c>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	4a0f      	ldr	r2, [pc, #60]	; (8001f20 <HAL_MspInit+0x4c>)
 8001ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eea:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <HAL_MspInit+0x4c>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	603b      	str	r3, [r7, #0]
 8001efa:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <HAL_MspInit+0x4c>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	4a08      	ldr	r2, [pc, #32]	; (8001f20 <HAL_MspInit+0x4c>)
 8001f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f04:	6413      	str	r3, [r2, #64]	; 0x40
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_MspInit+0x4c>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	603b      	str	r3, [r7, #0]
 8001f10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f12:	2007      	movs	r0, #7
 8001f14:	f001 f98e 	bl	8003234 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f18:	bf00      	nop
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40023800 	.word	0x40023800

08001f24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08e      	sub	sp, #56	; 0x38
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]
 8001f3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a51      	ldr	r2, [pc, #324]	; (8002088 <HAL_ADC_MspInit+0x164>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d130      	bne.n	8001fa8 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	623b      	str	r3, [r7, #32]
 8001f4a:	4b50      	ldr	r3, [pc, #320]	; (800208c <HAL_ADC_MspInit+0x168>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4e:	4a4f      	ldr	r2, [pc, #316]	; (800208c <HAL_ADC_MspInit+0x168>)
 8001f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f54:	6453      	str	r3, [r2, #68]	; 0x44
 8001f56:	4b4d      	ldr	r3, [pc, #308]	; (800208c <HAL_ADC_MspInit+0x168>)
 8001f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5e:	623b      	str	r3, [r7, #32]
 8001f60:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	61fb      	str	r3, [r7, #28]
 8001f66:	4b49      	ldr	r3, [pc, #292]	; (800208c <HAL_ADC_MspInit+0x168>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	4a48      	ldr	r2, [pc, #288]	; (800208c <HAL_ADC_MspInit+0x168>)
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	6313      	str	r3, [r2, #48]	; 0x30
 8001f72:	4b46      	ldr	r3, [pc, #280]	; (800208c <HAL_ADC_MspInit+0x168>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	61fb      	str	r3, [r7, #28]
 8001f7c:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f82:	2303      	movs	r3, #3
 8001f84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f8e:	4619      	mov	r1, r3
 8001f90:	483f      	ldr	r0, [pc, #252]	; (8002090 <HAL_ADC_MspInit+0x16c>)
 8001f92:	f001 f991 	bl	80032b8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001f96:	2200      	movs	r2, #0
 8001f98:	2100      	movs	r1, #0
 8001f9a:	2012      	movs	r0, #18
 8001f9c:	f001 f955 	bl	800324a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001fa0:	2012      	movs	r0, #18
 8001fa2:	f001 f96e 	bl	8003282 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001fa6:	e06a      	b.n	800207e <HAL_ADC_MspInit+0x15a>
  else if(hadc->Instance==ADC2)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a39      	ldr	r2, [pc, #228]	; (8002094 <HAL_ADC_MspInit+0x170>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d130      	bne.n	8002014 <HAL_ADC_MspInit+0xf0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61bb      	str	r3, [r7, #24]
 8001fb6:	4b35      	ldr	r3, [pc, #212]	; (800208c <HAL_ADC_MspInit+0x168>)
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fba:	4a34      	ldr	r2, [pc, #208]	; (800208c <HAL_ADC_MspInit+0x168>)
 8001fbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fc2:	4b32      	ldr	r3, [pc, #200]	; (800208c <HAL_ADC_MspInit+0x168>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fca:	61bb      	str	r3, [r7, #24]
 8001fcc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	617b      	str	r3, [r7, #20]
 8001fd2:	4b2e      	ldr	r3, [pc, #184]	; (800208c <HAL_ADC_MspInit+0x168>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	4a2d      	ldr	r2, [pc, #180]	; (800208c <HAL_ADC_MspInit+0x168>)
 8001fd8:	f043 0304 	orr.w	r3, r3, #4
 8001fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fde:	4b2b      	ldr	r3, [pc, #172]	; (800208c <HAL_ADC_MspInit+0x168>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	f003 0304 	and.w	r3, r3, #4
 8001fe6:	617b      	str	r3, [r7, #20]
 8001fe8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001fea:	2310      	movs	r3, #16
 8001fec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ff6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4826      	ldr	r0, [pc, #152]	; (8002098 <HAL_ADC_MspInit+0x174>)
 8001ffe:	f001 f95b 	bl	80032b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002002:	2200      	movs	r2, #0
 8002004:	2100      	movs	r1, #0
 8002006:	2012      	movs	r0, #18
 8002008:	f001 f91f 	bl	800324a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800200c:	2012      	movs	r0, #18
 800200e:	f001 f938 	bl	8003282 <HAL_NVIC_EnableIRQ>
}
 8002012:	e034      	b.n	800207e <HAL_ADC_MspInit+0x15a>
  else if(hadc->Instance==ADC3)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a20      	ldr	r2, [pc, #128]	; (800209c <HAL_ADC_MspInit+0x178>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d12f      	bne.n	800207e <HAL_ADC_MspInit+0x15a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	613b      	str	r3, [r7, #16]
 8002022:	4b1a      	ldr	r3, [pc, #104]	; (800208c <HAL_ADC_MspInit+0x168>)
 8002024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002026:	4a19      	ldr	r2, [pc, #100]	; (800208c <HAL_ADC_MspInit+0x168>)
 8002028:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800202c:	6453      	str	r3, [r2, #68]	; 0x44
 800202e:	4b17      	ldr	r3, [pc, #92]	; (800208c <HAL_ADC_MspInit+0x168>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002036:	613b      	str	r3, [r7, #16]
 8002038:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	4b13      	ldr	r3, [pc, #76]	; (800208c <HAL_ADC_MspInit+0x168>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	4a12      	ldr	r2, [pc, #72]	; (800208c <HAL_ADC_MspInit+0x168>)
 8002044:	f043 0304 	orr.w	r3, r3, #4
 8002048:	6313      	str	r3, [r2, #48]	; 0x30
 800204a:	4b10      	ldr	r3, [pc, #64]	; (800208c <HAL_ADC_MspInit+0x168>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	f003 0304 	and.w	r3, r3, #4
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002056:	2308      	movs	r3, #8
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800205a:	2303      	movs	r3, #3
 800205c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205e:	2300      	movs	r3, #0
 8002060:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002066:	4619      	mov	r1, r3
 8002068:	480b      	ldr	r0, [pc, #44]	; (8002098 <HAL_ADC_MspInit+0x174>)
 800206a:	f001 f925 	bl	80032b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800206e:	2200      	movs	r2, #0
 8002070:	2100      	movs	r1, #0
 8002072:	2012      	movs	r0, #18
 8002074:	f001 f8e9 	bl	800324a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002078:	2012      	movs	r0, #18
 800207a:	f001 f902 	bl	8003282 <HAL_NVIC_EnableIRQ>
}
 800207e:	bf00      	nop
 8002080:	3738      	adds	r7, #56	; 0x38
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40012000 	.word	0x40012000
 800208c:	40023800 	.word	0x40023800
 8002090:	40020000 	.word	0x40020000
 8002094:	40012100 	.word	0x40012100
 8002098:	40020800 	.word	0x40020800
 800209c:	40012200 	.word	0x40012200

080020a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08a      	sub	sp, #40	; 0x28
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a8:	f107 0314 	add.w	r3, r7, #20
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	60da      	str	r2, [r3, #12]
 80020b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a19      	ldr	r2, [pc, #100]	; (8002124 <HAL_I2C_MspInit+0x84>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d12c      	bne.n	800211c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	613b      	str	r3, [r7, #16]
 80020c6:	4b18      	ldr	r3, [pc, #96]	; (8002128 <HAL_I2C_MspInit+0x88>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	4a17      	ldr	r2, [pc, #92]	; (8002128 <HAL_I2C_MspInit+0x88>)
 80020cc:	f043 0302 	orr.w	r3, r3, #2
 80020d0:	6313      	str	r3, [r2, #48]	; 0x30
 80020d2:	4b15      	ldr	r3, [pc, #84]	; (8002128 <HAL_I2C_MspInit+0x88>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	613b      	str	r3, [r7, #16]
 80020dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020e4:	2312      	movs	r3, #18
 80020e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020e8:	2301      	movs	r3, #1
 80020ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ec:	2303      	movs	r3, #3
 80020ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020f0:	2304      	movs	r3, #4
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f4:	f107 0314 	add.w	r3, r7, #20
 80020f8:	4619      	mov	r1, r3
 80020fa:	480c      	ldr	r0, [pc, #48]	; (800212c <HAL_I2C_MspInit+0x8c>)
 80020fc:	f001 f8dc 	bl	80032b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002100:	2300      	movs	r3, #0
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	4b08      	ldr	r3, [pc, #32]	; (8002128 <HAL_I2C_MspInit+0x88>)
 8002106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002108:	4a07      	ldr	r2, [pc, #28]	; (8002128 <HAL_I2C_MspInit+0x88>)
 800210a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800210e:	6413      	str	r3, [r2, #64]	; 0x40
 8002110:	4b05      	ldr	r3, [pc, #20]	; (8002128 <HAL_I2C_MspInit+0x88>)
 8002112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002114:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800211c:	bf00      	nop
 800211e:	3728      	adds	r7, #40	; 0x28
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40005400 	.word	0x40005400
 8002128:	40023800 	.word	0x40023800
 800212c:	40020400 	.word	0x40020400

08002130 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002140:	d10e      	bne.n	8002160 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	4b24      	ldr	r3, [pc, #144]	; (80021d8 <HAL_TIM_Base_MspInit+0xa8>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	4a23      	ldr	r2, [pc, #140]	; (80021d8 <HAL_TIM_Base_MspInit+0xa8>)
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	6413      	str	r3, [r2, #64]	; 0x40
 8002152:	4b21      	ldr	r3, [pc, #132]	; (80021d8 <HAL_TIM_Base_MspInit+0xa8>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	617b      	str	r3, [r7, #20]
 800215c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800215e:	e036      	b.n	80021ce <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a1d      	ldr	r2, [pc, #116]	; (80021dc <HAL_TIM_Base_MspInit+0xac>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d116      	bne.n	8002198 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	613b      	str	r3, [r7, #16]
 800216e:	4b1a      	ldr	r3, [pc, #104]	; (80021d8 <HAL_TIM_Base_MspInit+0xa8>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	4a19      	ldr	r2, [pc, #100]	; (80021d8 <HAL_TIM_Base_MspInit+0xa8>)
 8002174:	f043 0302 	orr.w	r3, r3, #2
 8002178:	6413      	str	r3, [r2, #64]	; 0x40
 800217a:	4b17      	ldr	r3, [pc, #92]	; (80021d8 <HAL_TIM_Base_MspInit+0xa8>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002186:	2200      	movs	r2, #0
 8002188:	2100      	movs	r1, #0
 800218a:	201d      	movs	r0, #29
 800218c:	f001 f85d 	bl	800324a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002190:	201d      	movs	r0, #29
 8002192:	f001 f876 	bl	8003282 <HAL_NVIC_EnableIRQ>
}
 8002196:	e01a      	b.n	80021ce <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM7)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a10      	ldr	r2, [pc, #64]	; (80021e0 <HAL_TIM_Base_MspInit+0xb0>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d115      	bne.n	80021ce <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	4b0c      	ldr	r3, [pc, #48]	; (80021d8 <HAL_TIM_Base_MspInit+0xa8>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	4a0b      	ldr	r2, [pc, #44]	; (80021d8 <HAL_TIM_Base_MspInit+0xa8>)
 80021ac:	f043 0320 	orr.w	r3, r3, #32
 80021b0:	6413      	str	r3, [r2, #64]	; 0x40
 80021b2:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <HAL_TIM_Base_MspInit+0xa8>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	f003 0320 	and.w	r3, r3, #32
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80021be:	2200      	movs	r2, #0
 80021c0:	2100      	movs	r1, #0
 80021c2:	2037      	movs	r0, #55	; 0x37
 80021c4:	f001 f841 	bl	800324a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80021c8:	2037      	movs	r0, #55	; 0x37
 80021ca:	f001 f85a 	bl	8003282 <HAL_NVIC_EnableIRQ>
}
 80021ce:	bf00      	nop
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40023800 	.word	0x40023800
 80021dc:	40000400 	.word	0x40000400
 80021e0:	40001400 	.word	0x40001400

080021e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b088      	sub	sp, #32
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ec:	f107 030c 	add.w	r3, r7, #12
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	609a      	str	r2, [r3, #8]
 80021f8:	60da      	str	r2, [r3, #12]
 80021fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002204:	d11d      	bne.n	8002242 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	4b10      	ldr	r3, [pc, #64]	; (800224c <HAL_TIM_MspPostInit+0x68>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	4a0f      	ldr	r2, [pc, #60]	; (800224c <HAL_TIM_MspPostInit+0x68>)
 8002210:	f043 0301 	orr.w	r3, r3, #1
 8002214:	6313      	str	r3, [r2, #48]	; 0x30
 8002216:	4b0d      	ldr	r3, [pc, #52]	; (800224c <HAL_TIM_MspPostInit+0x68>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	60bb      	str	r3, [r7, #8]
 8002220:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002222:	2301      	movs	r3, #1
 8002224:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002226:	2302      	movs	r3, #2
 8002228:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222e:	2300      	movs	r3, #0
 8002230:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002232:	2301      	movs	r3, #1
 8002234:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002236:	f107 030c 	add.w	r3, r7, #12
 800223a:	4619      	mov	r1, r3
 800223c:	4804      	ldr	r0, [pc, #16]	; (8002250 <HAL_TIM_MspPostInit+0x6c>)
 800223e:	f001 f83b 	bl	80032b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002242:	bf00      	nop
 8002244:	3720      	adds	r7, #32
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40023800 	.word	0x40023800
 8002250:	40020000 	.word	0x40020000

08002254 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08c      	sub	sp, #48	; 0x30
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800225c:	f107 031c 	add.w	r3, r7, #28
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	60da      	str	r2, [r3, #12]
 800226a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a41      	ldr	r2, [pc, #260]	; (8002378 <HAL_UART_MspInit+0x124>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d12c      	bne.n	80022d0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	61bb      	str	r3, [r7, #24]
 800227a:	4b40      	ldr	r3, [pc, #256]	; (800237c <HAL_UART_MspInit+0x128>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	4a3f      	ldr	r2, [pc, #252]	; (800237c <HAL_UART_MspInit+0x128>)
 8002280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002284:	6413      	str	r3, [r2, #64]	; 0x40
 8002286:	4b3d      	ldr	r3, [pc, #244]	; (800237c <HAL_UART_MspInit+0x128>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228e:	61bb      	str	r3, [r7, #24]
 8002290:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	617b      	str	r3, [r7, #20]
 8002296:	4b39      	ldr	r3, [pc, #228]	; (800237c <HAL_UART_MspInit+0x128>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	4a38      	ldr	r2, [pc, #224]	; (800237c <HAL_UART_MspInit+0x128>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	6313      	str	r3, [r2, #48]	; 0x30
 80022a2:	4b36      	ldr	r3, [pc, #216]	; (800237c <HAL_UART_MspInit+0x128>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	617b      	str	r3, [r7, #20]
 80022ac:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80022ae:	230c      	movs	r3, #12
 80022b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b2:	2302      	movs	r3, #2
 80022b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ba:	2303      	movs	r3, #3
 80022bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022be:	2307      	movs	r3, #7
 80022c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c2:	f107 031c 	add.w	r3, r7, #28
 80022c6:	4619      	mov	r1, r3
 80022c8:	482d      	ldr	r0, [pc, #180]	; (8002380 <HAL_UART_MspInit+0x12c>)
 80022ca:	f000 fff5 	bl	80032b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80022ce:	e04f      	b.n	8002370 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART3)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a2b      	ldr	r2, [pc, #172]	; (8002384 <HAL_UART_MspInit+0x130>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d14a      	bne.n	8002370 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	613b      	str	r3, [r7, #16]
 80022de:	4b27      	ldr	r3, [pc, #156]	; (800237c <HAL_UART_MspInit+0x128>)
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	4a26      	ldr	r2, [pc, #152]	; (800237c <HAL_UART_MspInit+0x128>)
 80022e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022e8:	6413      	str	r3, [r2, #64]	; 0x40
 80022ea:	4b24      	ldr	r3, [pc, #144]	; (800237c <HAL_UART_MspInit+0x128>)
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022f2:	613b      	str	r3, [r7, #16]
 80022f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	4b20      	ldr	r3, [pc, #128]	; (800237c <HAL_UART_MspInit+0x128>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	4a1f      	ldr	r2, [pc, #124]	; (800237c <HAL_UART_MspInit+0x128>)
 8002300:	f043 0304 	orr.w	r3, r3, #4
 8002304:	6313      	str	r3, [r2, #48]	; 0x30
 8002306:	4b1d      	ldr	r3, [pc, #116]	; (800237c <HAL_UART_MspInit+0x128>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	f003 0304 	and.w	r3, r3, #4
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	4b19      	ldr	r3, [pc, #100]	; (800237c <HAL_UART_MspInit+0x128>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	4a18      	ldr	r2, [pc, #96]	; (800237c <HAL_UART_MspInit+0x128>)
 800231c:	f043 0302 	orr.w	r3, r3, #2
 8002320:	6313      	str	r3, [r2, #48]	; 0x30
 8002322:	4b16      	ldr	r3, [pc, #88]	; (800237c <HAL_UART_MspInit+0x128>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	60bb      	str	r3, [r7, #8]
 800232c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800232e:	2320      	movs	r3, #32
 8002330:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002332:	2302      	movs	r3, #2
 8002334:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002336:	2300      	movs	r3, #0
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800233a:	2303      	movs	r3, #3
 800233c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800233e:	2307      	movs	r3, #7
 8002340:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002342:	f107 031c 	add.w	r3, r7, #28
 8002346:	4619      	mov	r1, r3
 8002348:	480f      	ldr	r0, [pc, #60]	; (8002388 <HAL_UART_MspInit+0x134>)
 800234a:	f000 ffb5 	bl	80032b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800234e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002354:	2302      	movs	r3, #2
 8002356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002358:	2300      	movs	r3, #0
 800235a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800235c:	2303      	movs	r3, #3
 800235e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002360:	2307      	movs	r3, #7
 8002362:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002364:	f107 031c 	add.w	r3, r7, #28
 8002368:	4619      	mov	r1, r3
 800236a:	4808      	ldr	r0, [pc, #32]	; (800238c <HAL_UART_MspInit+0x138>)
 800236c:	f000 ffa4 	bl	80032b8 <HAL_GPIO_Init>
}
 8002370:	bf00      	nop
 8002372:	3730      	adds	r7, #48	; 0x30
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40004400 	.word	0x40004400
 800237c:	40023800 	.word	0x40023800
 8002380:	40020000 	.word	0x40020000
 8002384:	40004800 	.word	0x40004800
 8002388:	40020800 	.word	0x40020800
 800238c:	40020400 	.word	0x40020400

08002390 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002394:	e7fe      	b.n	8002394 <NMI_Handler+0x4>

08002396 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002396:	b480      	push	{r7}
 8002398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800239a:	e7fe      	b.n	800239a <HardFault_Handler+0x4>

0800239c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023a0:	e7fe      	b.n	80023a0 <MemManage_Handler+0x4>

080023a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023a2:	b480      	push	{r7}
 80023a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023a6:	e7fe      	b.n	80023a6 <BusFault_Handler+0x4>

080023a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023ac:	e7fe      	b.n	80023ac <UsageFault_Handler+0x4>

080023ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023ae:	b480      	push	{r7}
 80023b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023b2:	bf00      	nop
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023c0:	bf00      	nop
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023dc:	f000 f97e 	bl	80026dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023e0:	bf00      	nop
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80023e8:	4805      	ldr	r0, [pc, #20]	; (8002400 <ADC_IRQHandler+0x1c>)
 80023ea:	f000 fab9 	bl	8002960 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80023ee:	4805      	ldr	r0, [pc, #20]	; (8002404 <ADC_IRQHandler+0x20>)
 80023f0:	f000 fab6 	bl	8002960 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 80023f4:	4804      	ldr	r0, [pc, #16]	; (8002408 <ADC_IRQHandler+0x24>)
 80023f6:	f000 fab3 	bl	8002960 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20000390 	.word	0x20000390
 8002404:	200002a4 	.word	0x200002a4
 8002408:	200003d8 	.word	0x200003d8

0800240c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002410:	4802      	ldr	r0, [pc, #8]	; (800241c <TIM3_IRQHandler+0x10>)
 8002412:	f003 fc99 	bl	8005d48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	20000344 	.word	0x20000344

08002420 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002424:	4802      	ldr	r0, [pc, #8]	; (8002430 <TIM7_IRQHandler+0x10>)
 8002426:	f003 fc8f 	bl	8005d48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	200004c0 	.word	0x200004c0

08002434 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
	return 1;
 8002438:	2301      	movs	r3, #1
}
 800243a:	4618      	mov	r0, r3
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <_kill>:

int _kill(int pid, int sig)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800244e:	f004 fdeb 	bl	8007028 <__errno>
 8002452:	4603      	mov	r3, r0
 8002454:	2216      	movs	r2, #22
 8002456:	601a      	str	r2, [r3, #0]
	return -1;
 8002458:	f04f 33ff 	mov.w	r3, #4294967295
}
 800245c:	4618      	mov	r0, r3
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <_exit>:

void _exit (int status)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800246c:	f04f 31ff 	mov.w	r1, #4294967295
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f7ff ffe7 	bl	8002444 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002476:	e7fe      	b.n	8002476 <_exit+0x12>

08002478 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]
 8002488:	e00a      	b.n	80024a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800248a:	f3af 8000 	nop.w
 800248e:	4601      	mov	r1, r0
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	1c5a      	adds	r2, r3, #1
 8002494:	60ba      	str	r2, [r7, #8]
 8002496:	b2ca      	uxtb	r2, r1
 8002498:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	3301      	adds	r3, #1
 800249e:	617b      	str	r3, [r7, #20]
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	dbf0      	blt.n	800248a <_read+0x12>
	}

return len;
 80024a8:	687b      	ldr	r3, [r7, #4]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b086      	sub	sp, #24
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	60f8      	str	r0, [r7, #12]
 80024ba:	60b9      	str	r1, [r7, #8]
 80024bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]
 80024c2:	e009      	b.n	80024d8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	1c5a      	adds	r2, r3, #1
 80024c8:	60ba      	str	r2, [r7, #8]
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	3301      	adds	r3, #1
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	697a      	ldr	r2, [r7, #20]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	429a      	cmp	r2, r3
 80024de:	dbf1      	blt.n	80024c4 <_write+0x12>
	}
	return len;
 80024e0:	687b      	ldr	r3, [r7, #4]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3718      	adds	r7, #24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <_close>:

int _close(int file)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b083      	sub	sp, #12
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
	return -1;
 80024f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
 800250a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002512:	605a      	str	r2, [r3, #4]
	return 0;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <_isatty>:

int _isatty(int file)
{
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
	return 1;
 800252a:	2301      	movs	r3, #1
}
 800252c:	4618      	mov	r0, r3
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
	return 0;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
	...

08002554 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800255c:	4a14      	ldr	r2, [pc, #80]	; (80025b0 <_sbrk+0x5c>)
 800255e:	4b15      	ldr	r3, [pc, #84]	; (80025b4 <_sbrk+0x60>)
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002568:	4b13      	ldr	r3, [pc, #76]	; (80025b8 <_sbrk+0x64>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d102      	bne.n	8002576 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002570:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <_sbrk+0x64>)
 8002572:	4a12      	ldr	r2, [pc, #72]	; (80025bc <_sbrk+0x68>)
 8002574:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002576:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <_sbrk+0x64>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4413      	add	r3, r2
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	429a      	cmp	r2, r3
 8002582:	d207      	bcs.n	8002594 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002584:	f004 fd50 	bl	8007028 <__errno>
 8002588:	4603      	mov	r3, r0
 800258a:	220c      	movs	r2, #12
 800258c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800258e:	f04f 33ff 	mov.w	r3, #4294967295
 8002592:	e009      	b.n	80025a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002594:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <_sbrk+0x64>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800259a:	4b07      	ldr	r3, [pc, #28]	; (80025b8 <_sbrk+0x64>)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4413      	add	r3, r2
 80025a2:	4a05      	ldr	r2, [pc, #20]	; (80025b8 <_sbrk+0x64>)
 80025a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025a6:	68fb      	ldr	r3, [r7, #12]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	20020000 	.word	0x20020000
 80025b4:	00000400 	.word	0x00000400
 80025b8:	20000250 	.word	0x20000250
 80025bc:	20000520 	.word	0x20000520

080025c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025c4:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <SystemInit+0x20>)
 80025c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ca:	4a05      	ldr	r2, [pc, #20]	; (80025e0 <SystemInit+0x20>)
 80025cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025d4:	bf00      	nop
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	e000ed00 	.word	0xe000ed00

080025e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800261c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025e8:	480d      	ldr	r0, [pc, #52]	; (8002620 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025ea:	490e      	ldr	r1, [pc, #56]	; (8002624 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025ec:	4a0e      	ldr	r2, [pc, #56]	; (8002628 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025f0:	e002      	b.n	80025f8 <LoopCopyDataInit>

080025f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025f6:	3304      	adds	r3, #4

080025f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025fc:	d3f9      	bcc.n	80025f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025fe:	4a0b      	ldr	r2, [pc, #44]	; (800262c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002600:	4c0b      	ldr	r4, [pc, #44]	; (8002630 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002604:	e001      	b.n	800260a <LoopFillZerobss>

08002606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002608:	3204      	adds	r2, #4

0800260a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800260a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800260c:	d3fb      	bcc.n	8002606 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800260e:	f7ff ffd7 	bl	80025c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002612:	f004 fd0f 	bl	8007034 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002616:	f7fe fcb3 	bl	8000f80 <main>
  bx  lr    
 800261a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800261c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002624:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 8002628:	0800a21c 	.word	0x0800a21c
  ldr r2, =_sbss
 800262c:	2000022c 	.word	0x2000022c
  ldr r4, =_ebss
 8002630:	2000051c 	.word	0x2000051c

08002634 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002634:	e7fe      	b.n	8002634 <CAN1_RX0_IRQHandler>
	...

08002638 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800263c:	4b0e      	ldr	r3, [pc, #56]	; (8002678 <HAL_Init+0x40>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a0d      	ldr	r2, [pc, #52]	; (8002678 <HAL_Init+0x40>)
 8002642:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002646:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002648:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <HAL_Init+0x40>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a0a      	ldr	r2, [pc, #40]	; (8002678 <HAL_Init+0x40>)
 800264e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002652:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002654:	4b08      	ldr	r3, [pc, #32]	; (8002678 <HAL_Init+0x40>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a07      	ldr	r2, [pc, #28]	; (8002678 <HAL_Init+0x40>)
 800265a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800265e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002660:	2003      	movs	r0, #3
 8002662:	f000 fde7 	bl	8003234 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002666:	2000      	movs	r0, #0
 8002668:	f000 f808 	bl	800267c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800266c:	f7ff fc32 	bl	8001ed4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40023c00 	.word	0x40023c00

0800267c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002684:	4b12      	ldr	r3, [pc, #72]	; (80026d0 <HAL_InitTick+0x54>)
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	4b12      	ldr	r3, [pc, #72]	; (80026d4 <HAL_InitTick+0x58>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	4619      	mov	r1, r3
 800268e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002692:	fbb3 f3f1 	udiv	r3, r3, r1
 8002696:	fbb2 f3f3 	udiv	r3, r2, r3
 800269a:	4618      	mov	r0, r3
 800269c:	f000 fdff 	bl	800329e <HAL_SYSTICK_Config>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e00e      	b.n	80026c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b0f      	cmp	r3, #15
 80026ae:	d80a      	bhi.n	80026c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026b0:	2200      	movs	r2, #0
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	f04f 30ff 	mov.w	r0, #4294967295
 80026b8:	f000 fdc7 	bl	800324a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026bc:	4a06      	ldr	r2, [pc, #24]	; (80026d8 <HAL_InitTick+0x5c>)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
 80026c4:	e000      	b.n	80026c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	20000050 	.word	0x20000050
 80026d4:	20000058 	.word	0x20000058
 80026d8:	20000054 	.word	0x20000054

080026dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026e0:	4b06      	ldr	r3, [pc, #24]	; (80026fc <HAL_IncTick+0x20>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	461a      	mov	r2, r3
 80026e6:	4b06      	ldr	r3, [pc, #24]	; (8002700 <HAL_IncTick+0x24>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4413      	add	r3, r2
 80026ec:	4a04      	ldr	r2, [pc, #16]	; (8002700 <HAL_IncTick+0x24>)
 80026ee:	6013      	str	r3, [r2, #0]
}
 80026f0:	bf00      	nop
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	20000058 	.word	0x20000058
 8002700:	20000508 	.word	0x20000508

08002704 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  return uwTick;
 8002708:	4b03      	ldr	r3, [pc, #12]	; (8002718 <HAL_GetTick+0x14>)
 800270a:	681b      	ldr	r3, [r3, #0]
}
 800270c:	4618      	mov	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	20000508 	.word	0x20000508

0800271c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002724:	2300      	movs	r3, #0
 8002726:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e033      	b.n	800279a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	2b00      	cmp	r3, #0
 8002738:	d109      	bne.n	800274e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7ff fbf2 	bl	8001f24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	f003 0310 	and.w	r3, r3, #16
 8002756:	2b00      	cmp	r3, #0
 8002758:	d118      	bne.n	800278c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002762:	f023 0302 	bic.w	r3, r3, #2
 8002766:	f043 0202 	orr.w	r2, r3, #2
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 fb8a 	bl	8002e88 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f023 0303 	bic.w	r3, r3, #3
 8002782:	f043 0201 	orr.w	r2, r3, #1
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	641a      	str	r2, [r3, #64]	; 0x40
 800278a:	e001      	b.n	8002790 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002798:	7bfb      	ldrb	r3, [r7, #15]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
	...

080027a4 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d101      	bne.n	80027be <HAL_ADC_Start_IT+0x1a>
 80027ba:	2302      	movs	r3, #2
 80027bc:	e0bd      	b.n	800293a <HAL_ADC_Start_IT+0x196>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d018      	beq.n	8002806 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689a      	ldr	r2, [r3, #8]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0201 	orr.w	r2, r2, #1
 80027e2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027e4:	4b58      	ldr	r3, [pc, #352]	; (8002948 <HAL_ADC_Start_IT+0x1a4>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a58      	ldr	r2, [pc, #352]	; (800294c <HAL_ADC_Start_IT+0x1a8>)
 80027ea:	fba2 2303 	umull	r2, r3, r2, r3
 80027ee:	0c9a      	lsrs	r2, r3, #18
 80027f0:	4613      	mov	r3, r2
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	4413      	add	r3, r2
 80027f6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80027f8:	e002      	b.n	8002800 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	3b01      	subs	r3, #1
 80027fe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1f9      	bne.n	80027fa <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b01      	cmp	r3, #1
 8002812:	f040 8085 	bne.w	8002920 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800281e:	f023 0301 	bic.w	r3, r3, #1
 8002822:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002834:	2b00      	cmp	r3, #0
 8002836:	d007      	beq.n	8002848 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002840:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002854:	d106      	bne.n	8002864 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285a:	f023 0206 	bic.w	r2, r3, #6
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	645a      	str	r2, [r3, #68]	; 0x44
 8002862:	e002      	b.n	800286a <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002872:	4b37      	ldr	r3, [pc, #220]	; (8002950 <HAL_ADC_Start_IT+0x1ac>)
 8002874:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800287e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6812      	ldr	r2, [r2, #0]
 800288a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800288e:	f043 0320 	orr.w	r3, r3, #32
 8002892:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f003 031f 	and.w	r3, r3, #31
 800289c:	2b00      	cmp	r3, #0
 800289e:	d12a      	bne.n	80028f6 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a2b      	ldr	r2, [pc, #172]	; (8002954 <HAL_ADC_Start_IT+0x1b0>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d015      	beq.n	80028d6 <HAL_ADC_Start_IT+0x132>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a2a      	ldr	r2, [pc, #168]	; (8002958 <HAL_ADC_Start_IT+0x1b4>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d105      	bne.n	80028c0 <HAL_ADC_Start_IT+0x11c>
 80028b4:	4b26      	ldr	r3, [pc, #152]	; (8002950 <HAL_ADC_Start_IT+0x1ac>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 031f 	and.w	r3, r3, #31
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00a      	beq.n	80028d6 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a25      	ldr	r2, [pc, #148]	; (800295c <HAL_ADC_Start_IT+0x1b8>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d136      	bne.n	8002938 <HAL_ADC_Start_IT+0x194>
 80028ca:	4b21      	ldr	r3, [pc, #132]	; (8002950 <HAL_ADC_Start_IT+0x1ac>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f003 0310 	and.w	r3, r3, #16
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d130      	bne.n	8002938 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d129      	bne.n	8002938 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689a      	ldr	r2, [r3, #8]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028f2:	609a      	str	r2, [r3, #8]
 80028f4:	e020      	b.n	8002938 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a16      	ldr	r2, [pc, #88]	; (8002954 <HAL_ADC_Start_IT+0x1b0>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d11b      	bne.n	8002938 <HAL_ADC_Start_IT+0x194>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d114      	bne.n	8002938 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800291c:	609a      	str	r2, [r3, #8]
 800291e:	e00b      	b.n	8002938 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	f043 0210 	orr.w	r2, r3, #16
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002930:	f043 0201 	orr.w	r2, r3, #1
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	20000050 	.word	0x20000050
 800294c:	431bde83 	.word	0x431bde83
 8002950:	40012300 	.word	0x40012300
 8002954:	40012000 	.word	0x40012000
 8002958:	40012100 	.word	0x40012100
 800295c:	40012200 	.word	0x40012200

08002960 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002968:	2300      	movs	r3, #0
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	2300      	movs	r3, #0
 800296e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b02      	cmp	r3, #2
 800297c:	bf0c      	ite	eq
 800297e:	2301      	moveq	r3, #1
 8002980:	2300      	movne	r3, #0
 8002982:	b2db      	uxtb	r3, r3
 8002984:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 0320 	and.w	r3, r3, #32
 8002990:	2b20      	cmp	r3, #32
 8002992:	bf0c      	ite	eq
 8002994:	2301      	moveq	r3, #1
 8002996:	2300      	movne	r3, #0
 8002998:	b2db      	uxtb	r3, r3
 800299a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d049      	beq.n	8002a36 <HAL_ADC_IRQHandler+0xd6>
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d046      	beq.n	8002a36 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	f003 0310 	and.w	r3, r3, #16
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d105      	bne.n	80029c0 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d12b      	bne.n	8002a26 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d127      	bne.n	8002a26 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029dc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d006      	beq.n	80029f2 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d119      	bne.n	8002a26 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0220 	bic.w	r2, r2, #32
 8002a00:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d105      	bne.n	8002a26 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	f043 0201 	orr.w	r2, r3, #1
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7ff f8c0 	bl	8001bac <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f06f 0212 	mvn.w	r2, #18
 8002a34:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b04      	cmp	r3, #4
 8002a42:	bf0c      	ite	eq
 8002a44:	2301      	moveq	r3, #1
 8002a46:	2300      	movne	r3, #0
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a56:	2b80      	cmp	r3, #128	; 0x80
 8002a58:	bf0c      	ite	eq
 8002a5a:	2301      	moveq	r3, #1
 8002a5c:	2300      	movne	r3, #0
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d057      	beq.n	8002b18 <HAL_ADC_IRQHandler+0x1b8>
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d054      	beq.n	8002b18 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	f003 0310 	and.w	r3, r3, #16
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d105      	bne.n	8002a86 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d139      	bne.n	8002b08 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d006      	beq.n	8002ab0 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d12b      	bne.n	8002b08 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d124      	bne.n	8002b08 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d11d      	bne.n	8002b08 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d119      	bne.n	8002b08 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ae2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d105      	bne.n	8002b08 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b00:	f043 0201 	orr.w	r2, r3, #1
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 fab9 	bl	8003080 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f06f 020c 	mvn.w	r2, #12
 8002b16:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	bf0c      	ite	eq
 8002b26:	2301      	moveq	r3, #1
 8002b28:	2300      	movne	r3, #0
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b38:	2b40      	cmp	r3, #64	; 0x40
 8002b3a:	bf0c      	ite	eq
 8002b3c:	2301      	moveq	r3, #1
 8002b3e:	2300      	movne	r3, #0
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d017      	beq.n	8002b7a <HAL_ADC_IRQHandler+0x21a>
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d014      	beq.n	8002b7a <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d10d      	bne.n	8002b7a <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f846 	bl	8002bfc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f06f 0201 	mvn.w	r2, #1
 8002b78:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0320 	and.w	r3, r3, #32
 8002b84:	2b20      	cmp	r3, #32
 8002b86:	bf0c      	ite	eq
 8002b88:	2301      	moveq	r3, #1
 8002b8a:	2300      	movne	r3, #0
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b9e:	bf0c      	ite	eq
 8002ba0:	2301      	moveq	r3, #1
 8002ba2:	2300      	movne	r3, #0
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d015      	beq.n	8002bda <HAL_ADC_IRQHandler+0x27a>
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d012      	beq.n	8002bda <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb8:	f043 0202 	orr.w	r2, r3, #2
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f06f 0220 	mvn.w	r2, #32
 8002bc8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 f820 	bl	8002c10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f06f 0220 	mvn.w	r2, #32
 8002bd8:	601a      	str	r2, [r3, #0]
  }
}
 8002bda:	bf00      	nop
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d101      	bne.n	8002c40 <HAL_ADC_ConfigChannel+0x1c>
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	e113      	b.n	8002e68 <HAL_ADC_ConfigChannel+0x244>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2b09      	cmp	r3, #9
 8002c4e:	d925      	bls.n	8002c9c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68d9      	ldr	r1, [r3, #12]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	4613      	mov	r3, r2
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	4413      	add	r3, r2
 8002c64:	3b1e      	subs	r3, #30
 8002c66:	2207      	movs	r2, #7
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	43da      	mvns	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	400a      	ands	r2, r1
 8002c74:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68d9      	ldr	r1, [r3, #12]
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	4618      	mov	r0, r3
 8002c88:	4603      	mov	r3, r0
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	4403      	add	r3, r0
 8002c8e:	3b1e      	subs	r3, #30
 8002c90:	409a      	lsls	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	60da      	str	r2, [r3, #12]
 8002c9a:	e022      	b.n	8002ce2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6919      	ldr	r1, [r3, #16]
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	461a      	mov	r2, r3
 8002caa:	4613      	mov	r3, r2
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	4413      	add	r3, r2
 8002cb0:	2207      	movs	r2, #7
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	43da      	mvns	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	400a      	ands	r2, r1
 8002cbe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6919      	ldr	r1, [r3, #16]
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	689a      	ldr	r2, [r3, #8]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	4403      	add	r3, r0
 8002cd8:	409a      	lsls	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b06      	cmp	r3, #6
 8002ce8:	d824      	bhi.n	8002d34 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4413      	add	r3, r2
 8002cfa:	3b05      	subs	r3, #5
 8002cfc:	221f      	movs	r2, #31
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	43da      	mvns	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	400a      	ands	r2, r1
 8002d0a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	4618      	mov	r0, r3
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	3b05      	subs	r3, #5
 8002d26:	fa00 f203 	lsl.w	r2, r0, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	635a      	str	r2, [r3, #52]	; 0x34
 8002d32:	e04c      	b.n	8002dce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	2b0c      	cmp	r3, #12
 8002d3a:	d824      	bhi.n	8002d86 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	4613      	mov	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3b23      	subs	r3, #35	; 0x23
 8002d4e:	221f      	movs	r2, #31
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	43da      	mvns	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	400a      	ands	r2, r1
 8002d5c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	4613      	mov	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	3b23      	subs	r3, #35	; 0x23
 8002d78:	fa00 f203 	lsl.w	r2, r0, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	430a      	orrs	r2, r1
 8002d82:	631a      	str	r2, [r3, #48]	; 0x30
 8002d84:	e023      	b.n	8002dce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	3b41      	subs	r3, #65	; 0x41
 8002d98:	221f      	movs	r2, #31
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43da      	mvns	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	400a      	ands	r2, r1
 8002da6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	4618      	mov	r0, r3
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3b41      	subs	r3, #65	; 0x41
 8002dc2:	fa00 f203 	lsl.w	r2, r0, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002dce:	4b29      	ldr	r3, [pc, #164]	; (8002e74 <HAL_ADC_ConfigChannel+0x250>)
 8002dd0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a28      	ldr	r2, [pc, #160]	; (8002e78 <HAL_ADC_ConfigChannel+0x254>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d10f      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x1d8>
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b12      	cmp	r3, #18
 8002de2:	d10b      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a1d      	ldr	r2, [pc, #116]	; (8002e78 <HAL_ADC_ConfigChannel+0x254>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d12b      	bne.n	8002e5e <HAL_ADC_ConfigChannel+0x23a>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a1c      	ldr	r2, [pc, #112]	; (8002e7c <HAL_ADC_ConfigChannel+0x258>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d003      	beq.n	8002e18 <HAL_ADC_ConfigChannel+0x1f4>
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2b11      	cmp	r3, #17
 8002e16:	d122      	bne.n	8002e5e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a11      	ldr	r2, [pc, #68]	; (8002e7c <HAL_ADC_ConfigChannel+0x258>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d111      	bne.n	8002e5e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e3a:	4b11      	ldr	r3, [pc, #68]	; (8002e80 <HAL_ADC_ConfigChannel+0x25c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a11      	ldr	r2, [pc, #68]	; (8002e84 <HAL_ADC_ConfigChannel+0x260>)
 8002e40:	fba2 2303 	umull	r2, r3, r2, r3
 8002e44:	0c9a      	lsrs	r2, r3, #18
 8002e46:	4613      	mov	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002e50:	e002      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	3b01      	subs	r3, #1
 8002e56:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f9      	bne.n	8002e52 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	40012300 	.word	0x40012300
 8002e78:	40012000 	.word	0x40012000
 8002e7c:	10000012 	.word	0x10000012
 8002e80:	20000050 	.word	0x20000050
 8002e84:	431bde83 	.word	0x431bde83

08002e88 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e90:	4b79      	ldr	r3, [pc, #484]	; (8003078 <ADC_Init+0x1f0>)
 8002e92:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	431a      	orrs	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ebc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6859      	ldr	r1, [r3, #4]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	021a      	lsls	r2, r3, #8
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002ee0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6859      	ldr	r1, [r3, #4]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689a      	ldr	r2, [r3, #8]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6899      	ldr	r1, [r3, #8]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68da      	ldr	r2, [r3, #12]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1a:	4a58      	ldr	r2, [pc, #352]	; (800307c <ADC_Init+0x1f4>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d022      	beq.n	8002f66 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f2e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6899      	ldr	r1, [r3, #8]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6899      	ldr	r1, [r3, #8]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	430a      	orrs	r2, r1
 8002f62:	609a      	str	r2, [r3, #8]
 8002f64:	e00f      	b.n	8002f86 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f84:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 0202 	bic.w	r2, r2, #2
 8002f94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6899      	ldr	r1, [r3, #8]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	7e1b      	ldrb	r3, [r3, #24]
 8002fa0:	005a      	lsls	r2, r3, #1
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d01b      	beq.n	8002fec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fc2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	685a      	ldr	r2, [r3, #4]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002fd2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6859      	ldr	r1, [r3, #4]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	035a      	lsls	r2, r3, #13
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	605a      	str	r2, [r3, #4]
 8002fea:	e007      	b.n	8002ffc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ffa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800300a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	3b01      	subs	r3, #1
 8003018:	051a      	lsls	r2, r3, #20
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003030:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6899      	ldr	r1, [r3, #8]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800303e:	025a      	lsls	r2, r3, #9
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	430a      	orrs	r2, r1
 8003046:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689a      	ldr	r2, [r3, #8]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003056:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6899      	ldr	r1, [r3, #8]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	029a      	lsls	r2, r3, #10
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	609a      	str	r2, [r3, #8]
}
 800306c:	bf00      	nop
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	40012300 	.word	0x40012300
 800307c:	0f000001 	.word	0x0f000001

08003080 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030a4:	4b0c      	ldr	r3, [pc, #48]	; (80030d8 <__NVIC_SetPriorityGrouping+0x44>)
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030b0:	4013      	ands	r3, r2
 80030b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030c6:	4a04      	ldr	r2, [pc, #16]	; (80030d8 <__NVIC_SetPriorityGrouping+0x44>)
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	60d3      	str	r3, [r2, #12]
}
 80030cc:	bf00      	nop
 80030ce:	3714      	adds	r7, #20
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr
 80030d8:	e000ed00 	.word	0xe000ed00

080030dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030e0:	4b04      	ldr	r3, [pc, #16]	; (80030f4 <__NVIC_GetPriorityGrouping+0x18>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	0a1b      	lsrs	r3, r3, #8
 80030e6:	f003 0307 	and.w	r3, r3, #7
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	e000ed00 	.word	0xe000ed00

080030f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	4603      	mov	r3, r0
 8003100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003106:	2b00      	cmp	r3, #0
 8003108:	db0b      	blt.n	8003122 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800310a:	79fb      	ldrb	r3, [r7, #7]
 800310c:	f003 021f 	and.w	r2, r3, #31
 8003110:	4907      	ldr	r1, [pc, #28]	; (8003130 <__NVIC_EnableIRQ+0x38>)
 8003112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003116:	095b      	lsrs	r3, r3, #5
 8003118:	2001      	movs	r0, #1
 800311a:	fa00 f202 	lsl.w	r2, r0, r2
 800311e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	e000e100 	.word	0xe000e100

08003134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	4603      	mov	r3, r0
 800313c:	6039      	str	r1, [r7, #0]
 800313e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003144:	2b00      	cmp	r3, #0
 8003146:	db0a      	blt.n	800315e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	b2da      	uxtb	r2, r3
 800314c:	490c      	ldr	r1, [pc, #48]	; (8003180 <__NVIC_SetPriority+0x4c>)
 800314e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003152:	0112      	lsls	r2, r2, #4
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	440b      	add	r3, r1
 8003158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800315c:	e00a      	b.n	8003174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	b2da      	uxtb	r2, r3
 8003162:	4908      	ldr	r1, [pc, #32]	; (8003184 <__NVIC_SetPriority+0x50>)
 8003164:	79fb      	ldrb	r3, [r7, #7]
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	3b04      	subs	r3, #4
 800316c:	0112      	lsls	r2, r2, #4
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	440b      	add	r3, r1
 8003172:	761a      	strb	r2, [r3, #24]
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	e000e100 	.word	0xe000e100
 8003184:	e000ed00 	.word	0xe000ed00

08003188 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003188:	b480      	push	{r7}
 800318a:	b089      	sub	sp, #36	; 0x24
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	f1c3 0307 	rsb	r3, r3, #7
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	bf28      	it	cs
 80031a6:	2304      	movcs	r3, #4
 80031a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	3304      	adds	r3, #4
 80031ae:	2b06      	cmp	r3, #6
 80031b0:	d902      	bls.n	80031b8 <NVIC_EncodePriority+0x30>
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	3b03      	subs	r3, #3
 80031b6:	e000      	b.n	80031ba <NVIC_EncodePriority+0x32>
 80031b8:	2300      	movs	r3, #0
 80031ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031bc:	f04f 32ff 	mov.w	r2, #4294967295
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	fa02 f303 	lsl.w	r3, r2, r3
 80031c6:	43da      	mvns	r2, r3
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	401a      	ands	r2, r3
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031d0:	f04f 31ff 	mov.w	r1, #4294967295
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	fa01 f303 	lsl.w	r3, r1, r3
 80031da:	43d9      	mvns	r1, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031e0:	4313      	orrs	r3, r2
         );
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3724      	adds	r7, #36	; 0x24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
	...

080031f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3b01      	subs	r3, #1
 80031fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003200:	d301      	bcc.n	8003206 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003202:	2301      	movs	r3, #1
 8003204:	e00f      	b.n	8003226 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003206:	4a0a      	ldr	r2, [pc, #40]	; (8003230 <SysTick_Config+0x40>)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3b01      	subs	r3, #1
 800320c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800320e:	210f      	movs	r1, #15
 8003210:	f04f 30ff 	mov.w	r0, #4294967295
 8003214:	f7ff ff8e 	bl	8003134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003218:	4b05      	ldr	r3, [pc, #20]	; (8003230 <SysTick_Config+0x40>)
 800321a:	2200      	movs	r2, #0
 800321c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800321e:	4b04      	ldr	r3, [pc, #16]	; (8003230 <SysTick_Config+0x40>)
 8003220:	2207      	movs	r2, #7
 8003222:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	e000e010 	.word	0xe000e010

08003234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f7ff ff29 	bl	8003094 <__NVIC_SetPriorityGrouping>
}
 8003242:	bf00      	nop
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800324a:	b580      	push	{r7, lr}
 800324c:	b086      	sub	sp, #24
 800324e:	af00      	add	r7, sp, #0
 8003250:	4603      	mov	r3, r0
 8003252:	60b9      	str	r1, [r7, #8]
 8003254:	607a      	str	r2, [r7, #4]
 8003256:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003258:	2300      	movs	r3, #0
 800325a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800325c:	f7ff ff3e 	bl	80030dc <__NVIC_GetPriorityGrouping>
 8003260:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	68b9      	ldr	r1, [r7, #8]
 8003266:	6978      	ldr	r0, [r7, #20]
 8003268:	f7ff ff8e 	bl	8003188 <NVIC_EncodePriority>
 800326c:	4602      	mov	r2, r0
 800326e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003272:	4611      	mov	r1, r2
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff ff5d 	bl	8003134 <__NVIC_SetPriority>
}
 800327a:	bf00      	nop
 800327c:	3718      	adds	r7, #24
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b082      	sub	sp, #8
 8003286:	af00      	add	r7, sp, #0
 8003288:	4603      	mov	r3, r0
 800328a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800328c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff ff31 	bl	80030f8 <__NVIC_EnableIRQ>
}
 8003296:	bf00      	nop
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b082      	sub	sp, #8
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7ff ffa2 	bl	80031f0 <SysTick_Config>
 80032ac:	4603      	mov	r3, r0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
	...

080032b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b089      	sub	sp, #36	; 0x24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032c2:	2300      	movs	r3, #0
 80032c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032c6:	2300      	movs	r3, #0
 80032c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ce:	2300      	movs	r3, #0
 80032d0:	61fb      	str	r3, [r7, #28]
 80032d2:	e165      	b.n	80035a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032d4:	2201      	movs	r2, #1
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	4013      	ands	r3, r2
 80032e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	f040 8154 	bne.w	800359a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d005      	beq.n	800330a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003306:	2b02      	cmp	r3, #2
 8003308:	d130      	bne.n	800336c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	2203      	movs	r2, #3
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	43db      	mvns	r3, r3
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	4013      	ands	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	68da      	ldr	r2, [r3, #12]
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	4313      	orrs	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003340:	2201      	movs	r2, #1
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	43db      	mvns	r3, r3
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	4013      	ands	r3, r2
 800334e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	091b      	lsrs	r3, r3, #4
 8003356:	f003 0201 	and.w	r2, r3, #1
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	4313      	orrs	r3, r2
 8003364:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f003 0303 	and.w	r3, r3, #3
 8003374:	2b03      	cmp	r3, #3
 8003376:	d017      	beq.n	80033a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	2203      	movs	r2, #3
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	43db      	mvns	r3, r3
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	4013      	ands	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	4313      	orrs	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f003 0303 	and.w	r3, r3, #3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d123      	bne.n	80033fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	08da      	lsrs	r2, r3, #3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3208      	adds	r2, #8
 80033bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	220f      	movs	r2, #15
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	43db      	mvns	r3, r3
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	4013      	ands	r3, r2
 80033d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	691a      	ldr	r2, [r3, #16]
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	f003 0307 	and.w	r3, r3, #7
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	08da      	lsrs	r2, r3, #3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	3208      	adds	r2, #8
 80033f6:	69b9      	ldr	r1, [r7, #24]
 80033f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	2203      	movs	r2, #3
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	43db      	mvns	r3, r3
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	4013      	ands	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f003 0203 	and.w	r2, r3, #3
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	4313      	orrs	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 80ae 	beq.w	800359a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800343e:	2300      	movs	r3, #0
 8003440:	60fb      	str	r3, [r7, #12]
 8003442:	4b5d      	ldr	r3, [pc, #372]	; (80035b8 <HAL_GPIO_Init+0x300>)
 8003444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003446:	4a5c      	ldr	r2, [pc, #368]	; (80035b8 <HAL_GPIO_Init+0x300>)
 8003448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800344c:	6453      	str	r3, [r2, #68]	; 0x44
 800344e:	4b5a      	ldr	r3, [pc, #360]	; (80035b8 <HAL_GPIO_Init+0x300>)
 8003450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800345a:	4a58      	ldr	r2, [pc, #352]	; (80035bc <HAL_GPIO_Init+0x304>)
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	089b      	lsrs	r3, r3, #2
 8003460:	3302      	adds	r3, #2
 8003462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003466:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	f003 0303 	and.w	r3, r3, #3
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	220f      	movs	r2, #15
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	43db      	mvns	r3, r3
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	4013      	ands	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a4f      	ldr	r2, [pc, #316]	; (80035c0 <HAL_GPIO_Init+0x308>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d025      	beq.n	80034d2 <HAL_GPIO_Init+0x21a>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a4e      	ldr	r2, [pc, #312]	; (80035c4 <HAL_GPIO_Init+0x30c>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d01f      	beq.n	80034ce <HAL_GPIO_Init+0x216>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a4d      	ldr	r2, [pc, #308]	; (80035c8 <HAL_GPIO_Init+0x310>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d019      	beq.n	80034ca <HAL_GPIO_Init+0x212>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a4c      	ldr	r2, [pc, #304]	; (80035cc <HAL_GPIO_Init+0x314>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d013      	beq.n	80034c6 <HAL_GPIO_Init+0x20e>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a4b      	ldr	r2, [pc, #300]	; (80035d0 <HAL_GPIO_Init+0x318>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d00d      	beq.n	80034c2 <HAL_GPIO_Init+0x20a>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a4a      	ldr	r2, [pc, #296]	; (80035d4 <HAL_GPIO_Init+0x31c>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d007      	beq.n	80034be <HAL_GPIO_Init+0x206>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a49      	ldr	r2, [pc, #292]	; (80035d8 <HAL_GPIO_Init+0x320>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d101      	bne.n	80034ba <HAL_GPIO_Init+0x202>
 80034b6:	2306      	movs	r3, #6
 80034b8:	e00c      	b.n	80034d4 <HAL_GPIO_Init+0x21c>
 80034ba:	2307      	movs	r3, #7
 80034bc:	e00a      	b.n	80034d4 <HAL_GPIO_Init+0x21c>
 80034be:	2305      	movs	r3, #5
 80034c0:	e008      	b.n	80034d4 <HAL_GPIO_Init+0x21c>
 80034c2:	2304      	movs	r3, #4
 80034c4:	e006      	b.n	80034d4 <HAL_GPIO_Init+0x21c>
 80034c6:	2303      	movs	r3, #3
 80034c8:	e004      	b.n	80034d4 <HAL_GPIO_Init+0x21c>
 80034ca:	2302      	movs	r3, #2
 80034cc:	e002      	b.n	80034d4 <HAL_GPIO_Init+0x21c>
 80034ce:	2301      	movs	r3, #1
 80034d0:	e000      	b.n	80034d4 <HAL_GPIO_Init+0x21c>
 80034d2:	2300      	movs	r3, #0
 80034d4:	69fa      	ldr	r2, [r7, #28]
 80034d6:	f002 0203 	and.w	r2, r2, #3
 80034da:	0092      	lsls	r2, r2, #2
 80034dc:	4093      	lsls	r3, r2
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034e4:	4935      	ldr	r1, [pc, #212]	; (80035bc <HAL_GPIO_Init+0x304>)
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	089b      	lsrs	r3, r3, #2
 80034ea:	3302      	adds	r3, #2
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034f2:	4b3a      	ldr	r3, [pc, #232]	; (80035dc <HAL_GPIO_Init+0x324>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	43db      	mvns	r3, r3
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	4013      	ands	r3, r2
 8003500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	4313      	orrs	r3, r2
 8003514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003516:	4a31      	ldr	r2, [pc, #196]	; (80035dc <HAL_GPIO_Init+0x324>)
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800351c:	4b2f      	ldr	r3, [pc, #188]	; (80035dc <HAL_GPIO_Init+0x324>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	43db      	mvns	r3, r3
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	4013      	ands	r3, r2
 800352a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d003      	beq.n	8003540 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	4313      	orrs	r3, r2
 800353e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003540:	4a26      	ldr	r2, [pc, #152]	; (80035dc <HAL_GPIO_Init+0x324>)
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003546:	4b25      	ldr	r3, [pc, #148]	; (80035dc <HAL_GPIO_Init+0x324>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	43db      	mvns	r3, r3
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	4013      	ands	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	4313      	orrs	r3, r2
 8003568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800356a:	4a1c      	ldr	r2, [pc, #112]	; (80035dc <HAL_GPIO_Init+0x324>)
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003570:	4b1a      	ldr	r3, [pc, #104]	; (80035dc <HAL_GPIO_Init+0x324>)
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	43db      	mvns	r3, r3
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	4013      	ands	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d003      	beq.n	8003594 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	4313      	orrs	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003594:	4a11      	ldr	r2, [pc, #68]	; (80035dc <HAL_GPIO_Init+0x324>)
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	3301      	adds	r3, #1
 800359e:	61fb      	str	r3, [r7, #28]
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	2b0f      	cmp	r3, #15
 80035a4:	f67f ae96 	bls.w	80032d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035a8:	bf00      	nop
 80035aa:	bf00      	nop
 80035ac:	3724      	adds	r7, #36	; 0x24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	40023800 	.word	0x40023800
 80035bc:	40013800 	.word	0x40013800
 80035c0:	40020000 	.word	0x40020000
 80035c4:	40020400 	.word	0x40020400
 80035c8:	40020800 	.word	0x40020800
 80035cc:	40020c00 	.word	0x40020c00
 80035d0:	40021000 	.word	0x40021000
 80035d4:	40021400 	.word	0x40021400
 80035d8:	40021800 	.word	0x40021800
 80035dc:	40013c00 	.word	0x40013c00

080035e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	460b      	mov	r3, r1
 80035ea:	807b      	strh	r3, [r7, #2]
 80035ec:	4613      	mov	r3, r2
 80035ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035f0:	787b      	ldrb	r3, [r7, #1]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035f6:	887a      	ldrh	r2, [r7, #2]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035fc:	e003      	b.n	8003606 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035fe:	887b      	ldrh	r3, [r7, #2]
 8003600:	041a      	lsls	r2, r3, #16
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	619a      	str	r2, [r3, #24]
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003612:	b480      	push	{r7}
 8003614:	b085      	sub	sp, #20
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
 800361a:	460b      	mov	r3, r1
 800361c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003624:	887a      	ldrh	r2, [r7, #2]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	4013      	ands	r3, r2
 800362a:	041a      	lsls	r2, r3, #16
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	43d9      	mvns	r1, r3
 8003630:	887b      	ldrh	r3, [r7, #2]
 8003632:	400b      	ands	r3, r1
 8003634:	431a      	orrs	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	619a      	str	r2, [r3, #24]
}
 800363a:	bf00      	nop
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
	...

08003648 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e12b      	b.n	80038b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d106      	bne.n	8003674 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7fe fd16 	bl	80020a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2224      	movs	r2, #36	; 0x24
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 0201 	bic.w	r2, r2, #1
 800368a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800369a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036ac:	f001 fcf2 	bl	8005094 <HAL_RCC_GetPCLK1Freq>
 80036b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	4a81      	ldr	r2, [pc, #516]	; (80038bc <HAL_I2C_Init+0x274>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d807      	bhi.n	80036cc <HAL_I2C_Init+0x84>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4a80      	ldr	r2, [pc, #512]	; (80038c0 <HAL_I2C_Init+0x278>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	bf94      	ite	ls
 80036c4:	2301      	movls	r3, #1
 80036c6:	2300      	movhi	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	e006      	b.n	80036da <HAL_I2C_Init+0x92>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	4a7d      	ldr	r2, [pc, #500]	; (80038c4 <HAL_I2C_Init+0x27c>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	bf94      	ite	ls
 80036d4:	2301      	movls	r3, #1
 80036d6:	2300      	movhi	r3, #0
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e0e7      	b.n	80038b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	4a78      	ldr	r2, [pc, #480]	; (80038c8 <HAL_I2C_Init+0x280>)
 80036e6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ea:	0c9b      	lsrs	r3, r3, #18
 80036ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	430a      	orrs	r2, r1
 8003700:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	4a6a      	ldr	r2, [pc, #424]	; (80038bc <HAL_I2C_Init+0x274>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d802      	bhi.n	800371c <HAL_I2C_Init+0xd4>
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	3301      	adds	r3, #1
 800371a:	e009      	b.n	8003730 <HAL_I2C_Init+0xe8>
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003722:	fb02 f303 	mul.w	r3, r2, r3
 8003726:	4a69      	ldr	r2, [pc, #420]	; (80038cc <HAL_I2C_Init+0x284>)
 8003728:	fba2 2303 	umull	r2, r3, r2, r3
 800372c:	099b      	lsrs	r3, r3, #6
 800372e:	3301      	adds	r3, #1
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6812      	ldr	r2, [r2, #0]
 8003734:	430b      	orrs	r3, r1
 8003736:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003742:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	495c      	ldr	r1, [pc, #368]	; (80038bc <HAL_I2C_Init+0x274>)
 800374c:	428b      	cmp	r3, r1
 800374e:	d819      	bhi.n	8003784 <HAL_I2C_Init+0x13c>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	1e59      	subs	r1, r3, #1
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	fbb1 f3f3 	udiv	r3, r1, r3
 800375e:	1c59      	adds	r1, r3, #1
 8003760:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003764:	400b      	ands	r3, r1
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00a      	beq.n	8003780 <HAL_I2C_Init+0x138>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	1e59      	subs	r1, r3, #1
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	fbb1 f3f3 	udiv	r3, r1, r3
 8003778:	3301      	adds	r3, #1
 800377a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800377e:	e051      	b.n	8003824 <HAL_I2C_Init+0x1dc>
 8003780:	2304      	movs	r3, #4
 8003782:	e04f      	b.n	8003824 <HAL_I2C_Init+0x1dc>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d111      	bne.n	80037b0 <HAL_I2C_Init+0x168>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	1e58      	subs	r0, r3, #1
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6859      	ldr	r1, [r3, #4]
 8003794:	460b      	mov	r3, r1
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	440b      	add	r3, r1
 800379a:	fbb0 f3f3 	udiv	r3, r0, r3
 800379e:	3301      	adds	r3, #1
 80037a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	bf0c      	ite	eq
 80037a8:	2301      	moveq	r3, #1
 80037aa:	2300      	movne	r3, #0
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	e012      	b.n	80037d6 <HAL_I2C_Init+0x18e>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	1e58      	subs	r0, r3, #1
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6859      	ldr	r1, [r3, #4]
 80037b8:	460b      	mov	r3, r1
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	0099      	lsls	r1, r3, #2
 80037c0:	440b      	add	r3, r1
 80037c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80037c6:	3301      	adds	r3, #1
 80037c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	bf0c      	ite	eq
 80037d0:	2301      	moveq	r3, #1
 80037d2:	2300      	movne	r3, #0
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <HAL_I2C_Init+0x196>
 80037da:	2301      	movs	r3, #1
 80037dc:	e022      	b.n	8003824 <HAL_I2C_Init+0x1dc>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10e      	bne.n	8003804 <HAL_I2C_Init+0x1bc>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	1e58      	subs	r0, r3, #1
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6859      	ldr	r1, [r3, #4]
 80037ee:	460b      	mov	r3, r1
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	440b      	add	r3, r1
 80037f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80037f8:	3301      	adds	r3, #1
 80037fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003802:	e00f      	b.n	8003824 <HAL_I2C_Init+0x1dc>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	1e58      	subs	r0, r3, #1
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6859      	ldr	r1, [r3, #4]
 800380c:	460b      	mov	r3, r1
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	440b      	add	r3, r1
 8003812:	0099      	lsls	r1, r3, #2
 8003814:	440b      	add	r3, r1
 8003816:	fbb0 f3f3 	udiv	r3, r0, r3
 800381a:	3301      	adds	r3, #1
 800381c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003820:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003824:	6879      	ldr	r1, [r7, #4]
 8003826:	6809      	ldr	r1, [r1, #0]
 8003828:	4313      	orrs	r3, r2
 800382a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	69da      	ldr	r2, [r3, #28]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	431a      	orrs	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003852:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6911      	ldr	r1, [r2, #16]
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	68d2      	ldr	r2, [r2, #12]
 800385e:	4311      	orrs	r1, r2
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6812      	ldr	r2, [r2, #0]
 8003864:	430b      	orrs	r3, r1
 8003866:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	695a      	ldr	r2, [r3, #20]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0201 	orr.w	r2, r2, #1
 8003892:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2220      	movs	r2, #32
 800389e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	000186a0 	.word	0x000186a0
 80038c0:	001e847f 	.word	0x001e847f
 80038c4:	003d08ff 	.word	0x003d08ff
 80038c8:	431bde83 	.word	0x431bde83
 80038cc:	10624dd3 	.word	0x10624dd3

080038d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b088      	sub	sp, #32
 80038d4:	af02      	add	r7, sp, #8
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	607a      	str	r2, [r7, #4]
 80038da:	461a      	mov	r2, r3
 80038dc:	460b      	mov	r3, r1
 80038de:	817b      	strh	r3, [r7, #10]
 80038e0:	4613      	mov	r3, r2
 80038e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038e4:	f7fe ff0e 	bl	8002704 <HAL_GetTick>
 80038e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b20      	cmp	r3, #32
 80038f4:	f040 80e0 	bne.w	8003ab8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	2319      	movs	r3, #25
 80038fe:	2201      	movs	r2, #1
 8003900:	4970      	ldr	r1, [pc, #448]	; (8003ac4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f001 f8f6 	bl	8004af4 <I2C_WaitOnFlagUntilTimeout>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800390e:	2302      	movs	r3, #2
 8003910:	e0d3      	b.n	8003aba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003918:	2b01      	cmp	r3, #1
 800391a:	d101      	bne.n	8003920 <HAL_I2C_Master_Transmit+0x50>
 800391c:	2302      	movs	r3, #2
 800391e:	e0cc      	b.n	8003aba <HAL_I2C_Master_Transmit+0x1ea>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b01      	cmp	r3, #1
 8003934:	d007      	beq.n	8003946 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f042 0201 	orr.w	r2, r2, #1
 8003944:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003954:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2221      	movs	r2, #33	; 0x21
 800395a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2210      	movs	r2, #16
 8003962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	893a      	ldrh	r2, [r7, #8]
 8003976:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397c:	b29a      	uxth	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	4a50      	ldr	r2, [pc, #320]	; (8003ac8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003986:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003988:	8979      	ldrh	r1, [r7, #10]
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	6a3a      	ldr	r2, [r7, #32]
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f000 fde2 	bl	8004558 <I2C_MasterRequestWrite>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e08d      	b.n	8003aba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800399e:	2300      	movs	r3, #0
 80039a0:	613b      	str	r3, [r7, #16]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	613b      	str	r3, [r7, #16]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	613b      	str	r3, [r7, #16]
 80039b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80039b4:	e066      	b.n	8003a84 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	6a39      	ldr	r1, [r7, #32]
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f001 f970 	bl	8004ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00d      	beq.n	80039e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	2b04      	cmp	r3, #4
 80039cc:	d107      	bne.n	80039de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e06b      	b.n	8003aba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e6:	781a      	ldrb	r2, [r3, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	1c5a      	adds	r2, r3, #1
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	3b01      	subs	r3, #1
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	2b04      	cmp	r3, #4
 8003a1e:	d11b      	bne.n	8003a58 <HAL_I2C_Master_Transmit+0x188>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d017      	beq.n	8003a58 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	781a      	ldrb	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	1c5a      	adds	r2, r3, #1
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	3b01      	subs	r3, #1
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a50:	3b01      	subs	r3, #1
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	6a39      	ldr	r1, [r7, #32]
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f001 f960 	bl	8004d22 <I2C_WaitOnBTFFlagUntilTimeout>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00d      	beq.n	8003a84 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6c:	2b04      	cmp	r3, #4
 8003a6e:	d107      	bne.n	8003a80 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a7e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e01a      	b.n	8003aba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d194      	bne.n	80039b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	e000      	b.n	8003aba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003ab8:	2302      	movs	r3, #2
  }
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3718      	adds	r7, #24
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	00100002 	.word	0x00100002
 8003ac8:	ffff0000 	.word	0xffff0000

08003acc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b08c      	sub	sp, #48	; 0x30
 8003ad0:	af02      	add	r7, sp, #8
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	607a      	str	r2, [r7, #4]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	460b      	mov	r3, r1
 8003ada:	817b      	strh	r3, [r7, #10]
 8003adc:	4613      	mov	r3, r2
 8003ade:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ae0:	f7fe fe10 	bl	8002704 <HAL_GetTick>
 8003ae4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b20      	cmp	r3, #32
 8003af0:	f040 820b 	bne.w	8003f0a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	2319      	movs	r3, #25
 8003afa:	2201      	movs	r2, #1
 8003afc:	497c      	ldr	r1, [pc, #496]	; (8003cf0 <HAL_I2C_Master_Receive+0x224>)
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f000 fff8 	bl	8004af4 <I2C_WaitOnFlagUntilTimeout>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	e1fe      	b.n	8003f0c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d101      	bne.n	8003b1c <HAL_I2C_Master_Receive+0x50>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	e1f7      	b.n	8003f0c <HAL_I2C_Master_Receive+0x440>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d007      	beq.n	8003b42 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f042 0201 	orr.w	r2, r2, #1
 8003b40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b50:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2222      	movs	r2, #34	; 0x22
 8003b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2210      	movs	r2, #16
 8003b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	893a      	ldrh	r2, [r7, #8]
 8003b72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	4a5c      	ldr	r2, [pc, #368]	; (8003cf4 <HAL_I2C_Master_Receive+0x228>)
 8003b82:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b84:	8979      	ldrh	r1, [r7, #10]
 8003b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 fd66 	bl	800465c <I2C_MasterRequestRead>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e1b8      	b.n	8003f0c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d113      	bne.n	8003bca <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	623b      	str	r3, [r7, #32]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	623b      	str	r3, [r7, #32]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	623b      	str	r3, [r7, #32]
 8003bb6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	e18c      	b.n	8003ee4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d11b      	bne.n	8003c0a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003be0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003be2:	2300      	movs	r3, #0
 8003be4:	61fb      	str	r3, [r7, #28]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	61fb      	str	r3, [r7, #28]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	61fb      	str	r3, [r7, #28]
 8003bf6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	e16c      	b.n	8003ee4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d11b      	bne.n	8003c4a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c20:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c32:	2300      	movs	r3, #0
 8003c34:	61bb      	str	r3, [r7, #24]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	61bb      	str	r3, [r7, #24]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	61bb      	str	r3, [r7, #24]
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	e14c      	b.n	8003ee4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	617b      	str	r3, [r7, #20]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	617b      	str	r3, [r7, #20]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	617b      	str	r3, [r7, #20]
 8003c6e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003c70:	e138      	b.n	8003ee4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c76:	2b03      	cmp	r3, #3
 8003c78:	f200 80f1 	bhi.w	8003e5e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d123      	bne.n	8003ccc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f001 f88b 	bl	8004da4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e139      	b.n	8003f0c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	691a      	ldr	r2, [r3, #16]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	b2d2      	uxtb	r2, r2
 8003ca4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003caa:	1c5a      	adds	r2, r3, #1
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cca:	e10b      	b.n	8003ee4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d14e      	bne.n	8003d72 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd6:	9300      	str	r3, [sp, #0]
 8003cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cda:	2200      	movs	r2, #0
 8003cdc:	4906      	ldr	r1, [pc, #24]	; (8003cf8 <HAL_I2C_Master_Receive+0x22c>)
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f000 ff08 	bl	8004af4 <I2C_WaitOnFlagUntilTimeout>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d008      	beq.n	8003cfc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e10e      	b.n	8003f0c <HAL_I2C_Master_Receive+0x440>
 8003cee:	bf00      	nop
 8003cf0:	00100002 	.word	0x00100002
 8003cf4:	ffff0000 	.word	0xffff0000
 8003cf8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	691a      	ldr	r2, [r3, #16]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1e:	1c5a      	adds	r2, r3, #1
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	3b01      	subs	r3, #1
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	691a      	ldr	r2, [r3, #16]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	b2d2      	uxtb	r2, r2
 8003d4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d50:	1c5a      	adds	r2, r3, #1
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d70:	e0b8      	b.n	8003ee4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d78:	2200      	movs	r2, #0
 8003d7a:	4966      	ldr	r1, [pc, #408]	; (8003f14 <HAL_I2C_Master_Receive+0x448>)
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 feb9 	bl	8004af4 <I2C_WaitOnFlagUntilTimeout>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e0bf      	b.n	8003f0c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	691a      	ldr	r2, [r3, #16]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dae:	1c5a      	adds	r2, r3, #1
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db8:	3b01      	subs	r3, #1
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	494f      	ldr	r1, [pc, #316]	; (8003f14 <HAL_I2C_Master_Receive+0x448>)
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f000 fe8b 	bl	8004af4 <I2C_WaitOnFlagUntilTimeout>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e091      	b.n	8003f0c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003df6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	691a      	ldr	r2, [r3, #16]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e02:	b2d2      	uxtb	r2, r2
 8003e04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	1c5a      	adds	r2, r3, #1
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e14:	3b01      	subs	r3, #1
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	3b01      	subs	r3, #1
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	691a      	ldr	r2, [r3, #16]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e34:	b2d2      	uxtb	r2, r2
 8003e36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e5c:	e042      	b.n	8003ee4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f000 ff9e 	bl	8004da4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e04c      	b.n	8003f0c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	691a      	ldr	r2, [r3, #16]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7c:	b2d2      	uxtb	r2, r2
 8003e7e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e84:	1c5a      	adds	r2, r3, #1
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	f003 0304 	and.w	r3, r3, #4
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	d118      	bne.n	8003ee4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	691a      	ldr	r2, [r3, #16]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebc:	b2d2      	uxtb	r2, r2
 8003ebe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec4:	1c5a      	adds	r2, r3, #1
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	3b01      	subs	r3, #1
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f47f aec2 	bne.w	8003c72 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f06:	2300      	movs	r3, #0
 8003f08:	e000      	b.n	8003f0c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003f0a:	2302      	movs	r3, #2
  }
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3728      	adds	r7, #40	; 0x28
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	00010004 	.word	0x00010004

08003f18 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b088      	sub	sp, #32
 8003f1c:	af02      	add	r7, sp, #8
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	4608      	mov	r0, r1
 8003f22:	4611      	mov	r1, r2
 8003f24:	461a      	mov	r2, r3
 8003f26:	4603      	mov	r3, r0
 8003f28:	817b      	strh	r3, [r7, #10]
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	813b      	strh	r3, [r7, #8]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f32:	f7fe fbe7 	bl	8002704 <HAL_GetTick>
 8003f36:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2b20      	cmp	r3, #32
 8003f42:	f040 80d9 	bne.w	80040f8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	2319      	movs	r3, #25
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	496d      	ldr	r1, [pc, #436]	; (8004104 <HAL_I2C_Mem_Write+0x1ec>)
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 fdcf 	bl	8004af4 <I2C_WaitOnFlagUntilTimeout>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	e0cc      	b.n	80040fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d101      	bne.n	8003f6e <HAL_I2C_Mem_Write+0x56>
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	e0c5      	b.n	80040fa <HAL_I2C_Mem_Write+0x1e2>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d007      	beq.n	8003f94 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f042 0201 	orr.w	r2, r2, #1
 8003f92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fa2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2221      	movs	r2, #33	; 0x21
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2240      	movs	r2, #64	; 0x40
 8003fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6a3a      	ldr	r2, [r7, #32]
 8003fbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003fc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	4a4d      	ldr	r2, [pc, #308]	; (8004108 <HAL_I2C_Mem_Write+0x1f0>)
 8003fd4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fd6:	88f8      	ldrh	r0, [r7, #6]
 8003fd8:	893a      	ldrh	r2, [r7, #8]
 8003fda:	8979      	ldrh	r1, [r7, #10]
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	9301      	str	r3, [sp, #4]
 8003fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe2:	9300      	str	r3, [sp, #0]
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f000 fc06 	bl	80047f8 <I2C_RequestMemoryWrite>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d052      	beq.n	8004098 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e081      	b.n	80040fa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 fe50 	bl	8004ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00d      	beq.n	8004022 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400a:	2b04      	cmp	r3, #4
 800400c:	d107      	bne.n	800401e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800401c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e06b      	b.n	80040fa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004026:	781a      	ldrb	r2, [r3, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004032:	1c5a      	adds	r2, r3, #1
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800403c:	3b01      	subs	r3, #1
 800403e:	b29a      	uxth	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004048:	b29b      	uxth	r3, r3
 800404a:	3b01      	subs	r3, #1
 800404c:	b29a      	uxth	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b04      	cmp	r3, #4
 800405e:	d11b      	bne.n	8004098 <HAL_I2C_Mem_Write+0x180>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004064:	2b00      	cmp	r3, #0
 8004066:	d017      	beq.n	8004098 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406c:	781a      	ldrb	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004078:	1c5a      	adds	r2, r3, #1
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004082:	3b01      	subs	r3, #1
 8004084:	b29a      	uxth	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408e:	b29b      	uxth	r3, r3
 8004090:	3b01      	subs	r3, #1
 8004092:	b29a      	uxth	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1aa      	bne.n	8003ff6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 fe3c 	bl	8004d22 <I2C_WaitOnBTFFlagUntilTimeout>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00d      	beq.n	80040cc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b4:	2b04      	cmp	r3, #4
 80040b6:	d107      	bne.n	80040c8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040c6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e016      	b.n	80040fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2220      	movs	r2, #32
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80040f4:	2300      	movs	r3, #0
 80040f6:	e000      	b.n	80040fa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80040f8:	2302      	movs	r3, #2
  }
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3718      	adds	r7, #24
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	00100002 	.word	0x00100002
 8004108:	ffff0000 	.word	0xffff0000

0800410c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b08c      	sub	sp, #48	; 0x30
 8004110:	af02      	add	r7, sp, #8
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	4608      	mov	r0, r1
 8004116:	4611      	mov	r1, r2
 8004118:	461a      	mov	r2, r3
 800411a:	4603      	mov	r3, r0
 800411c:	817b      	strh	r3, [r7, #10]
 800411e:	460b      	mov	r3, r1
 8004120:	813b      	strh	r3, [r7, #8]
 8004122:	4613      	mov	r3, r2
 8004124:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004126:	f7fe faed 	bl	8002704 <HAL_GetTick>
 800412a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b20      	cmp	r3, #32
 8004136:	f040 8208 	bne.w	800454a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413c:	9300      	str	r3, [sp, #0]
 800413e:	2319      	movs	r3, #25
 8004140:	2201      	movs	r2, #1
 8004142:	497b      	ldr	r1, [pc, #492]	; (8004330 <HAL_I2C_Mem_Read+0x224>)
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 fcd5 	bl	8004af4 <I2C_WaitOnFlagUntilTimeout>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d001      	beq.n	8004154 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004150:	2302      	movs	r3, #2
 8004152:	e1fb      	b.n	800454c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800415a:	2b01      	cmp	r3, #1
 800415c:	d101      	bne.n	8004162 <HAL_I2C_Mem_Read+0x56>
 800415e:	2302      	movs	r3, #2
 8004160:	e1f4      	b.n	800454c <HAL_I2C_Mem_Read+0x440>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0301 	and.w	r3, r3, #1
 8004174:	2b01      	cmp	r3, #1
 8004176:	d007      	beq.n	8004188 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f042 0201 	orr.w	r2, r2, #1
 8004186:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004196:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2222      	movs	r2, #34	; 0x22
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2240      	movs	r2, #64	; 0x40
 80041a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80041b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041be:	b29a      	uxth	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	4a5b      	ldr	r2, [pc, #364]	; (8004334 <HAL_I2C_Mem_Read+0x228>)
 80041c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041ca:	88f8      	ldrh	r0, [r7, #6]
 80041cc:	893a      	ldrh	r2, [r7, #8]
 80041ce:	8979      	ldrh	r1, [r7, #10]
 80041d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d2:	9301      	str	r3, [sp, #4]
 80041d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	4603      	mov	r3, r0
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f000 fba2 	bl	8004924 <I2C_RequestMemoryRead>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e1b0      	b.n	800454c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d113      	bne.n	800421a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041f2:	2300      	movs	r3, #0
 80041f4:	623b      	str	r3, [r7, #32]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	623b      	str	r3, [r7, #32]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	623b      	str	r3, [r7, #32]
 8004206:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	e184      	b.n	8004524 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800421e:	2b01      	cmp	r3, #1
 8004220:	d11b      	bne.n	800425a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004230:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004232:	2300      	movs	r3, #0
 8004234:	61fb      	str	r3, [r7, #28]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	61fb      	str	r3, [r7, #28]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	61fb      	str	r3, [r7, #28]
 8004246:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	e164      	b.n	8004524 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800425e:	2b02      	cmp	r3, #2
 8004260:	d11b      	bne.n	800429a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004270:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004280:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004282:	2300      	movs	r3, #0
 8004284:	61bb      	str	r3, [r7, #24]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	61bb      	str	r3, [r7, #24]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	61bb      	str	r3, [r7, #24]
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	e144      	b.n	8004524 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800429a:	2300      	movs	r3, #0
 800429c:	617b      	str	r3, [r7, #20]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	617b      	str	r3, [r7, #20]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	617b      	str	r3, [r7, #20]
 80042ae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80042b0:	e138      	b.n	8004524 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b6:	2b03      	cmp	r3, #3
 80042b8:	f200 80f1 	bhi.w	800449e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d123      	bne.n	800430c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f000 fd6b 	bl	8004da4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e139      	b.n	800454c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	691a      	ldr	r2, [r3, #16]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e2:	b2d2      	uxtb	r2, r2
 80042e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	1c5a      	adds	r2, r3, #1
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f4:	3b01      	subs	r3, #1
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004300:	b29b      	uxth	r3, r3
 8004302:	3b01      	subs	r3, #1
 8004304:	b29a      	uxth	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	855a      	strh	r2, [r3, #42]	; 0x2a
 800430a:	e10b      	b.n	8004524 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004310:	2b02      	cmp	r3, #2
 8004312:	d14e      	bne.n	80043b2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800431a:	2200      	movs	r2, #0
 800431c:	4906      	ldr	r1, [pc, #24]	; (8004338 <HAL_I2C_Mem_Read+0x22c>)
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f000 fbe8 	bl	8004af4 <I2C_WaitOnFlagUntilTimeout>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d008      	beq.n	800433c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e10e      	b.n	800454c <HAL_I2C_Mem_Read+0x440>
 800432e:	bf00      	nop
 8004330:	00100002 	.word	0x00100002
 8004334:	ffff0000 	.word	0xffff0000
 8004338:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800434a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	691a      	ldr	r2, [r3, #16]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004356:	b2d2      	uxtb	r2, r2
 8004358:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435e:	1c5a      	adds	r2, r3, #1
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004368:	3b01      	subs	r3, #1
 800436a:	b29a      	uxth	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004374:	b29b      	uxth	r3, r3
 8004376:	3b01      	subs	r3, #1
 8004378:	b29a      	uxth	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	691a      	ldr	r2, [r3, #16]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	b2d2      	uxtb	r2, r2
 800438a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004390:	1c5a      	adds	r2, r3, #1
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800439a:	3b01      	subs	r3, #1
 800439c:	b29a      	uxth	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	3b01      	subs	r3, #1
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043b0:	e0b8      	b.n	8004524 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b8:	2200      	movs	r2, #0
 80043ba:	4966      	ldr	r1, [pc, #408]	; (8004554 <HAL_I2C_Mem_Read+0x448>)
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f000 fb99 	bl	8004af4 <I2C_WaitOnFlagUntilTimeout>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e0bf      	b.n	800454c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	691a      	ldr	r2, [r3, #16]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e6:	b2d2      	uxtb	r2, r2
 80043e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ee:	1c5a      	adds	r2, r3, #1
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004404:	b29b      	uxth	r3, r3
 8004406:	3b01      	subs	r3, #1
 8004408:	b29a      	uxth	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004414:	2200      	movs	r2, #0
 8004416:	494f      	ldr	r1, [pc, #316]	; (8004554 <HAL_I2C_Mem_Read+0x448>)
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f000 fb6b 	bl	8004af4 <I2C_WaitOnFlagUntilTimeout>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d001      	beq.n	8004428 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e091      	b.n	800454c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004436:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	691a      	ldr	r2, [r3, #16]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	b2d2      	uxtb	r2, r2
 8004444:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444a:	1c5a      	adds	r2, r3, #1
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004454:	3b01      	subs	r3, #1
 8004456:	b29a      	uxth	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004460:	b29b      	uxth	r3, r3
 8004462:	3b01      	subs	r3, #1
 8004464:	b29a      	uxth	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	691a      	ldr	r2, [r3, #16]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004474:	b2d2      	uxtb	r2, r2
 8004476:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	1c5a      	adds	r2, r3, #1
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004486:	3b01      	subs	r3, #1
 8004488:	b29a      	uxth	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004492:	b29b      	uxth	r3, r3
 8004494:	3b01      	subs	r3, #1
 8004496:	b29a      	uxth	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800449c:	e042      	b.n	8004524 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800449e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f000 fc7e 	bl	8004da4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d001      	beq.n	80044b2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e04c      	b.n	800454c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	691a      	ldr	r2, [r3, #16]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044bc:	b2d2      	uxtb	r2, r2
 80044be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	1c5a      	adds	r2, r3, #1
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ce:	3b01      	subs	r3, #1
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044da:	b29b      	uxth	r3, r3
 80044dc:	3b01      	subs	r3, #1
 80044de:	b29a      	uxth	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	f003 0304 	and.w	r3, r3, #4
 80044ee:	2b04      	cmp	r3, #4
 80044f0:	d118      	bne.n	8004524 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	691a      	ldr	r2, [r3, #16]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fc:	b2d2      	uxtb	r2, r2
 80044fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004504:	1c5a      	adds	r2, r3, #1
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800450e:	3b01      	subs	r3, #1
 8004510:	b29a      	uxth	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800451a:	b29b      	uxth	r3, r3
 800451c:	3b01      	subs	r3, #1
 800451e:	b29a      	uxth	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004528:	2b00      	cmp	r3, #0
 800452a:	f47f aec2 	bne.w	80042b2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2220      	movs	r2, #32
 8004532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004546:	2300      	movs	r3, #0
 8004548:	e000      	b.n	800454c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800454a:	2302      	movs	r3, #2
  }
}
 800454c:	4618      	mov	r0, r3
 800454e:	3728      	adds	r7, #40	; 0x28
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	00010004 	.word	0x00010004

08004558 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b088      	sub	sp, #32
 800455c:	af02      	add	r7, sp, #8
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	607a      	str	r2, [r7, #4]
 8004562:	603b      	str	r3, [r7, #0]
 8004564:	460b      	mov	r3, r1
 8004566:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	2b08      	cmp	r3, #8
 8004572:	d006      	beq.n	8004582 <I2C_MasterRequestWrite+0x2a>
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d003      	beq.n	8004582 <I2C_MasterRequestWrite+0x2a>
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004580:	d108      	bne.n	8004594 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	e00b      	b.n	80045ac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004598:	2b12      	cmp	r3, #18
 800459a:	d107      	bne.n	80045ac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 fa9b 	bl	8004af4 <I2C_WaitOnFlagUntilTimeout>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00d      	beq.n	80045e0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045d2:	d103      	bne.n	80045dc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e035      	b.n	800464c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045e8:	d108      	bne.n	80045fc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045ea:	897b      	ldrh	r3, [r7, #10]
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	461a      	mov	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045f8:	611a      	str	r2, [r3, #16]
 80045fa:	e01b      	b.n	8004634 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80045fc:	897b      	ldrh	r3, [r7, #10]
 80045fe:	11db      	asrs	r3, r3, #7
 8004600:	b2db      	uxtb	r3, r3
 8004602:	f003 0306 	and.w	r3, r3, #6
 8004606:	b2db      	uxtb	r3, r3
 8004608:	f063 030f 	orn	r3, r3, #15
 800460c:	b2da      	uxtb	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	490e      	ldr	r1, [pc, #56]	; (8004654 <I2C_MasterRequestWrite+0xfc>)
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f000 fac1 	bl	8004ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d001      	beq.n	800462a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e010      	b.n	800464c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800462a:	897b      	ldrh	r3, [r7, #10]
 800462c:	b2da      	uxtb	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	4907      	ldr	r1, [pc, #28]	; (8004658 <I2C_MasterRequestWrite+0x100>)
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f000 fab1 	bl	8004ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e000      	b.n	800464c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3718      	adds	r7, #24
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	00010008 	.word	0x00010008
 8004658:	00010002 	.word	0x00010002

0800465c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b088      	sub	sp, #32
 8004660:	af02      	add	r7, sp, #8
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	607a      	str	r2, [r7, #4]
 8004666:	603b      	str	r3, [r7, #0]
 8004668:	460b      	mov	r3, r1
 800466a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004670:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004680:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	2b08      	cmp	r3, #8
 8004686:	d006      	beq.n	8004696 <I2C_MasterRequestRead+0x3a>
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d003      	beq.n	8004696 <I2C_MasterRequestRead+0x3a>
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004694:	d108      	bne.n	80046a8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046a4:	601a      	str	r2, [r3, #0]
 80046a6:	e00b      	b.n	80046c0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ac:	2b11      	cmp	r3, #17
 80046ae:	d107      	bne.n	80046c0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f000 fa11 	bl	8004af4 <I2C_WaitOnFlagUntilTimeout>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00d      	beq.n	80046f4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046e6:	d103      	bne.n	80046f0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e079      	b.n	80047e8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046fc:	d108      	bne.n	8004710 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80046fe:	897b      	ldrh	r3, [r7, #10]
 8004700:	b2db      	uxtb	r3, r3
 8004702:	f043 0301 	orr.w	r3, r3, #1
 8004706:	b2da      	uxtb	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	611a      	str	r2, [r3, #16]
 800470e:	e05f      	b.n	80047d0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004710:	897b      	ldrh	r3, [r7, #10]
 8004712:	11db      	asrs	r3, r3, #7
 8004714:	b2db      	uxtb	r3, r3
 8004716:	f003 0306 	and.w	r3, r3, #6
 800471a:	b2db      	uxtb	r3, r3
 800471c:	f063 030f 	orn	r3, r3, #15
 8004720:	b2da      	uxtb	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	4930      	ldr	r1, [pc, #192]	; (80047f0 <I2C_MasterRequestRead+0x194>)
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f000 fa37 	bl	8004ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e054      	b.n	80047e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800473e:	897b      	ldrh	r3, [r7, #10]
 8004740:	b2da      	uxtb	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	4929      	ldr	r1, [pc, #164]	; (80047f4 <I2C_MasterRequestRead+0x198>)
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f000 fa27 	bl	8004ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e044      	b.n	80047e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800475e:	2300      	movs	r3, #0
 8004760:	613b      	str	r3, [r7, #16]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	613b      	str	r3, [r7, #16]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	613b      	str	r3, [r7, #16]
 8004772:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004782:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	9300      	str	r3, [sp, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f000 f9af 	bl	8004af4 <I2C_WaitOnFlagUntilTimeout>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00d      	beq.n	80047b8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047aa:	d103      	bne.n	80047b4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047b2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e017      	b.n	80047e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80047b8:	897b      	ldrh	r3, [r7, #10]
 80047ba:	11db      	asrs	r3, r3, #7
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	f003 0306 	and.w	r3, r3, #6
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	f063 030e 	orn	r3, r3, #14
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	4907      	ldr	r1, [pc, #28]	; (80047f4 <I2C_MasterRequestRead+0x198>)
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f000 f9e3 	bl	8004ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e000      	b.n	80047e8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3718      	adds	r7, #24
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	00010008 	.word	0x00010008
 80047f4:	00010002 	.word	0x00010002

080047f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b088      	sub	sp, #32
 80047fc:	af02      	add	r7, sp, #8
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	4608      	mov	r0, r1
 8004802:	4611      	mov	r1, r2
 8004804:	461a      	mov	r2, r3
 8004806:	4603      	mov	r3, r0
 8004808:	817b      	strh	r3, [r7, #10]
 800480a:	460b      	mov	r3, r1
 800480c:	813b      	strh	r3, [r7, #8]
 800480e:	4613      	mov	r3, r2
 8004810:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004820:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	9300      	str	r3, [sp, #0]
 8004826:	6a3b      	ldr	r3, [r7, #32]
 8004828:	2200      	movs	r2, #0
 800482a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f000 f960 	bl	8004af4 <I2C_WaitOnFlagUntilTimeout>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00d      	beq.n	8004856 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004844:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004848:	d103      	bne.n	8004852 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004850:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e05f      	b.n	8004916 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004856:	897b      	ldrh	r3, [r7, #10]
 8004858:	b2db      	uxtb	r3, r3
 800485a:	461a      	mov	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004864:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004868:	6a3a      	ldr	r2, [r7, #32]
 800486a:	492d      	ldr	r1, [pc, #180]	; (8004920 <I2C_RequestMemoryWrite+0x128>)
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f000 f998 	bl	8004ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d001      	beq.n	800487c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e04c      	b.n	8004916 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800487c:	2300      	movs	r3, #0
 800487e:	617b      	str	r3, [r7, #20]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	617b      	str	r3, [r7, #20]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	617b      	str	r3, [r7, #20]
 8004890:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004894:	6a39      	ldr	r1, [r7, #32]
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f000 fa02 	bl	8004ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00d      	beq.n	80048be <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	2b04      	cmp	r3, #4
 80048a8:	d107      	bne.n	80048ba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e02b      	b.n	8004916 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048be:	88fb      	ldrh	r3, [r7, #6]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d105      	bne.n	80048d0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048c4:	893b      	ldrh	r3, [r7, #8]
 80048c6:	b2da      	uxtb	r2, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	611a      	str	r2, [r3, #16]
 80048ce:	e021      	b.n	8004914 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80048d0:	893b      	ldrh	r3, [r7, #8]
 80048d2:	0a1b      	lsrs	r3, r3, #8
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	b2da      	uxtb	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048e0:	6a39      	ldr	r1, [r7, #32]
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f000 f9dc 	bl	8004ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00d      	beq.n	800490a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f2:	2b04      	cmp	r3, #4
 80048f4:	d107      	bne.n	8004906 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004904:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e005      	b.n	8004916 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800490a:	893b      	ldrh	r3, [r7, #8]
 800490c:	b2da      	uxtb	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3718      	adds	r7, #24
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	00010002 	.word	0x00010002

08004924 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b088      	sub	sp, #32
 8004928:	af02      	add	r7, sp, #8
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	4608      	mov	r0, r1
 800492e:	4611      	mov	r1, r2
 8004930:	461a      	mov	r2, r3
 8004932:	4603      	mov	r3, r0
 8004934:	817b      	strh	r3, [r7, #10]
 8004936:	460b      	mov	r3, r1
 8004938:	813b      	strh	r3, [r7, #8]
 800493a:	4613      	mov	r3, r2
 800493c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800494c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800495c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	6a3b      	ldr	r3, [r7, #32]
 8004964:	2200      	movs	r2, #0
 8004966:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f000 f8c2 	bl	8004af4 <I2C_WaitOnFlagUntilTimeout>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00d      	beq.n	8004992 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004980:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004984:	d103      	bne.n	800498e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800498c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e0aa      	b.n	8004ae8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004992:	897b      	ldrh	r3, [r7, #10]
 8004994:	b2db      	uxtb	r3, r3
 8004996:	461a      	mov	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a4:	6a3a      	ldr	r2, [r7, #32]
 80049a6:	4952      	ldr	r1, [pc, #328]	; (8004af0 <I2C_RequestMemoryRead+0x1cc>)
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f000 f8fa 	bl	8004ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d001      	beq.n	80049b8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e097      	b.n	8004ae8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049b8:	2300      	movs	r3, #0
 80049ba:	617b      	str	r3, [r7, #20]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	617b      	str	r3, [r7, #20]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	617b      	str	r3, [r7, #20]
 80049cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049d0:	6a39      	ldr	r1, [r7, #32]
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f000 f964 	bl	8004ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00d      	beq.n	80049fa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	d107      	bne.n	80049f6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e076      	b.n	8004ae8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049fa:	88fb      	ldrh	r3, [r7, #6]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d105      	bne.n	8004a0c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a00:	893b      	ldrh	r3, [r7, #8]
 8004a02:	b2da      	uxtb	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	611a      	str	r2, [r3, #16]
 8004a0a:	e021      	b.n	8004a50 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a0c:	893b      	ldrh	r3, [r7, #8]
 8004a0e:	0a1b      	lsrs	r3, r3, #8
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	b2da      	uxtb	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a1c:	6a39      	ldr	r1, [r7, #32]
 8004a1e:	68f8      	ldr	r0, [r7, #12]
 8004a20:	f000 f93e 	bl	8004ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00d      	beq.n	8004a46 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2e:	2b04      	cmp	r3, #4
 8004a30:	d107      	bne.n	8004a42 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e050      	b.n	8004ae8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a46:	893b      	ldrh	r3, [r7, #8]
 8004a48:	b2da      	uxtb	r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a52:	6a39      	ldr	r1, [r7, #32]
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 f923 	bl	8004ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00d      	beq.n	8004a7c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a64:	2b04      	cmp	r3, #4
 8004a66:	d107      	bne.n	8004a78 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a76:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e035      	b.n	8004ae8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a8a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8e:	9300      	str	r3, [sp, #0]
 8004a90:	6a3b      	ldr	r3, [r7, #32]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 f82b 	bl	8004af4 <I2C_WaitOnFlagUntilTimeout>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00d      	beq.n	8004ac0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ab2:	d103      	bne.n	8004abc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004aba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e013      	b.n	8004ae8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ac0:	897b      	ldrh	r3, [r7, #10]
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	f043 0301 	orr.w	r3, r3, #1
 8004ac8:	b2da      	uxtb	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad2:	6a3a      	ldr	r2, [r7, #32]
 8004ad4:	4906      	ldr	r1, [pc, #24]	; (8004af0 <I2C_RequestMemoryRead+0x1cc>)
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f000 f863 	bl	8004ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e000      	b.n	8004ae8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3718      	adds	r7, #24
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	00010002 	.word	0x00010002

08004af4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	603b      	str	r3, [r7, #0]
 8004b00:	4613      	mov	r3, r2
 8004b02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b04:	e025      	b.n	8004b52 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0c:	d021      	beq.n	8004b52 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b0e:	f7fd fdf9 	bl	8002704 <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d302      	bcc.n	8004b24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d116      	bne.n	8004b52 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3e:	f043 0220 	orr.w	r2, r3, #32
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e023      	b.n	8004b9a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	0c1b      	lsrs	r3, r3, #16
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d10d      	bne.n	8004b78 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	43da      	mvns	r2, r3
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	4013      	ands	r3, r2
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	bf0c      	ite	eq
 8004b6e:	2301      	moveq	r3, #1
 8004b70:	2300      	movne	r3, #0
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	461a      	mov	r2, r3
 8004b76:	e00c      	b.n	8004b92 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	43da      	mvns	r2, r3
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	4013      	ands	r3, r2
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	bf0c      	ite	eq
 8004b8a:	2301      	moveq	r3, #1
 8004b8c:	2300      	movne	r3, #0
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	461a      	mov	r2, r3
 8004b92:	79fb      	ldrb	r3, [r7, #7]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d0b6      	beq.n	8004b06 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b084      	sub	sp, #16
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	60f8      	str	r0, [r7, #12]
 8004baa:	60b9      	str	r1, [r7, #8]
 8004bac:	607a      	str	r2, [r7, #4]
 8004bae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bb0:	e051      	b.n	8004c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bc0:	d123      	bne.n	8004c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bd0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bda:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2220      	movs	r2, #32
 8004be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf6:	f043 0204 	orr.w	r2, r3, #4
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e046      	b.n	8004c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c10:	d021      	beq.n	8004c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c12:	f7fd fd77 	bl	8002704 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d302      	bcc.n	8004c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d116      	bne.n	8004c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2220      	movs	r2, #32
 8004c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c42:	f043 0220 	orr.w	r2, r3, #32
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e020      	b.n	8004c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	0c1b      	lsrs	r3, r3, #16
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d10c      	bne.n	8004c7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	43da      	mvns	r2, r3
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	bf14      	ite	ne
 8004c72:	2301      	movne	r3, #1
 8004c74:	2300      	moveq	r3, #0
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	e00b      	b.n	8004c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	43da      	mvns	r2, r3
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	4013      	ands	r3, r2
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	bf14      	ite	ne
 8004c8c:	2301      	movne	r3, #1
 8004c8e:	2300      	moveq	r3, #0
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d18d      	bne.n	8004bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cac:	e02d      	b.n	8004d0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f000 f8ce 	bl	8004e50 <I2C_IsAcknowledgeFailed>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d001      	beq.n	8004cbe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e02d      	b.n	8004d1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc4:	d021      	beq.n	8004d0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cc6:	f7fd fd1d 	bl	8002704 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d302      	bcc.n	8004cdc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d116      	bne.n	8004d0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf6:	f043 0220 	orr.w	r2, r3, #32
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e007      	b.n	8004d1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d14:	2b80      	cmp	r3, #128	; 0x80
 8004d16:	d1ca      	bne.n	8004cae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b084      	sub	sp, #16
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	60f8      	str	r0, [r7, #12]
 8004d2a:	60b9      	str	r1, [r7, #8]
 8004d2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d2e:	e02d      	b.n	8004d8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f000 f88d 	bl	8004e50 <I2C_IsAcknowledgeFailed>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d001      	beq.n	8004d40 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e02d      	b.n	8004d9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d46:	d021      	beq.n	8004d8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d48:	f7fd fcdc 	bl	8002704 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	68ba      	ldr	r2, [r7, #8]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d302      	bcc.n	8004d5e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d116      	bne.n	8004d8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2220      	movs	r2, #32
 8004d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d78:	f043 0220 	orr.w	r2, r3, #32
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e007      	b.n	8004d9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	f003 0304 	and.w	r3, r3, #4
 8004d96:	2b04      	cmp	r3, #4
 8004d98:	d1ca      	bne.n	8004d30 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3710      	adds	r7, #16
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004db0:	e042      	b.n	8004e38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	f003 0310 	and.w	r3, r3, #16
 8004dbc:	2b10      	cmp	r3, #16
 8004dbe:	d119      	bne.n	8004df4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f06f 0210 	mvn.w	r2, #16
 8004dc8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e029      	b.n	8004e48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004df4:	f7fd fc86 	bl	8002704 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	68ba      	ldr	r2, [r7, #8]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d302      	bcc.n	8004e0a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d116      	bne.n	8004e38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2220      	movs	r2, #32
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e24:	f043 0220 	orr.w	r2, r3, #32
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e007      	b.n	8004e48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e42:	2b40      	cmp	r3, #64	; 0x40
 8004e44:	d1b5      	bne.n	8004db2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3710      	adds	r7, #16
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e66:	d11b      	bne.n	8004ea0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e70:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8c:	f043 0204 	orr.w	r2, r3, #4
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e000      	b.n	8004ea2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	370c      	adds	r7, #12
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
	...

08004eb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e0cc      	b.n	800505e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ec4:	4b68      	ldr	r3, [pc, #416]	; (8005068 <HAL_RCC_ClockConfig+0x1b8>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 030f 	and.w	r3, r3, #15
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d90c      	bls.n	8004eec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ed2:	4b65      	ldr	r3, [pc, #404]	; (8005068 <HAL_RCC_ClockConfig+0x1b8>)
 8004ed4:	683a      	ldr	r2, [r7, #0]
 8004ed6:	b2d2      	uxtb	r2, r2
 8004ed8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eda:	4b63      	ldr	r3, [pc, #396]	; (8005068 <HAL_RCC_ClockConfig+0x1b8>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 030f 	and.w	r3, r3, #15
 8004ee2:	683a      	ldr	r2, [r7, #0]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d001      	beq.n	8004eec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e0b8      	b.n	800505e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d020      	beq.n	8004f3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0304 	and.w	r3, r3, #4
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d005      	beq.n	8004f10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f04:	4b59      	ldr	r3, [pc, #356]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	4a58      	ldr	r2, [pc, #352]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004f0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0308 	and.w	r3, r3, #8
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d005      	beq.n	8004f28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f1c:	4b53      	ldr	r3, [pc, #332]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	4a52      	ldr	r2, [pc, #328]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004f22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f28:	4b50      	ldr	r3, [pc, #320]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	494d      	ldr	r1, [pc, #308]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d044      	beq.n	8004fd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d107      	bne.n	8004f5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f4e:	4b47      	ldr	r3, [pc, #284]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d119      	bne.n	8004f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e07f      	b.n	800505e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d003      	beq.n	8004f6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f6a:	2b03      	cmp	r3, #3
 8004f6c:	d107      	bne.n	8004f7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f6e:	4b3f      	ldr	r3, [pc, #252]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d109      	bne.n	8004f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e06f      	b.n	800505e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f7e:	4b3b      	ldr	r3, [pc, #236]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e067      	b.n	800505e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f8e:	4b37      	ldr	r3, [pc, #220]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f023 0203 	bic.w	r2, r3, #3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	4934      	ldr	r1, [pc, #208]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fa0:	f7fd fbb0 	bl	8002704 <HAL_GetTick>
 8004fa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fa6:	e00a      	b.n	8004fbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fa8:	f7fd fbac 	bl	8002704 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e04f      	b.n	800505e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fbe:	4b2b      	ldr	r3, [pc, #172]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f003 020c 	and.w	r2, r3, #12
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d1eb      	bne.n	8004fa8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fd0:	4b25      	ldr	r3, [pc, #148]	; (8005068 <HAL_RCC_ClockConfig+0x1b8>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 030f 	and.w	r3, r3, #15
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d20c      	bcs.n	8004ff8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fde:	4b22      	ldr	r3, [pc, #136]	; (8005068 <HAL_RCC_ClockConfig+0x1b8>)
 8004fe0:	683a      	ldr	r2, [r7, #0]
 8004fe2:	b2d2      	uxtb	r2, r2
 8004fe4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fe6:	4b20      	ldr	r3, [pc, #128]	; (8005068 <HAL_RCC_ClockConfig+0x1b8>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 030f 	and.w	r3, r3, #15
 8004fee:	683a      	ldr	r2, [r7, #0]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d001      	beq.n	8004ff8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e032      	b.n	800505e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0304 	and.w	r3, r3, #4
 8005000:	2b00      	cmp	r3, #0
 8005002:	d008      	beq.n	8005016 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005004:	4b19      	ldr	r3, [pc, #100]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	4916      	ldr	r1, [pc, #88]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8005012:	4313      	orrs	r3, r2
 8005014:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0308 	and.w	r3, r3, #8
 800501e:	2b00      	cmp	r3, #0
 8005020:	d009      	beq.n	8005036 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005022:	4b12      	ldr	r3, [pc, #72]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	00db      	lsls	r3, r3, #3
 8005030:	490e      	ldr	r1, [pc, #56]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8005032:	4313      	orrs	r3, r2
 8005034:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005036:	f000 f855 	bl	80050e4 <HAL_RCC_GetSysClockFreq>
 800503a:	4602      	mov	r2, r0
 800503c:	4b0b      	ldr	r3, [pc, #44]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	091b      	lsrs	r3, r3, #4
 8005042:	f003 030f 	and.w	r3, r3, #15
 8005046:	490a      	ldr	r1, [pc, #40]	; (8005070 <HAL_RCC_ClockConfig+0x1c0>)
 8005048:	5ccb      	ldrb	r3, [r1, r3]
 800504a:	fa22 f303 	lsr.w	r3, r2, r3
 800504e:	4a09      	ldr	r2, [pc, #36]	; (8005074 <HAL_RCC_ClockConfig+0x1c4>)
 8005050:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005052:	4b09      	ldr	r3, [pc, #36]	; (8005078 <HAL_RCC_ClockConfig+0x1c8>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4618      	mov	r0, r3
 8005058:	f7fd fb10 	bl	800267c <HAL_InitTick>

  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3710      	adds	r7, #16
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	40023c00 	.word	0x40023c00
 800506c:	40023800 	.word	0x40023800
 8005070:	08009e10 	.word	0x08009e10
 8005074:	20000050 	.word	0x20000050
 8005078:	20000054 	.word	0x20000054

0800507c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800507c:	b480      	push	{r7}
 800507e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005080:	4b03      	ldr	r3, [pc, #12]	; (8005090 <HAL_RCC_GetHCLKFreq+0x14>)
 8005082:	681b      	ldr	r3, [r3, #0]
}
 8005084:	4618      	mov	r0, r3
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	20000050 	.word	0x20000050

08005094 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005098:	f7ff fff0 	bl	800507c <HAL_RCC_GetHCLKFreq>
 800509c:	4602      	mov	r2, r0
 800509e:	4b05      	ldr	r3, [pc, #20]	; (80050b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	0a9b      	lsrs	r3, r3, #10
 80050a4:	f003 0307 	and.w	r3, r3, #7
 80050a8:	4903      	ldr	r1, [pc, #12]	; (80050b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050aa:	5ccb      	ldrb	r3, [r1, r3]
 80050ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	40023800 	.word	0x40023800
 80050b8:	08009e20 	.word	0x08009e20

080050bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050c0:	f7ff ffdc 	bl	800507c <HAL_RCC_GetHCLKFreq>
 80050c4:	4602      	mov	r2, r0
 80050c6:	4b05      	ldr	r3, [pc, #20]	; (80050dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	0b5b      	lsrs	r3, r3, #13
 80050cc:	f003 0307 	and.w	r3, r3, #7
 80050d0:	4903      	ldr	r1, [pc, #12]	; (80050e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050d2:	5ccb      	ldrb	r3, [r1, r3]
 80050d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050d8:	4618      	mov	r0, r3
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	40023800 	.word	0x40023800
 80050e0:	08009e20 	.word	0x08009e20

080050e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050e8:	b088      	sub	sp, #32
 80050ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80050ec:	2300      	movs	r3, #0
 80050ee:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80050f0:	2300      	movs	r3, #0
 80050f2:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80050f4:	2300      	movs	r3, #0
 80050f6:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80050f8:	2300      	movs	r3, #0
 80050fa:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80050fc:	2300      	movs	r3, #0
 80050fe:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005100:	4bce      	ldr	r3, [pc, #824]	; (800543c <HAL_RCC_GetSysClockFreq+0x358>)
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f003 030c 	and.w	r3, r3, #12
 8005108:	2b0c      	cmp	r3, #12
 800510a:	f200 818d 	bhi.w	8005428 <HAL_RCC_GetSysClockFreq+0x344>
 800510e:	a201      	add	r2, pc, #4	; (adr r2, 8005114 <HAL_RCC_GetSysClockFreq+0x30>)
 8005110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005114:	08005149 	.word	0x08005149
 8005118:	08005429 	.word	0x08005429
 800511c:	08005429 	.word	0x08005429
 8005120:	08005429 	.word	0x08005429
 8005124:	0800514f 	.word	0x0800514f
 8005128:	08005429 	.word	0x08005429
 800512c:	08005429 	.word	0x08005429
 8005130:	08005429 	.word	0x08005429
 8005134:	08005155 	.word	0x08005155
 8005138:	08005429 	.word	0x08005429
 800513c:	08005429 	.word	0x08005429
 8005140:	08005429 	.word	0x08005429
 8005144:	080052c9 	.word	0x080052c9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005148:	4bbd      	ldr	r3, [pc, #756]	; (8005440 <HAL_RCC_GetSysClockFreq+0x35c>)
 800514a:	61bb      	str	r3, [r7, #24]
       break;
 800514c:	e16f      	b.n	800542e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800514e:	4bbd      	ldr	r3, [pc, #756]	; (8005444 <HAL_RCC_GetSysClockFreq+0x360>)
 8005150:	61bb      	str	r3, [r7, #24]
      break;
 8005152:	e16c      	b.n	800542e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005154:	4bb9      	ldr	r3, [pc, #740]	; (800543c <HAL_RCC_GetSysClockFreq+0x358>)
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800515c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800515e:	4bb7      	ldr	r3, [pc, #732]	; (800543c <HAL_RCC_GetSysClockFreq+0x358>)
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d053      	beq.n	8005212 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800516a:	4bb4      	ldr	r3, [pc, #720]	; (800543c <HAL_RCC_GetSysClockFreq+0x358>)
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	099b      	lsrs	r3, r3, #6
 8005170:	461a      	mov	r2, r3
 8005172:	f04f 0300 	mov.w	r3, #0
 8005176:	f240 10ff 	movw	r0, #511	; 0x1ff
 800517a:	f04f 0100 	mov.w	r1, #0
 800517e:	ea02 0400 	and.w	r4, r2, r0
 8005182:	603c      	str	r4, [r7, #0]
 8005184:	400b      	ands	r3, r1
 8005186:	607b      	str	r3, [r7, #4]
 8005188:	e9d7 4500 	ldrd	r4, r5, [r7]
 800518c:	4620      	mov	r0, r4
 800518e:	4629      	mov	r1, r5
 8005190:	f04f 0200 	mov.w	r2, #0
 8005194:	f04f 0300 	mov.w	r3, #0
 8005198:	014b      	lsls	r3, r1, #5
 800519a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800519e:	0142      	lsls	r2, r0, #5
 80051a0:	4610      	mov	r0, r2
 80051a2:	4619      	mov	r1, r3
 80051a4:	4623      	mov	r3, r4
 80051a6:	1ac0      	subs	r0, r0, r3
 80051a8:	462b      	mov	r3, r5
 80051aa:	eb61 0103 	sbc.w	r1, r1, r3
 80051ae:	f04f 0200 	mov.w	r2, #0
 80051b2:	f04f 0300 	mov.w	r3, #0
 80051b6:	018b      	lsls	r3, r1, #6
 80051b8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80051bc:	0182      	lsls	r2, r0, #6
 80051be:	1a12      	subs	r2, r2, r0
 80051c0:	eb63 0301 	sbc.w	r3, r3, r1
 80051c4:	f04f 0000 	mov.w	r0, #0
 80051c8:	f04f 0100 	mov.w	r1, #0
 80051cc:	00d9      	lsls	r1, r3, #3
 80051ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051d2:	00d0      	lsls	r0, r2, #3
 80051d4:	4602      	mov	r2, r0
 80051d6:	460b      	mov	r3, r1
 80051d8:	4621      	mov	r1, r4
 80051da:	1852      	adds	r2, r2, r1
 80051dc:	4629      	mov	r1, r5
 80051de:	eb43 0101 	adc.w	r1, r3, r1
 80051e2:	460b      	mov	r3, r1
 80051e4:	f04f 0000 	mov.w	r0, #0
 80051e8:	f04f 0100 	mov.w	r1, #0
 80051ec:	0259      	lsls	r1, r3, #9
 80051ee:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80051f2:	0250      	lsls	r0, r2, #9
 80051f4:	4602      	mov	r2, r0
 80051f6:	460b      	mov	r3, r1
 80051f8:	4610      	mov	r0, r2
 80051fa:	4619      	mov	r1, r3
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	461a      	mov	r2, r3
 8005200:	f04f 0300 	mov.w	r3, #0
 8005204:	f7fb fd40 	bl	8000c88 <__aeabi_uldivmod>
 8005208:	4602      	mov	r2, r0
 800520a:	460b      	mov	r3, r1
 800520c:	4613      	mov	r3, r2
 800520e:	61fb      	str	r3, [r7, #28]
 8005210:	e04c      	b.n	80052ac <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005212:	4b8a      	ldr	r3, [pc, #552]	; (800543c <HAL_RCC_GetSysClockFreq+0x358>)
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	099b      	lsrs	r3, r3, #6
 8005218:	461a      	mov	r2, r3
 800521a:	f04f 0300 	mov.w	r3, #0
 800521e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005222:	f04f 0100 	mov.w	r1, #0
 8005226:	ea02 0a00 	and.w	sl, r2, r0
 800522a:	ea03 0b01 	and.w	fp, r3, r1
 800522e:	4650      	mov	r0, sl
 8005230:	4659      	mov	r1, fp
 8005232:	f04f 0200 	mov.w	r2, #0
 8005236:	f04f 0300 	mov.w	r3, #0
 800523a:	014b      	lsls	r3, r1, #5
 800523c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005240:	0142      	lsls	r2, r0, #5
 8005242:	4610      	mov	r0, r2
 8005244:	4619      	mov	r1, r3
 8005246:	ebb0 000a 	subs.w	r0, r0, sl
 800524a:	eb61 010b 	sbc.w	r1, r1, fp
 800524e:	f04f 0200 	mov.w	r2, #0
 8005252:	f04f 0300 	mov.w	r3, #0
 8005256:	018b      	lsls	r3, r1, #6
 8005258:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800525c:	0182      	lsls	r2, r0, #6
 800525e:	1a12      	subs	r2, r2, r0
 8005260:	eb63 0301 	sbc.w	r3, r3, r1
 8005264:	f04f 0000 	mov.w	r0, #0
 8005268:	f04f 0100 	mov.w	r1, #0
 800526c:	00d9      	lsls	r1, r3, #3
 800526e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005272:	00d0      	lsls	r0, r2, #3
 8005274:	4602      	mov	r2, r0
 8005276:	460b      	mov	r3, r1
 8005278:	eb12 020a 	adds.w	r2, r2, sl
 800527c:	eb43 030b 	adc.w	r3, r3, fp
 8005280:	f04f 0000 	mov.w	r0, #0
 8005284:	f04f 0100 	mov.w	r1, #0
 8005288:	0299      	lsls	r1, r3, #10
 800528a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800528e:	0290      	lsls	r0, r2, #10
 8005290:	4602      	mov	r2, r0
 8005292:	460b      	mov	r3, r1
 8005294:	4610      	mov	r0, r2
 8005296:	4619      	mov	r1, r3
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	461a      	mov	r2, r3
 800529c:	f04f 0300 	mov.w	r3, #0
 80052a0:	f7fb fcf2 	bl	8000c88 <__aeabi_uldivmod>
 80052a4:	4602      	mov	r2, r0
 80052a6:	460b      	mov	r3, r1
 80052a8:	4613      	mov	r3, r2
 80052aa:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80052ac:	4b63      	ldr	r3, [pc, #396]	; (800543c <HAL_RCC_GetSysClockFreq+0x358>)
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	0c1b      	lsrs	r3, r3, #16
 80052b2:	f003 0303 	and.w	r3, r3, #3
 80052b6:	3301      	adds	r3, #1
 80052b8:	005b      	lsls	r3, r3, #1
 80052ba:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80052bc:	69fa      	ldr	r2, [r7, #28]
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c4:	61bb      	str	r3, [r7, #24]
      break;
 80052c6:	e0b2      	b.n	800542e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052c8:	4b5c      	ldr	r3, [pc, #368]	; (800543c <HAL_RCC_GetSysClockFreq+0x358>)
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052d0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052d2:	4b5a      	ldr	r3, [pc, #360]	; (800543c <HAL_RCC_GetSysClockFreq+0x358>)
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d04d      	beq.n	800537a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052de:	4b57      	ldr	r3, [pc, #348]	; (800543c <HAL_RCC_GetSysClockFreq+0x358>)
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	099b      	lsrs	r3, r3, #6
 80052e4:	461a      	mov	r2, r3
 80052e6:	f04f 0300 	mov.w	r3, #0
 80052ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80052ee:	f04f 0100 	mov.w	r1, #0
 80052f2:	ea02 0800 	and.w	r8, r2, r0
 80052f6:	ea03 0901 	and.w	r9, r3, r1
 80052fa:	4640      	mov	r0, r8
 80052fc:	4649      	mov	r1, r9
 80052fe:	f04f 0200 	mov.w	r2, #0
 8005302:	f04f 0300 	mov.w	r3, #0
 8005306:	014b      	lsls	r3, r1, #5
 8005308:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800530c:	0142      	lsls	r2, r0, #5
 800530e:	4610      	mov	r0, r2
 8005310:	4619      	mov	r1, r3
 8005312:	ebb0 0008 	subs.w	r0, r0, r8
 8005316:	eb61 0109 	sbc.w	r1, r1, r9
 800531a:	f04f 0200 	mov.w	r2, #0
 800531e:	f04f 0300 	mov.w	r3, #0
 8005322:	018b      	lsls	r3, r1, #6
 8005324:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005328:	0182      	lsls	r2, r0, #6
 800532a:	1a12      	subs	r2, r2, r0
 800532c:	eb63 0301 	sbc.w	r3, r3, r1
 8005330:	f04f 0000 	mov.w	r0, #0
 8005334:	f04f 0100 	mov.w	r1, #0
 8005338:	00d9      	lsls	r1, r3, #3
 800533a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800533e:	00d0      	lsls	r0, r2, #3
 8005340:	4602      	mov	r2, r0
 8005342:	460b      	mov	r3, r1
 8005344:	eb12 0208 	adds.w	r2, r2, r8
 8005348:	eb43 0309 	adc.w	r3, r3, r9
 800534c:	f04f 0000 	mov.w	r0, #0
 8005350:	f04f 0100 	mov.w	r1, #0
 8005354:	0259      	lsls	r1, r3, #9
 8005356:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800535a:	0250      	lsls	r0, r2, #9
 800535c:	4602      	mov	r2, r0
 800535e:	460b      	mov	r3, r1
 8005360:	4610      	mov	r0, r2
 8005362:	4619      	mov	r1, r3
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	461a      	mov	r2, r3
 8005368:	f04f 0300 	mov.w	r3, #0
 800536c:	f7fb fc8c 	bl	8000c88 <__aeabi_uldivmod>
 8005370:	4602      	mov	r2, r0
 8005372:	460b      	mov	r3, r1
 8005374:	4613      	mov	r3, r2
 8005376:	61fb      	str	r3, [r7, #28]
 8005378:	e04a      	b.n	8005410 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800537a:	4b30      	ldr	r3, [pc, #192]	; (800543c <HAL_RCC_GetSysClockFreq+0x358>)
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	099b      	lsrs	r3, r3, #6
 8005380:	461a      	mov	r2, r3
 8005382:	f04f 0300 	mov.w	r3, #0
 8005386:	f240 10ff 	movw	r0, #511	; 0x1ff
 800538a:	f04f 0100 	mov.w	r1, #0
 800538e:	ea02 0400 	and.w	r4, r2, r0
 8005392:	ea03 0501 	and.w	r5, r3, r1
 8005396:	4620      	mov	r0, r4
 8005398:	4629      	mov	r1, r5
 800539a:	f04f 0200 	mov.w	r2, #0
 800539e:	f04f 0300 	mov.w	r3, #0
 80053a2:	014b      	lsls	r3, r1, #5
 80053a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80053a8:	0142      	lsls	r2, r0, #5
 80053aa:	4610      	mov	r0, r2
 80053ac:	4619      	mov	r1, r3
 80053ae:	1b00      	subs	r0, r0, r4
 80053b0:	eb61 0105 	sbc.w	r1, r1, r5
 80053b4:	f04f 0200 	mov.w	r2, #0
 80053b8:	f04f 0300 	mov.w	r3, #0
 80053bc:	018b      	lsls	r3, r1, #6
 80053be:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80053c2:	0182      	lsls	r2, r0, #6
 80053c4:	1a12      	subs	r2, r2, r0
 80053c6:	eb63 0301 	sbc.w	r3, r3, r1
 80053ca:	f04f 0000 	mov.w	r0, #0
 80053ce:	f04f 0100 	mov.w	r1, #0
 80053d2:	00d9      	lsls	r1, r3, #3
 80053d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80053d8:	00d0      	lsls	r0, r2, #3
 80053da:	4602      	mov	r2, r0
 80053dc:	460b      	mov	r3, r1
 80053de:	1912      	adds	r2, r2, r4
 80053e0:	eb45 0303 	adc.w	r3, r5, r3
 80053e4:	f04f 0000 	mov.w	r0, #0
 80053e8:	f04f 0100 	mov.w	r1, #0
 80053ec:	0299      	lsls	r1, r3, #10
 80053ee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80053f2:	0290      	lsls	r0, r2, #10
 80053f4:	4602      	mov	r2, r0
 80053f6:	460b      	mov	r3, r1
 80053f8:	4610      	mov	r0, r2
 80053fa:	4619      	mov	r1, r3
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	461a      	mov	r2, r3
 8005400:	f04f 0300 	mov.w	r3, #0
 8005404:	f7fb fc40 	bl	8000c88 <__aeabi_uldivmod>
 8005408:	4602      	mov	r2, r0
 800540a:	460b      	mov	r3, r1
 800540c:	4613      	mov	r3, r2
 800540e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005410:	4b0a      	ldr	r3, [pc, #40]	; (800543c <HAL_RCC_GetSysClockFreq+0x358>)
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	0f1b      	lsrs	r3, r3, #28
 8005416:	f003 0307 	and.w	r3, r3, #7
 800541a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800541c:	69fa      	ldr	r2, [r7, #28]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	fbb2 f3f3 	udiv	r3, r2, r3
 8005424:	61bb      	str	r3, [r7, #24]
      break;
 8005426:	e002      	b.n	800542e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005428:	4b05      	ldr	r3, [pc, #20]	; (8005440 <HAL_RCC_GetSysClockFreq+0x35c>)
 800542a:	61bb      	str	r3, [r7, #24]
      break;
 800542c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800542e:	69bb      	ldr	r3, [r7, #24]
}
 8005430:	4618      	mov	r0, r3
 8005432:	3720      	adds	r7, #32
 8005434:	46bd      	mov	sp, r7
 8005436:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800543a:	bf00      	nop
 800543c:	40023800 	.word	0x40023800
 8005440:	00f42400 	.word	0x00f42400
 8005444:	007a1200 	.word	0x007a1200

08005448 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b086      	sub	sp, #24
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e28d      	b.n	8005976 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b00      	cmp	r3, #0
 8005464:	f000 8083 	beq.w	800556e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005468:	4b94      	ldr	r3, [pc, #592]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f003 030c 	and.w	r3, r3, #12
 8005470:	2b04      	cmp	r3, #4
 8005472:	d019      	beq.n	80054a8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005474:	4b91      	ldr	r3, [pc, #580]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800547c:	2b08      	cmp	r3, #8
 800547e:	d106      	bne.n	800548e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005480:	4b8e      	ldr	r3, [pc, #568]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005488:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800548c:	d00c      	beq.n	80054a8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800548e:	4b8b      	ldr	r3, [pc, #556]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005496:	2b0c      	cmp	r3, #12
 8005498:	d112      	bne.n	80054c0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800549a:	4b88      	ldr	r3, [pc, #544]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054a6:	d10b      	bne.n	80054c0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054a8:	4b84      	ldr	r3, [pc, #528]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d05b      	beq.n	800556c <HAL_RCC_OscConfig+0x124>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d157      	bne.n	800556c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e25a      	b.n	8005976 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054c8:	d106      	bne.n	80054d8 <HAL_RCC_OscConfig+0x90>
 80054ca:	4b7c      	ldr	r3, [pc, #496]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a7b      	ldr	r2, [pc, #492]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 80054d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054d4:	6013      	str	r3, [r2, #0]
 80054d6:	e01d      	b.n	8005514 <HAL_RCC_OscConfig+0xcc>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054e0:	d10c      	bne.n	80054fc <HAL_RCC_OscConfig+0xb4>
 80054e2:	4b76      	ldr	r3, [pc, #472]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a75      	ldr	r2, [pc, #468]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 80054e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054ec:	6013      	str	r3, [r2, #0]
 80054ee:	4b73      	ldr	r3, [pc, #460]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a72      	ldr	r2, [pc, #456]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 80054f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054f8:	6013      	str	r3, [r2, #0]
 80054fa:	e00b      	b.n	8005514 <HAL_RCC_OscConfig+0xcc>
 80054fc:	4b6f      	ldr	r3, [pc, #444]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a6e      	ldr	r2, [pc, #440]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 8005502:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005506:	6013      	str	r3, [r2, #0]
 8005508:	4b6c      	ldr	r3, [pc, #432]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a6b      	ldr	r2, [pc, #428]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 800550e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005512:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d013      	beq.n	8005544 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800551c:	f7fd f8f2 	bl	8002704 <HAL_GetTick>
 8005520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005522:	e008      	b.n	8005536 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005524:	f7fd f8ee 	bl	8002704 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	2b64      	cmp	r3, #100	; 0x64
 8005530:	d901      	bls.n	8005536 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e21f      	b.n	8005976 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005536:	4b61      	ldr	r3, [pc, #388]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d0f0      	beq.n	8005524 <HAL_RCC_OscConfig+0xdc>
 8005542:	e014      	b.n	800556e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005544:	f7fd f8de 	bl	8002704 <HAL_GetTick>
 8005548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800554a:	e008      	b.n	800555e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800554c:	f7fd f8da 	bl	8002704 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	2b64      	cmp	r3, #100	; 0x64
 8005558:	d901      	bls.n	800555e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e20b      	b.n	8005976 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800555e:	4b57      	ldr	r3, [pc, #348]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1f0      	bne.n	800554c <HAL_RCC_OscConfig+0x104>
 800556a:	e000      	b.n	800556e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800556c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0302 	and.w	r3, r3, #2
 8005576:	2b00      	cmp	r3, #0
 8005578:	d06f      	beq.n	800565a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800557a:	4b50      	ldr	r3, [pc, #320]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f003 030c 	and.w	r3, r3, #12
 8005582:	2b00      	cmp	r3, #0
 8005584:	d017      	beq.n	80055b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005586:	4b4d      	ldr	r3, [pc, #308]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800558e:	2b08      	cmp	r3, #8
 8005590:	d105      	bne.n	800559e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005592:	4b4a      	ldr	r3, [pc, #296]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00b      	beq.n	80055b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800559e:	4b47      	ldr	r3, [pc, #284]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80055a6:	2b0c      	cmp	r3, #12
 80055a8:	d11c      	bne.n	80055e4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055aa:	4b44      	ldr	r3, [pc, #272]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d116      	bne.n	80055e4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055b6:	4b41      	ldr	r3, [pc, #260]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d005      	beq.n	80055ce <HAL_RCC_OscConfig+0x186>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d001      	beq.n	80055ce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e1d3      	b.n	8005976 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055ce:	4b3b      	ldr	r3, [pc, #236]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	00db      	lsls	r3, r3, #3
 80055dc:	4937      	ldr	r1, [pc, #220]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055e2:	e03a      	b.n	800565a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d020      	beq.n	800562e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055ec:	4b34      	ldr	r3, [pc, #208]	; (80056c0 <HAL_RCC_OscConfig+0x278>)
 80055ee:	2201      	movs	r2, #1
 80055f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f2:	f7fd f887 	bl	8002704 <HAL_GetTick>
 80055f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055f8:	e008      	b.n	800560c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055fa:	f7fd f883 	bl	8002704 <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	2b02      	cmp	r3, #2
 8005606:	d901      	bls.n	800560c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e1b4      	b.n	8005976 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800560c:	4b2b      	ldr	r3, [pc, #172]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	2b00      	cmp	r3, #0
 8005616:	d0f0      	beq.n	80055fa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005618:	4b28      	ldr	r3, [pc, #160]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	4925      	ldr	r1, [pc, #148]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 8005628:	4313      	orrs	r3, r2
 800562a:	600b      	str	r3, [r1, #0]
 800562c:	e015      	b.n	800565a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800562e:	4b24      	ldr	r3, [pc, #144]	; (80056c0 <HAL_RCC_OscConfig+0x278>)
 8005630:	2200      	movs	r2, #0
 8005632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005634:	f7fd f866 	bl	8002704 <HAL_GetTick>
 8005638:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800563a:	e008      	b.n	800564e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800563c:	f7fd f862 	bl	8002704 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b02      	cmp	r3, #2
 8005648:	d901      	bls.n	800564e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e193      	b.n	8005976 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800564e:	4b1b      	ldr	r3, [pc, #108]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1f0      	bne.n	800563c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0308 	and.w	r3, r3, #8
 8005662:	2b00      	cmp	r3, #0
 8005664:	d036      	beq.n	80056d4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d016      	beq.n	800569c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800566e:	4b15      	ldr	r3, [pc, #84]	; (80056c4 <HAL_RCC_OscConfig+0x27c>)
 8005670:	2201      	movs	r2, #1
 8005672:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005674:	f7fd f846 	bl	8002704 <HAL_GetTick>
 8005678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800567a:	e008      	b.n	800568e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800567c:	f7fd f842 	bl	8002704 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	2b02      	cmp	r3, #2
 8005688:	d901      	bls.n	800568e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e173      	b.n	8005976 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800568e:	4b0b      	ldr	r3, [pc, #44]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 8005690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	2b00      	cmp	r3, #0
 8005698:	d0f0      	beq.n	800567c <HAL_RCC_OscConfig+0x234>
 800569a:	e01b      	b.n	80056d4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800569c:	4b09      	ldr	r3, [pc, #36]	; (80056c4 <HAL_RCC_OscConfig+0x27c>)
 800569e:	2200      	movs	r2, #0
 80056a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056a2:	f7fd f82f 	bl	8002704 <HAL_GetTick>
 80056a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056a8:	e00e      	b.n	80056c8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056aa:	f7fd f82b 	bl	8002704 <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d907      	bls.n	80056c8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e15c      	b.n	8005976 <HAL_RCC_OscConfig+0x52e>
 80056bc:	40023800 	.word	0x40023800
 80056c0:	42470000 	.word	0x42470000
 80056c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056c8:	4b8a      	ldr	r3, [pc, #552]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 80056ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056cc:	f003 0302 	and.w	r3, r3, #2
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1ea      	bne.n	80056aa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0304 	and.w	r3, r3, #4
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f000 8097 	beq.w	8005810 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056e2:	2300      	movs	r3, #0
 80056e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056e6:	4b83      	ldr	r3, [pc, #524]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 80056e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10f      	bne.n	8005712 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056f2:	2300      	movs	r3, #0
 80056f4:	60bb      	str	r3, [r7, #8]
 80056f6:	4b7f      	ldr	r3, [pc, #508]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 80056f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fa:	4a7e      	ldr	r2, [pc, #504]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 80056fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005700:	6413      	str	r3, [r2, #64]	; 0x40
 8005702:	4b7c      	ldr	r3, [pc, #496]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 8005704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800570a:	60bb      	str	r3, [r7, #8]
 800570c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800570e:	2301      	movs	r3, #1
 8005710:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005712:	4b79      	ldr	r3, [pc, #484]	; (80058f8 <HAL_RCC_OscConfig+0x4b0>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800571a:	2b00      	cmp	r3, #0
 800571c:	d118      	bne.n	8005750 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800571e:	4b76      	ldr	r3, [pc, #472]	; (80058f8 <HAL_RCC_OscConfig+0x4b0>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a75      	ldr	r2, [pc, #468]	; (80058f8 <HAL_RCC_OscConfig+0x4b0>)
 8005724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005728:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800572a:	f7fc ffeb 	bl	8002704 <HAL_GetTick>
 800572e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005730:	e008      	b.n	8005744 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005732:	f7fc ffe7 	bl	8002704 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	2b02      	cmp	r3, #2
 800573e:	d901      	bls.n	8005744 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e118      	b.n	8005976 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005744:	4b6c      	ldr	r3, [pc, #432]	; (80058f8 <HAL_RCC_OscConfig+0x4b0>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800574c:	2b00      	cmp	r3, #0
 800574e:	d0f0      	beq.n	8005732 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d106      	bne.n	8005766 <HAL_RCC_OscConfig+0x31e>
 8005758:	4b66      	ldr	r3, [pc, #408]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 800575a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800575c:	4a65      	ldr	r2, [pc, #404]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 800575e:	f043 0301 	orr.w	r3, r3, #1
 8005762:	6713      	str	r3, [r2, #112]	; 0x70
 8005764:	e01c      	b.n	80057a0 <HAL_RCC_OscConfig+0x358>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	2b05      	cmp	r3, #5
 800576c:	d10c      	bne.n	8005788 <HAL_RCC_OscConfig+0x340>
 800576e:	4b61      	ldr	r3, [pc, #388]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 8005770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005772:	4a60      	ldr	r2, [pc, #384]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 8005774:	f043 0304 	orr.w	r3, r3, #4
 8005778:	6713      	str	r3, [r2, #112]	; 0x70
 800577a:	4b5e      	ldr	r3, [pc, #376]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 800577c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800577e:	4a5d      	ldr	r2, [pc, #372]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 8005780:	f043 0301 	orr.w	r3, r3, #1
 8005784:	6713      	str	r3, [r2, #112]	; 0x70
 8005786:	e00b      	b.n	80057a0 <HAL_RCC_OscConfig+0x358>
 8005788:	4b5a      	ldr	r3, [pc, #360]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 800578a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800578c:	4a59      	ldr	r2, [pc, #356]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 800578e:	f023 0301 	bic.w	r3, r3, #1
 8005792:	6713      	str	r3, [r2, #112]	; 0x70
 8005794:	4b57      	ldr	r3, [pc, #348]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 8005796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005798:	4a56      	ldr	r2, [pc, #344]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 800579a:	f023 0304 	bic.w	r3, r3, #4
 800579e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d015      	beq.n	80057d4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057a8:	f7fc ffac 	bl	8002704 <HAL_GetTick>
 80057ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057ae:	e00a      	b.n	80057c6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057b0:	f7fc ffa8 	bl	8002704 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80057be:	4293      	cmp	r3, r2
 80057c0:	d901      	bls.n	80057c6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e0d7      	b.n	8005976 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057c6:	4b4b      	ldr	r3, [pc, #300]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 80057c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d0ee      	beq.n	80057b0 <HAL_RCC_OscConfig+0x368>
 80057d2:	e014      	b.n	80057fe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057d4:	f7fc ff96 	bl	8002704 <HAL_GetTick>
 80057d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057da:	e00a      	b.n	80057f2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057dc:	f7fc ff92 	bl	8002704 <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d901      	bls.n	80057f2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e0c1      	b.n	8005976 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057f2:	4b40      	ldr	r3, [pc, #256]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 80057f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f6:	f003 0302 	and.w	r3, r3, #2
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1ee      	bne.n	80057dc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057fe:	7dfb      	ldrb	r3, [r7, #23]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d105      	bne.n	8005810 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005804:	4b3b      	ldr	r3, [pc, #236]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 8005806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005808:	4a3a      	ldr	r2, [pc, #232]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 800580a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800580e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	2b00      	cmp	r3, #0
 8005816:	f000 80ad 	beq.w	8005974 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800581a:	4b36      	ldr	r3, [pc, #216]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f003 030c 	and.w	r3, r3, #12
 8005822:	2b08      	cmp	r3, #8
 8005824:	d060      	beq.n	80058e8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	2b02      	cmp	r3, #2
 800582c:	d145      	bne.n	80058ba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800582e:	4b33      	ldr	r3, [pc, #204]	; (80058fc <HAL_RCC_OscConfig+0x4b4>)
 8005830:	2200      	movs	r2, #0
 8005832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005834:	f7fc ff66 	bl	8002704 <HAL_GetTick>
 8005838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800583a:	e008      	b.n	800584e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800583c:	f7fc ff62 	bl	8002704 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b02      	cmp	r3, #2
 8005848:	d901      	bls.n	800584e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e093      	b.n	8005976 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800584e:	4b29      	ldr	r3, [pc, #164]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1f0      	bne.n	800583c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	69da      	ldr	r2, [r3, #28]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	431a      	orrs	r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005868:	019b      	lsls	r3, r3, #6
 800586a:	431a      	orrs	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005870:	085b      	lsrs	r3, r3, #1
 8005872:	3b01      	subs	r3, #1
 8005874:	041b      	lsls	r3, r3, #16
 8005876:	431a      	orrs	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587c:	061b      	lsls	r3, r3, #24
 800587e:	431a      	orrs	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005884:	071b      	lsls	r3, r3, #28
 8005886:	491b      	ldr	r1, [pc, #108]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 8005888:	4313      	orrs	r3, r2
 800588a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800588c:	4b1b      	ldr	r3, [pc, #108]	; (80058fc <HAL_RCC_OscConfig+0x4b4>)
 800588e:	2201      	movs	r2, #1
 8005890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005892:	f7fc ff37 	bl	8002704 <HAL_GetTick>
 8005896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005898:	e008      	b.n	80058ac <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800589a:	f7fc ff33 	bl	8002704 <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d901      	bls.n	80058ac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e064      	b.n	8005976 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058ac:	4b11      	ldr	r3, [pc, #68]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d0f0      	beq.n	800589a <HAL_RCC_OscConfig+0x452>
 80058b8:	e05c      	b.n	8005974 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058ba:	4b10      	ldr	r3, [pc, #64]	; (80058fc <HAL_RCC_OscConfig+0x4b4>)
 80058bc:	2200      	movs	r2, #0
 80058be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c0:	f7fc ff20 	bl	8002704 <HAL_GetTick>
 80058c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058c6:	e008      	b.n	80058da <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058c8:	f7fc ff1c 	bl	8002704 <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d901      	bls.n	80058da <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e04d      	b.n	8005976 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058da:	4b06      	ldr	r3, [pc, #24]	; (80058f4 <HAL_RCC_OscConfig+0x4ac>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1f0      	bne.n	80058c8 <HAL_RCC_OscConfig+0x480>
 80058e6:	e045      	b.n	8005974 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d107      	bne.n	8005900 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e040      	b.n	8005976 <HAL_RCC_OscConfig+0x52e>
 80058f4:	40023800 	.word	0x40023800
 80058f8:	40007000 	.word	0x40007000
 80058fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005900:	4b1f      	ldr	r3, [pc, #124]	; (8005980 <HAL_RCC_OscConfig+0x538>)
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d030      	beq.n	8005970 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005918:	429a      	cmp	r2, r3
 800591a:	d129      	bne.n	8005970 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005926:	429a      	cmp	r2, r3
 8005928:	d122      	bne.n	8005970 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005930:	4013      	ands	r3, r2
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005936:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005938:	4293      	cmp	r3, r2
 800593a:	d119      	bne.n	8005970 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005946:	085b      	lsrs	r3, r3, #1
 8005948:	3b01      	subs	r3, #1
 800594a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800594c:	429a      	cmp	r2, r3
 800594e:	d10f      	bne.n	8005970 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800595c:	429a      	cmp	r2, r3
 800595e:	d107      	bne.n	8005970 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800596c:	429a      	cmp	r2, r3
 800596e:	d001      	beq.n	8005974 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e000      	b.n	8005976 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3718      	adds	r7, #24
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	40023800 	.word	0x40023800

08005984 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e041      	b.n	8005a1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d106      	bne.n	80059b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7fc fbc0 	bl	8002130 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2202      	movs	r2, #2
 80059b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	3304      	adds	r3, #4
 80059c0:	4619      	mov	r1, r3
 80059c2:	4610      	mov	r0, r2
 80059c4:	f000 fc7a 	bl	80062bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3708      	adds	r7, #8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
	...

08005a24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d001      	beq.n	8005a3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e04e      	b.n	8005ada <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2202      	movs	r2, #2
 8005a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68da      	ldr	r2, [r3, #12]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f042 0201 	orr.w	r2, r2, #1
 8005a52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a23      	ldr	r2, [pc, #140]	; (8005ae8 <HAL_TIM_Base_Start_IT+0xc4>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d022      	beq.n	8005aa4 <HAL_TIM_Base_Start_IT+0x80>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a66:	d01d      	beq.n	8005aa4 <HAL_TIM_Base_Start_IT+0x80>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a1f      	ldr	r2, [pc, #124]	; (8005aec <HAL_TIM_Base_Start_IT+0xc8>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d018      	beq.n	8005aa4 <HAL_TIM_Base_Start_IT+0x80>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a1e      	ldr	r2, [pc, #120]	; (8005af0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d013      	beq.n	8005aa4 <HAL_TIM_Base_Start_IT+0x80>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a1c      	ldr	r2, [pc, #112]	; (8005af4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d00e      	beq.n	8005aa4 <HAL_TIM_Base_Start_IT+0x80>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a1b      	ldr	r2, [pc, #108]	; (8005af8 <HAL_TIM_Base_Start_IT+0xd4>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d009      	beq.n	8005aa4 <HAL_TIM_Base_Start_IT+0x80>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a19      	ldr	r2, [pc, #100]	; (8005afc <HAL_TIM_Base_Start_IT+0xd8>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d004      	beq.n	8005aa4 <HAL_TIM_Base_Start_IT+0x80>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a18      	ldr	r2, [pc, #96]	; (8005b00 <HAL_TIM_Base_Start_IT+0xdc>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d111      	bne.n	8005ac8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f003 0307 	and.w	r3, r3, #7
 8005aae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2b06      	cmp	r3, #6
 8005ab4:	d010      	beq.n	8005ad8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f042 0201 	orr.w	r2, r2, #1
 8005ac4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ac6:	e007      	b.n	8005ad8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f042 0201 	orr.w	r2, r2, #1
 8005ad6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3714      	adds	r7, #20
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	40010000 	.word	0x40010000
 8005aec:	40000400 	.word	0x40000400
 8005af0:	40000800 	.word	0x40000800
 8005af4:	40000c00 	.word	0x40000c00
 8005af8:	40010400 	.word	0x40010400
 8005afc:	40014000 	.word	0x40014000
 8005b00:	40001800 	.word	0x40001800

08005b04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e041      	b.n	8005b9a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d106      	bne.n	8005b30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 f839 	bl	8005ba2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2202      	movs	r2, #2
 8005b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	3304      	adds	r3, #4
 8005b40:	4619      	mov	r1, r3
 8005b42:	4610      	mov	r0, r2
 8005b44:	f000 fbba 	bl	80062bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b083      	sub	sp, #12
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005baa:	bf00      	nop
 8005bac:	370c      	adds	r7, #12
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
	...

08005bb8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d109      	bne.n	8005bdc <HAL_TIM_PWM_Start+0x24>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	bf14      	ite	ne
 8005bd4:	2301      	movne	r3, #1
 8005bd6:	2300      	moveq	r3, #0
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	e022      	b.n	8005c22 <HAL_TIM_PWM_Start+0x6a>
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	2b04      	cmp	r3, #4
 8005be0:	d109      	bne.n	8005bf6 <HAL_TIM_PWM_Start+0x3e>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	bf14      	ite	ne
 8005bee:	2301      	movne	r3, #1
 8005bf0:	2300      	moveq	r3, #0
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	e015      	b.n	8005c22 <HAL_TIM_PWM_Start+0x6a>
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	2b08      	cmp	r3, #8
 8005bfa:	d109      	bne.n	8005c10 <HAL_TIM_PWM_Start+0x58>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	bf14      	ite	ne
 8005c08:	2301      	movne	r3, #1
 8005c0a:	2300      	moveq	r3, #0
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	e008      	b.n	8005c22 <HAL_TIM_PWM_Start+0x6a>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	bf14      	ite	ne
 8005c1c:	2301      	movne	r3, #1
 8005c1e:	2300      	moveq	r3, #0
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e07c      	b.n	8005d24 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d104      	bne.n	8005c3a <HAL_TIM_PWM_Start+0x82>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2202      	movs	r2, #2
 8005c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c38:	e013      	b.n	8005c62 <HAL_TIM_PWM_Start+0xaa>
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	2b04      	cmp	r3, #4
 8005c3e:	d104      	bne.n	8005c4a <HAL_TIM_PWM_Start+0x92>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2202      	movs	r2, #2
 8005c44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c48:	e00b      	b.n	8005c62 <HAL_TIM_PWM_Start+0xaa>
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	2b08      	cmp	r3, #8
 8005c4e:	d104      	bne.n	8005c5a <HAL_TIM_PWM_Start+0xa2>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2202      	movs	r2, #2
 8005c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c58:	e003      	b.n	8005c62 <HAL_TIM_PWM_Start+0xaa>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2202      	movs	r2, #2
 8005c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2201      	movs	r2, #1
 8005c68:	6839      	ldr	r1, [r7, #0]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f000 fe10 	bl	8006890 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a2d      	ldr	r2, [pc, #180]	; (8005d2c <HAL_TIM_PWM_Start+0x174>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d004      	beq.n	8005c84 <HAL_TIM_PWM_Start+0xcc>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a2c      	ldr	r2, [pc, #176]	; (8005d30 <HAL_TIM_PWM_Start+0x178>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d101      	bne.n	8005c88 <HAL_TIM_PWM_Start+0xd0>
 8005c84:	2301      	movs	r3, #1
 8005c86:	e000      	b.n	8005c8a <HAL_TIM_PWM_Start+0xd2>
 8005c88:	2300      	movs	r3, #0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d007      	beq.n	8005c9e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c9c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a22      	ldr	r2, [pc, #136]	; (8005d2c <HAL_TIM_PWM_Start+0x174>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d022      	beq.n	8005cee <HAL_TIM_PWM_Start+0x136>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cb0:	d01d      	beq.n	8005cee <HAL_TIM_PWM_Start+0x136>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a1f      	ldr	r2, [pc, #124]	; (8005d34 <HAL_TIM_PWM_Start+0x17c>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d018      	beq.n	8005cee <HAL_TIM_PWM_Start+0x136>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a1d      	ldr	r2, [pc, #116]	; (8005d38 <HAL_TIM_PWM_Start+0x180>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d013      	beq.n	8005cee <HAL_TIM_PWM_Start+0x136>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a1c      	ldr	r2, [pc, #112]	; (8005d3c <HAL_TIM_PWM_Start+0x184>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d00e      	beq.n	8005cee <HAL_TIM_PWM_Start+0x136>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a16      	ldr	r2, [pc, #88]	; (8005d30 <HAL_TIM_PWM_Start+0x178>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d009      	beq.n	8005cee <HAL_TIM_PWM_Start+0x136>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a18      	ldr	r2, [pc, #96]	; (8005d40 <HAL_TIM_PWM_Start+0x188>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d004      	beq.n	8005cee <HAL_TIM_PWM_Start+0x136>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a16      	ldr	r2, [pc, #88]	; (8005d44 <HAL_TIM_PWM_Start+0x18c>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d111      	bne.n	8005d12 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f003 0307 	and.w	r3, r3, #7
 8005cf8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2b06      	cmp	r3, #6
 8005cfe:	d010      	beq.n	8005d22 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f042 0201 	orr.w	r2, r2, #1
 8005d0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d10:	e007      	b.n	8005d22 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f042 0201 	orr.w	r2, r2, #1
 8005d20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3710      	adds	r7, #16
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	40010000 	.word	0x40010000
 8005d30:	40010400 	.word	0x40010400
 8005d34:	40000400 	.word	0x40000400
 8005d38:	40000800 	.word	0x40000800
 8005d3c:	40000c00 	.word	0x40000c00
 8005d40:	40014000 	.word	0x40014000
 8005d44:	40001800 	.word	0x40001800

08005d48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	f003 0302 	and.w	r3, r3, #2
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d122      	bne.n	8005da4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	f003 0302 	and.w	r3, r3, #2
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d11b      	bne.n	8005da4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f06f 0202 	mvn.w	r2, #2
 8005d74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	f003 0303 	and.w	r3, r3, #3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d003      	beq.n	8005d92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 fa77 	bl	800627e <HAL_TIM_IC_CaptureCallback>
 8005d90:	e005      	b.n	8005d9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 fa69 	bl	800626a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 fa7a 	bl	8006292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	f003 0304 	and.w	r3, r3, #4
 8005dae:	2b04      	cmp	r3, #4
 8005db0:	d122      	bne.n	8005df8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	f003 0304 	and.w	r3, r3, #4
 8005dbc:	2b04      	cmp	r3, #4
 8005dbe:	d11b      	bne.n	8005df8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f06f 0204 	mvn.w	r2, #4
 8005dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2202      	movs	r2, #2
 8005dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d003      	beq.n	8005de6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 fa4d 	bl	800627e <HAL_TIM_IC_CaptureCallback>
 8005de4:	e005      	b.n	8005df2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 fa3f 	bl	800626a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 fa50 	bl	8006292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	f003 0308 	and.w	r3, r3, #8
 8005e02:	2b08      	cmp	r3, #8
 8005e04:	d122      	bne.n	8005e4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	f003 0308 	and.w	r3, r3, #8
 8005e10:	2b08      	cmp	r3, #8
 8005e12:	d11b      	bne.n	8005e4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f06f 0208 	mvn.w	r2, #8
 8005e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2204      	movs	r2, #4
 8005e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	69db      	ldr	r3, [r3, #28]
 8005e2a:	f003 0303 	and.w	r3, r3, #3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d003      	beq.n	8005e3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 fa23 	bl	800627e <HAL_TIM_IC_CaptureCallback>
 8005e38:	e005      	b.n	8005e46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 fa15 	bl	800626a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 fa26 	bl	8006292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	f003 0310 	and.w	r3, r3, #16
 8005e56:	2b10      	cmp	r3, #16
 8005e58:	d122      	bne.n	8005ea0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	f003 0310 	and.w	r3, r3, #16
 8005e64:	2b10      	cmp	r3, #16
 8005e66:	d11b      	bne.n	8005ea0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f06f 0210 	mvn.w	r2, #16
 8005e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2208      	movs	r2, #8
 8005e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	69db      	ldr	r3, [r3, #28]
 8005e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d003      	beq.n	8005e8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 f9f9 	bl	800627e <HAL_TIM_IC_CaptureCallback>
 8005e8c:	e005      	b.n	8005e9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 f9eb 	bl	800626a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 f9fc 	bl	8006292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d10e      	bne.n	8005ecc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	f003 0301 	and.w	r3, r3, #1
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d107      	bne.n	8005ecc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f06f 0201 	mvn.w	r2, #1
 8005ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f7fb fe20 	bl	8001b0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ed6:	2b80      	cmp	r3, #128	; 0x80
 8005ed8:	d10e      	bne.n	8005ef8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ee4:	2b80      	cmp	r3, #128	; 0x80
 8005ee6:	d107      	bne.n	8005ef8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 fd78 	bl	80069e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f02:	2b40      	cmp	r3, #64	; 0x40
 8005f04:	d10e      	bne.n	8005f24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f10:	2b40      	cmp	r3, #64	; 0x40
 8005f12:	d107      	bne.n	8005f24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 f9c1 	bl	80062a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	f003 0320 	and.w	r3, r3, #32
 8005f2e:	2b20      	cmp	r3, #32
 8005f30:	d10e      	bne.n	8005f50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	f003 0320 	and.w	r3, r3, #32
 8005f3c:	2b20      	cmp	r3, #32
 8005f3e:	d107      	bne.n	8005f50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f06f 0220 	mvn.w	r2, #32
 8005f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 fd42 	bl	80069d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f50:	bf00      	nop
 8005f52:	3708      	adds	r7, #8
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b086      	sub	sp, #24
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f64:	2300      	movs	r3, #0
 8005f66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d101      	bne.n	8005f76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f72:	2302      	movs	r3, #2
 8005f74:	e0ae      	b.n	80060d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2b0c      	cmp	r3, #12
 8005f82:	f200 809f 	bhi.w	80060c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005f86:	a201      	add	r2, pc, #4	; (adr r2, 8005f8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f8c:	08005fc1 	.word	0x08005fc1
 8005f90:	080060c5 	.word	0x080060c5
 8005f94:	080060c5 	.word	0x080060c5
 8005f98:	080060c5 	.word	0x080060c5
 8005f9c:	08006001 	.word	0x08006001
 8005fa0:	080060c5 	.word	0x080060c5
 8005fa4:	080060c5 	.word	0x080060c5
 8005fa8:	080060c5 	.word	0x080060c5
 8005fac:	08006043 	.word	0x08006043
 8005fb0:	080060c5 	.word	0x080060c5
 8005fb4:	080060c5 	.word	0x080060c5
 8005fb8:	080060c5 	.word	0x080060c5
 8005fbc:	08006083 	.word	0x08006083
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68b9      	ldr	r1, [r7, #8]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f000 fa18 	bl	80063fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	699a      	ldr	r2, [r3, #24]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f042 0208 	orr.w	r2, r2, #8
 8005fda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	699a      	ldr	r2, [r3, #24]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f022 0204 	bic.w	r2, r2, #4
 8005fea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6999      	ldr	r1, [r3, #24]
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	691a      	ldr	r2, [r3, #16]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	430a      	orrs	r2, r1
 8005ffc:	619a      	str	r2, [r3, #24]
      break;
 8005ffe:	e064      	b.n	80060ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68b9      	ldr	r1, [r7, #8]
 8006006:	4618      	mov	r0, r3
 8006008:	f000 fa68 	bl	80064dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	699a      	ldr	r2, [r3, #24]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800601a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	699a      	ldr	r2, [r3, #24]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800602a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	6999      	ldr	r1, [r3, #24]
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	021a      	lsls	r2, r3, #8
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	430a      	orrs	r2, r1
 800603e:	619a      	str	r2, [r3, #24]
      break;
 8006040:	e043      	b.n	80060ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68b9      	ldr	r1, [r7, #8]
 8006048:	4618      	mov	r0, r3
 800604a:	f000 fabd 	bl	80065c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	69da      	ldr	r2, [r3, #28]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f042 0208 	orr.w	r2, r2, #8
 800605c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	69da      	ldr	r2, [r3, #28]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f022 0204 	bic.w	r2, r2, #4
 800606c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	69d9      	ldr	r1, [r3, #28]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	691a      	ldr	r2, [r3, #16]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	430a      	orrs	r2, r1
 800607e:	61da      	str	r2, [r3, #28]
      break;
 8006080:	e023      	b.n	80060ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68b9      	ldr	r1, [r7, #8]
 8006088:	4618      	mov	r0, r3
 800608a:	f000 fb11 	bl	80066b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	69da      	ldr	r2, [r3, #28]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800609c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	69da      	ldr	r2, [r3, #28]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	69d9      	ldr	r1, [r3, #28]
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	021a      	lsls	r2, r3, #8
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	430a      	orrs	r2, r1
 80060c0:	61da      	str	r2, [r3, #28]
      break;
 80060c2:	e002      	b.n	80060ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	75fb      	strb	r3, [r7, #23]
      break;
 80060c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3718      	adds	r7, #24
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060e6:	2300      	movs	r3, #0
 80060e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d101      	bne.n	80060f8 <HAL_TIM_ConfigClockSource+0x1c>
 80060f4:	2302      	movs	r3, #2
 80060f6:	e0b4      	b.n	8006262 <HAL_TIM_ConfigClockSource+0x186>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2202      	movs	r2, #2
 8006104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006116:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800611e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006130:	d03e      	beq.n	80061b0 <HAL_TIM_ConfigClockSource+0xd4>
 8006132:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006136:	f200 8087 	bhi.w	8006248 <HAL_TIM_ConfigClockSource+0x16c>
 800613a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800613e:	f000 8086 	beq.w	800624e <HAL_TIM_ConfigClockSource+0x172>
 8006142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006146:	d87f      	bhi.n	8006248 <HAL_TIM_ConfigClockSource+0x16c>
 8006148:	2b70      	cmp	r3, #112	; 0x70
 800614a:	d01a      	beq.n	8006182 <HAL_TIM_ConfigClockSource+0xa6>
 800614c:	2b70      	cmp	r3, #112	; 0x70
 800614e:	d87b      	bhi.n	8006248 <HAL_TIM_ConfigClockSource+0x16c>
 8006150:	2b60      	cmp	r3, #96	; 0x60
 8006152:	d050      	beq.n	80061f6 <HAL_TIM_ConfigClockSource+0x11a>
 8006154:	2b60      	cmp	r3, #96	; 0x60
 8006156:	d877      	bhi.n	8006248 <HAL_TIM_ConfigClockSource+0x16c>
 8006158:	2b50      	cmp	r3, #80	; 0x50
 800615a:	d03c      	beq.n	80061d6 <HAL_TIM_ConfigClockSource+0xfa>
 800615c:	2b50      	cmp	r3, #80	; 0x50
 800615e:	d873      	bhi.n	8006248 <HAL_TIM_ConfigClockSource+0x16c>
 8006160:	2b40      	cmp	r3, #64	; 0x40
 8006162:	d058      	beq.n	8006216 <HAL_TIM_ConfigClockSource+0x13a>
 8006164:	2b40      	cmp	r3, #64	; 0x40
 8006166:	d86f      	bhi.n	8006248 <HAL_TIM_ConfigClockSource+0x16c>
 8006168:	2b30      	cmp	r3, #48	; 0x30
 800616a:	d064      	beq.n	8006236 <HAL_TIM_ConfigClockSource+0x15a>
 800616c:	2b30      	cmp	r3, #48	; 0x30
 800616e:	d86b      	bhi.n	8006248 <HAL_TIM_ConfigClockSource+0x16c>
 8006170:	2b20      	cmp	r3, #32
 8006172:	d060      	beq.n	8006236 <HAL_TIM_ConfigClockSource+0x15a>
 8006174:	2b20      	cmp	r3, #32
 8006176:	d867      	bhi.n	8006248 <HAL_TIM_ConfigClockSource+0x16c>
 8006178:	2b00      	cmp	r3, #0
 800617a:	d05c      	beq.n	8006236 <HAL_TIM_ConfigClockSource+0x15a>
 800617c:	2b10      	cmp	r3, #16
 800617e:	d05a      	beq.n	8006236 <HAL_TIM_ConfigClockSource+0x15a>
 8006180:	e062      	b.n	8006248 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6818      	ldr	r0, [r3, #0]
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	6899      	ldr	r1, [r3, #8]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	685a      	ldr	r2, [r3, #4]
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	f000 fb5d 	bl	8006850 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80061a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	609a      	str	r2, [r3, #8]
      break;
 80061ae:	e04f      	b.n	8006250 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6818      	ldr	r0, [r3, #0]
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	6899      	ldr	r1, [r3, #8]
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	685a      	ldr	r2, [r3, #4]
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	f000 fb46 	bl	8006850 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	689a      	ldr	r2, [r3, #8]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061d2:	609a      	str	r2, [r3, #8]
      break;
 80061d4:	e03c      	b.n	8006250 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6818      	ldr	r0, [r3, #0]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	6859      	ldr	r1, [r3, #4]
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	461a      	mov	r2, r3
 80061e4:	f000 faba 	bl	800675c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2150      	movs	r1, #80	; 0x50
 80061ee:	4618      	mov	r0, r3
 80061f0:	f000 fb13 	bl	800681a <TIM_ITRx_SetConfig>
      break;
 80061f4:	e02c      	b.n	8006250 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6818      	ldr	r0, [r3, #0]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	6859      	ldr	r1, [r3, #4]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	461a      	mov	r2, r3
 8006204:	f000 fad9 	bl	80067ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2160      	movs	r1, #96	; 0x60
 800620e:	4618      	mov	r0, r3
 8006210:	f000 fb03 	bl	800681a <TIM_ITRx_SetConfig>
      break;
 8006214:	e01c      	b.n	8006250 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6818      	ldr	r0, [r3, #0]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	6859      	ldr	r1, [r3, #4]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	461a      	mov	r2, r3
 8006224:	f000 fa9a 	bl	800675c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2140      	movs	r1, #64	; 0x40
 800622e:	4618      	mov	r0, r3
 8006230:	f000 faf3 	bl	800681a <TIM_ITRx_SetConfig>
      break;
 8006234:	e00c      	b.n	8006250 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4619      	mov	r1, r3
 8006240:	4610      	mov	r0, r2
 8006242:	f000 faea 	bl	800681a <TIM_ITRx_SetConfig>
      break;
 8006246:	e003      	b.n	8006250 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	73fb      	strb	r3, [r7, #15]
      break;
 800624c:	e000      	b.n	8006250 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800624e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006260:	7bfb      	ldrb	r3, [r7, #15]
}
 8006262:	4618      	mov	r0, r3
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800626a:	b480      	push	{r7}
 800626c:	b083      	sub	sp, #12
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006272:	bf00      	nop
 8006274:	370c      	adds	r7, #12
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr

0800627e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800627e:	b480      	push	{r7}
 8006280:	b083      	sub	sp, #12
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006286:	bf00      	nop
 8006288:	370c      	adds	r7, #12
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr

08006292 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006292:	b480      	push	{r7}
 8006294:	b083      	sub	sp, #12
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800629a:	bf00      	nop
 800629c:	370c      	adds	r7, #12
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr

080062a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062a6:	b480      	push	{r7}
 80062a8:	b083      	sub	sp, #12
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062ae:	bf00      	nop
 80062b0:	370c      	adds	r7, #12
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
	...

080062bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80062bc:	b480      	push	{r7}
 80062be:	b085      	sub	sp, #20
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a40      	ldr	r2, [pc, #256]	; (80063d0 <TIM_Base_SetConfig+0x114>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d013      	beq.n	80062fc <TIM_Base_SetConfig+0x40>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062da:	d00f      	beq.n	80062fc <TIM_Base_SetConfig+0x40>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a3d      	ldr	r2, [pc, #244]	; (80063d4 <TIM_Base_SetConfig+0x118>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d00b      	beq.n	80062fc <TIM_Base_SetConfig+0x40>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4a3c      	ldr	r2, [pc, #240]	; (80063d8 <TIM_Base_SetConfig+0x11c>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d007      	beq.n	80062fc <TIM_Base_SetConfig+0x40>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a3b      	ldr	r2, [pc, #236]	; (80063dc <TIM_Base_SetConfig+0x120>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d003      	beq.n	80062fc <TIM_Base_SetConfig+0x40>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a3a      	ldr	r2, [pc, #232]	; (80063e0 <TIM_Base_SetConfig+0x124>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d108      	bne.n	800630e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006302:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	4313      	orrs	r3, r2
 800630c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a2f      	ldr	r2, [pc, #188]	; (80063d0 <TIM_Base_SetConfig+0x114>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d02b      	beq.n	800636e <TIM_Base_SetConfig+0xb2>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800631c:	d027      	beq.n	800636e <TIM_Base_SetConfig+0xb2>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a2c      	ldr	r2, [pc, #176]	; (80063d4 <TIM_Base_SetConfig+0x118>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d023      	beq.n	800636e <TIM_Base_SetConfig+0xb2>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a2b      	ldr	r2, [pc, #172]	; (80063d8 <TIM_Base_SetConfig+0x11c>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d01f      	beq.n	800636e <TIM_Base_SetConfig+0xb2>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a2a      	ldr	r2, [pc, #168]	; (80063dc <TIM_Base_SetConfig+0x120>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d01b      	beq.n	800636e <TIM_Base_SetConfig+0xb2>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a29      	ldr	r2, [pc, #164]	; (80063e0 <TIM_Base_SetConfig+0x124>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d017      	beq.n	800636e <TIM_Base_SetConfig+0xb2>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a28      	ldr	r2, [pc, #160]	; (80063e4 <TIM_Base_SetConfig+0x128>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d013      	beq.n	800636e <TIM_Base_SetConfig+0xb2>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a27      	ldr	r2, [pc, #156]	; (80063e8 <TIM_Base_SetConfig+0x12c>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d00f      	beq.n	800636e <TIM_Base_SetConfig+0xb2>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a26      	ldr	r2, [pc, #152]	; (80063ec <TIM_Base_SetConfig+0x130>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d00b      	beq.n	800636e <TIM_Base_SetConfig+0xb2>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a25      	ldr	r2, [pc, #148]	; (80063f0 <TIM_Base_SetConfig+0x134>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d007      	beq.n	800636e <TIM_Base_SetConfig+0xb2>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a24      	ldr	r2, [pc, #144]	; (80063f4 <TIM_Base_SetConfig+0x138>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d003      	beq.n	800636e <TIM_Base_SetConfig+0xb2>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a23      	ldr	r2, [pc, #140]	; (80063f8 <TIM_Base_SetConfig+0x13c>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d108      	bne.n	8006380 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006374:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	4313      	orrs	r3, r2
 800637e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	695b      	ldr	r3, [r3, #20]
 800638a:	4313      	orrs	r3, r2
 800638c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	689a      	ldr	r2, [r3, #8]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a0a      	ldr	r2, [pc, #40]	; (80063d0 <TIM_Base_SetConfig+0x114>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d003      	beq.n	80063b4 <TIM_Base_SetConfig+0xf8>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a0c      	ldr	r2, [pc, #48]	; (80063e0 <TIM_Base_SetConfig+0x124>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d103      	bne.n	80063bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	691a      	ldr	r2, [r3, #16]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	615a      	str	r2, [r3, #20]
}
 80063c2:	bf00      	nop
 80063c4:	3714      	adds	r7, #20
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop
 80063d0:	40010000 	.word	0x40010000
 80063d4:	40000400 	.word	0x40000400
 80063d8:	40000800 	.word	0x40000800
 80063dc:	40000c00 	.word	0x40000c00
 80063e0:	40010400 	.word	0x40010400
 80063e4:	40014000 	.word	0x40014000
 80063e8:	40014400 	.word	0x40014400
 80063ec:	40014800 	.word	0x40014800
 80063f0:	40001800 	.word	0x40001800
 80063f4:	40001c00 	.word	0x40001c00
 80063f8:	40002000 	.word	0x40002000

080063fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b087      	sub	sp, #28
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	f023 0201 	bic.w	r2, r3, #1
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800642a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f023 0303 	bic.w	r3, r3, #3
 8006432:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	4313      	orrs	r3, r2
 800643c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	f023 0302 	bic.w	r3, r3, #2
 8006444:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	697a      	ldr	r2, [r7, #20]
 800644c:	4313      	orrs	r3, r2
 800644e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a20      	ldr	r2, [pc, #128]	; (80064d4 <TIM_OC1_SetConfig+0xd8>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d003      	beq.n	8006460 <TIM_OC1_SetConfig+0x64>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a1f      	ldr	r2, [pc, #124]	; (80064d8 <TIM_OC1_SetConfig+0xdc>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d10c      	bne.n	800647a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	f023 0308 	bic.w	r3, r3, #8
 8006466:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	697a      	ldr	r2, [r7, #20]
 800646e:	4313      	orrs	r3, r2
 8006470:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	f023 0304 	bic.w	r3, r3, #4
 8006478:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a15      	ldr	r2, [pc, #84]	; (80064d4 <TIM_OC1_SetConfig+0xd8>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d003      	beq.n	800648a <TIM_OC1_SetConfig+0x8e>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a14      	ldr	r2, [pc, #80]	; (80064d8 <TIM_OC1_SetConfig+0xdc>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d111      	bne.n	80064ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006490:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006498:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	695b      	ldr	r3, [r3, #20]
 800649e:	693a      	ldr	r2, [r7, #16]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	699b      	ldr	r3, [r3, #24]
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	685a      	ldr	r2, [r3, #4]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	621a      	str	r2, [r3, #32]
}
 80064c8:	bf00      	nop
 80064ca:	371c      	adds	r7, #28
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr
 80064d4:	40010000 	.word	0x40010000
 80064d8:	40010400 	.word	0x40010400

080064dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064dc:	b480      	push	{r7}
 80064de:	b087      	sub	sp, #28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	f023 0210 	bic.w	r2, r3, #16
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800650a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006512:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	021b      	lsls	r3, r3, #8
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	4313      	orrs	r3, r2
 800651e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	f023 0320 	bic.w	r3, r3, #32
 8006526:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	011b      	lsls	r3, r3, #4
 800652e:	697a      	ldr	r2, [r7, #20]
 8006530:	4313      	orrs	r3, r2
 8006532:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a22      	ldr	r2, [pc, #136]	; (80065c0 <TIM_OC2_SetConfig+0xe4>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d003      	beq.n	8006544 <TIM_OC2_SetConfig+0x68>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a21      	ldr	r2, [pc, #132]	; (80065c4 <TIM_OC2_SetConfig+0xe8>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d10d      	bne.n	8006560 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800654a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	011b      	lsls	r3, r3, #4
 8006552:	697a      	ldr	r2, [r7, #20]
 8006554:	4313      	orrs	r3, r2
 8006556:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800655e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a17      	ldr	r2, [pc, #92]	; (80065c0 <TIM_OC2_SetConfig+0xe4>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d003      	beq.n	8006570 <TIM_OC2_SetConfig+0x94>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a16      	ldr	r2, [pc, #88]	; (80065c4 <TIM_OC2_SetConfig+0xe8>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d113      	bne.n	8006598 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006576:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800657e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	695b      	ldr	r3, [r3, #20]
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	4313      	orrs	r3, r2
 800658a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	693a      	ldr	r2, [r7, #16]
 8006594:	4313      	orrs	r3, r2
 8006596:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	693a      	ldr	r2, [r7, #16]
 800659c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	685a      	ldr	r2, [r3, #4]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	697a      	ldr	r2, [r7, #20]
 80065b0:	621a      	str	r2, [r3, #32]
}
 80065b2:	bf00      	nop
 80065b4:	371c      	adds	r7, #28
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop
 80065c0:	40010000 	.word	0x40010000
 80065c4:	40010400 	.word	0x40010400

080065c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b087      	sub	sp, #28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	69db      	ldr	r3, [r3, #28]
 80065ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f023 0303 	bic.w	r3, r3, #3
 80065fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	4313      	orrs	r3, r2
 8006608:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006610:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	021b      	lsls	r3, r3, #8
 8006618:	697a      	ldr	r2, [r7, #20]
 800661a:	4313      	orrs	r3, r2
 800661c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a21      	ldr	r2, [pc, #132]	; (80066a8 <TIM_OC3_SetConfig+0xe0>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d003      	beq.n	800662e <TIM_OC3_SetConfig+0x66>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a20      	ldr	r2, [pc, #128]	; (80066ac <TIM_OC3_SetConfig+0xe4>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d10d      	bne.n	800664a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006634:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	021b      	lsls	r3, r3, #8
 800663c:	697a      	ldr	r2, [r7, #20]
 800663e:	4313      	orrs	r3, r2
 8006640:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006648:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a16      	ldr	r2, [pc, #88]	; (80066a8 <TIM_OC3_SetConfig+0xe0>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d003      	beq.n	800665a <TIM_OC3_SetConfig+0x92>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a15      	ldr	r2, [pc, #84]	; (80066ac <TIM_OC3_SetConfig+0xe4>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d113      	bne.n	8006682 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006660:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006668:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	695b      	ldr	r3, [r3, #20]
 800666e:	011b      	lsls	r3, r3, #4
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	4313      	orrs	r3, r2
 8006674:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	011b      	lsls	r3, r3, #4
 800667c:	693a      	ldr	r2, [r7, #16]
 800667e:	4313      	orrs	r3, r2
 8006680:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	693a      	ldr	r2, [r7, #16]
 8006686:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	685a      	ldr	r2, [r3, #4]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	697a      	ldr	r2, [r7, #20]
 800669a:	621a      	str	r2, [r3, #32]
}
 800669c:	bf00      	nop
 800669e:	371c      	adds	r7, #28
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr
 80066a8:	40010000 	.word	0x40010000
 80066ac:	40010400 	.word	0x40010400

080066b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b087      	sub	sp, #28
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a1b      	ldr	r3, [r3, #32]
 80066ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	69db      	ldr	r3, [r3, #28]
 80066d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	021b      	lsls	r3, r3, #8
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	031b      	lsls	r3, r3, #12
 8006702:	693a      	ldr	r2, [r7, #16]
 8006704:	4313      	orrs	r3, r2
 8006706:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a12      	ldr	r2, [pc, #72]	; (8006754 <TIM_OC4_SetConfig+0xa4>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d003      	beq.n	8006718 <TIM_OC4_SetConfig+0x68>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a11      	ldr	r2, [pc, #68]	; (8006758 <TIM_OC4_SetConfig+0xa8>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d109      	bne.n	800672c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800671e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	695b      	ldr	r3, [r3, #20]
 8006724:	019b      	lsls	r3, r3, #6
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	4313      	orrs	r3, r2
 800672a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	697a      	ldr	r2, [r7, #20]
 8006730:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	685a      	ldr	r2, [r3, #4]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	621a      	str	r2, [r3, #32]
}
 8006746:	bf00      	nop
 8006748:	371c      	adds	r7, #28
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	40010000 	.word	0x40010000
 8006758:	40010400 	.word	0x40010400

0800675c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800675c:	b480      	push	{r7}
 800675e:	b087      	sub	sp, #28
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6a1b      	ldr	r3, [r3, #32]
 800676c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6a1b      	ldr	r3, [r3, #32]
 8006772:	f023 0201 	bic.w	r2, r3, #1
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006786:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	011b      	lsls	r3, r3, #4
 800678c:	693a      	ldr	r2, [r7, #16]
 800678e:	4313      	orrs	r3, r2
 8006790:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	f023 030a 	bic.w	r3, r3, #10
 8006798:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800679a:	697a      	ldr	r2, [r7, #20]
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	4313      	orrs	r3, r2
 80067a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	697a      	ldr	r2, [r7, #20]
 80067ac:	621a      	str	r2, [r3, #32]
}
 80067ae:	bf00      	nop
 80067b0:	371c      	adds	r7, #28
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr

080067ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067ba:	b480      	push	{r7}
 80067bc:	b087      	sub	sp, #28
 80067be:	af00      	add	r7, sp, #0
 80067c0:	60f8      	str	r0, [r7, #12]
 80067c2:	60b9      	str	r1, [r7, #8]
 80067c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6a1b      	ldr	r3, [r3, #32]
 80067ca:	f023 0210 	bic.w	r2, r3, #16
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	699b      	ldr	r3, [r3, #24]
 80067d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6a1b      	ldr	r3, [r3, #32]
 80067dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	031b      	lsls	r3, r3, #12
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80067f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	011b      	lsls	r3, r3, #4
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	4313      	orrs	r3, r2
 8006800:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	697a      	ldr	r2, [r7, #20]
 8006806:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	693a      	ldr	r2, [r7, #16]
 800680c:	621a      	str	r2, [r3, #32]
}
 800680e:	bf00      	nop
 8006810:	371c      	adds	r7, #28
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr

0800681a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800681a:	b480      	push	{r7}
 800681c:	b085      	sub	sp, #20
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
 8006822:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006830:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006832:	683a      	ldr	r2, [r7, #0]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	4313      	orrs	r3, r2
 8006838:	f043 0307 	orr.w	r3, r3, #7
 800683c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	609a      	str	r2, [r3, #8]
}
 8006844:	bf00      	nop
 8006846:	3714      	adds	r7, #20
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006850:	b480      	push	{r7}
 8006852:	b087      	sub	sp, #28
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	607a      	str	r2, [r7, #4]
 800685c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800686a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	021a      	lsls	r2, r3, #8
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	431a      	orrs	r2, r3
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	4313      	orrs	r3, r2
 8006878:	697a      	ldr	r2, [r7, #20]
 800687a:	4313      	orrs	r3, r2
 800687c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	697a      	ldr	r2, [r7, #20]
 8006882:	609a      	str	r2, [r3, #8]
}
 8006884:	bf00      	nop
 8006886:	371c      	adds	r7, #28
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006890:	b480      	push	{r7}
 8006892:	b087      	sub	sp, #28
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	f003 031f 	and.w	r3, r3, #31
 80068a2:	2201      	movs	r2, #1
 80068a4:	fa02 f303 	lsl.w	r3, r2, r3
 80068a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6a1a      	ldr	r2, [r3, #32]
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	43db      	mvns	r3, r3
 80068b2:	401a      	ands	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6a1a      	ldr	r2, [r3, #32]
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	f003 031f 	and.w	r3, r3, #31
 80068c2:	6879      	ldr	r1, [r7, #4]
 80068c4:	fa01 f303 	lsl.w	r3, r1, r3
 80068c8:	431a      	orrs	r2, r3
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	621a      	str	r2, [r3, #32]
}
 80068ce:	bf00      	nop
 80068d0:	371c      	adds	r7, #28
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
	...

080068dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d101      	bne.n	80068f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068f0:	2302      	movs	r3, #2
 80068f2:	e05a      	b.n	80069aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2202      	movs	r2, #2
 8006900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800691a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	4313      	orrs	r3, r2
 8006924:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a21      	ldr	r2, [pc, #132]	; (80069b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d022      	beq.n	800697e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006940:	d01d      	beq.n	800697e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a1d      	ldr	r2, [pc, #116]	; (80069bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d018      	beq.n	800697e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a1b      	ldr	r2, [pc, #108]	; (80069c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d013      	beq.n	800697e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a1a      	ldr	r2, [pc, #104]	; (80069c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d00e      	beq.n	800697e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a18      	ldr	r2, [pc, #96]	; (80069c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d009      	beq.n	800697e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a17      	ldr	r2, [pc, #92]	; (80069cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d004      	beq.n	800697e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a15      	ldr	r2, [pc, #84]	; (80069d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d10c      	bne.n	8006998 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006984:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	68ba      	ldr	r2, [r7, #8]
 800698c:	4313      	orrs	r3, r2
 800698e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3714      	adds	r7, #20
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	40010000 	.word	0x40010000
 80069bc:	40000400 	.word	0x40000400
 80069c0:	40000800 	.word	0x40000800
 80069c4:	40000c00 	.word	0x40000c00
 80069c8:	40010400 	.word	0x40010400
 80069cc:	40014000 	.word	0x40014000
 80069d0:	40001800 	.word	0x40001800

080069d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069dc:	bf00      	nop
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069f0:	bf00      	nop
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d101      	bne.n	8006a0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e03f      	b.n	8006a8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d106      	bne.n	8006a28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f7fb fc16 	bl	8002254 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2224      	movs	r2, #36	; 0x24
 8006a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68da      	ldr	r2, [r3, #12]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 f929 	bl	8006c98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	691a      	ldr	r2, [r3, #16]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	695a      	ldr	r2, [r3, #20]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68da      	ldr	r2, [r3, #12]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2220      	movs	r2, #32
 8006a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2220      	movs	r2, #32
 8006a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3708      	adds	r7, #8
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b08a      	sub	sp, #40	; 0x28
 8006a9a:	af02      	add	r7, sp, #8
 8006a9c:	60f8      	str	r0, [r7, #12]
 8006a9e:	60b9      	str	r1, [r7, #8]
 8006aa0:	603b      	str	r3, [r7, #0]
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	2b20      	cmp	r3, #32
 8006ab4:	d17c      	bne.n	8006bb0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d002      	beq.n	8006ac2 <HAL_UART_Transmit+0x2c>
 8006abc:	88fb      	ldrh	r3, [r7, #6]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d101      	bne.n	8006ac6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e075      	b.n	8006bb2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d101      	bne.n	8006ad4 <HAL_UART_Transmit+0x3e>
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	e06e      	b.n	8006bb2 <HAL_UART_Transmit+0x11c>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2221      	movs	r2, #33	; 0x21
 8006ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006aea:	f7fb fe0b 	bl	8002704 <HAL_GetTick>
 8006aee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	88fa      	ldrh	r2, [r7, #6]
 8006af4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	88fa      	ldrh	r2, [r7, #6]
 8006afa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b04:	d108      	bne.n	8006b18 <HAL_UART_Transmit+0x82>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d104      	bne.n	8006b18 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	61bb      	str	r3, [r7, #24]
 8006b16:	e003      	b.n	8006b20 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006b28:	e02a      	b.n	8006b80 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	9300      	str	r3, [sp, #0]
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	2200      	movs	r2, #0
 8006b32:	2180      	movs	r1, #128	; 0x80
 8006b34:	68f8      	ldr	r0, [r7, #12]
 8006b36:	f000 f840 	bl	8006bba <UART_WaitOnFlagUntilTimeout>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d001      	beq.n	8006b44 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006b40:	2303      	movs	r3, #3
 8006b42:	e036      	b.n	8006bb2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d10b      	bne.n	8006b62 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	881b      	ldrh	r3, [r3, #0]
 8006b4e:	461a      	mov	r2, r3
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	3302      	adds	r3, #2
 8006b5e:	61bb      	str	r3, [r7, #24]
 8006b60:	e007      	b.n	8006b72 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	781a      	ldrb	r2, [r3, #0]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	3301      	adds	r3, #1
 8006b70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	3b01      	subs	r3, #1
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1cf      	bne.n	8006b2a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	9300      	str	r3, [sp, #0]
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	2200      	movs	r2, #0
 8006b92:	2140      	movs	r1, #64	; 0x40
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f000 f810 	bl	8006bba <UART_WaitOnFlagUntilTimeout>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d001      	beq.n	8006ba4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006ba0:	2303      	movs	r3, #3
 8006ba2:	e006      	b.n	8006bb2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2220      	movs	r2, #32
 8006ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006bac:	2300      	movs	r3, #0
 8006bae:	e000      	b.n	8006bb2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006bb0:	2302      	movs	r3, #2
  }
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3720      	adds	r7, #32
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}

08006bba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b090      	sub	sp, #64	; 0x40
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	60f8      	str	r0, [r7, #12]
 8006bc2:	60b9      	str	r1, [r7, #8]
 8006bc4:	603b      	str	r3, [r7, #0]
 8006bc6:	4613      	mov	r3, r2
 8006bc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bca:	e050      	b.n	8006c6e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd2:	d04c      	beq.n	8006c6e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006bd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d007      	beq.n	8006bea <UART_WaitOnFlagUntilTimeout+0x30>
 8006bda:	f7fb fd93 	bl	8002704 <HAL_GetTick>
 8006bde:	4602      	mov	r2, r0
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	1ad3      	subs	r3, r2, r3
 8006be4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d241      	bcs.n	8006c6e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	330c      	adds	r3, #12
 8006bf0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf4:	e853 3f00 	ldrex	r3, [r3]
 8006bf8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	330c      	adds	r3, #12
 8006c08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006c0a:	637a      	str	r2, [r7, #52]	; 0x34
 8006c0c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c12:	e841 2300 	strex	r3, r2, [r1]
 8006c16:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1e5      	bne.n	8006bea <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	3314      	adds	r3, #20
 8006c24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	e853 3f00 	ldrex	r3, [r3]
 8006c2c:	613b      	str	r3, [r7, #16]
   return(result);
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	f023 0301 	bic.w	r3, r3, #1
 8006c34:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	3314      	adds	r3, #20
 8006c3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c3e:	623a      	str	r2, [r7, #32]
 8006c40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c42:	69f9      	ldr	r1, [r7, #28]
 8006c44:	6a3a      	ldr	r2, [r7, #32]
 8006c46:	e841 2300 	strex	r3, r2, [r1]
 8006c4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1e5      	bne.n	8006c1e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2220      	movs	r2, #32
 8006c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2220      	movs	r2, #32
 8006c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e00f      	b.n	8006c8e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	4013      	ands	r3, r2
 8006c78:	68ba      	ldr	r2, [r7, #8]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	bf0c      	ite	eq
 8006c7e:	2301      	moveq	r3, #1
 8006c80:	2300      	movne	r3, #0
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	461a      	mov	r2, r3
 8006c86:	79fb      	ldrb	r3, [r7, #7]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d09f      	beq.n	8006bcc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3740      	adds	r7, #64	; 0x40
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
	...

08006c98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c9c:	b09f      	sub	sp, #124	; 0x7c
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	691b      	ldr	r3, [r3, #16]
 8006ca8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006cac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cae:	68d9      	ldr	r1, [r3, #12]
 8006cb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	ea40 0301 	orr.w	r3, r0, r1
 8006cb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006cba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cbc:	689a      	ldr	r2, [r3, #8]
 8006cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	431a      	orrs	r2, r3
 8006cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cc6:	695b      	ldr	r3, [r3, #20]
 8006cc8:	431a      	orrs	r2, r3
 8006cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ccc:	69db      	ldr	r3, [r3, #28]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006cd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006cdc:	f021 010c 	bic.w	r1, r1, #12
 8006ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ce6:	430b      	orrs	r3, r1
 8006ce8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	695b      	ldr	r3, [r3, #20]
 8006cf0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cf6:	6999      	ldr	r1, [r3, #24]
 8006cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	ea40 0301 	orr.w	r3, r0, r1
 8006d00:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	4bc5      	ldr	r3, [pc, #788]	; (800701c <UART_SetConfig+0x384>)
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d004      	beq.n	8006d16 <UART_SetConfig+0x7e>
 8006d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	4bc3      	ldr	r3, [pc, #780]	; (8007020 <UART_SetConfig+0x388>)
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d103      	bne.n	8006d1e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d16:	f7fe f9d1 	bl	80050bc <HAL_RCC_GetPCLK2Freq>
 8006d1a:	6778      	str	r0, [r7, #116]	; 0x74
 8006d1c:	e002      	b.n	8006d24 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d1e:	f7fe f9b9 	bl	8005094 <HAL_RCC_GetPCLK1Freq>
 8006d22:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d26:	69db      	ldr	r3, [r3, #28]
 8006d28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d2c:	f040 80b6 	bne.w	8006e9c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d32:	461c      	mov	r4, r3
 8006d34:	f04f 0500 	mov.w	r5, #0
 8006d38:	4622      	mov	r2, r4
 8006d3a:	462b      	mov	r3, r5
 8006d3c:	1891      	adds	r1, r2, r2
 8006d3e:	6439      	str	r1, [r7, #64]	; 0x40
 8006d40:	415b      	adcs	r3, r3
 8006d42:	647b      	str	r3, [r7, #68]	; 0x44
 8006d44:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006d48:	1912      	adds	r2, r2, r4
 8006d4a:	eb45 0303 	adc.w	r3, r5, r3
 8006d4e:	f04f 0000 	mov.w	r0, #0
 8006d52:	f04f 0100 	mov.w	r1, #0
 8006d56:	00d9      	lsls	r1, r3, #3
 8006d58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d5c:	00d0      	lsls	r0, r2, #3
 8006d5e:	4602      	mov	r2, r0
 8006d60:	460b      	mov	r3, r1
 8006d62:	1911      	adds	r1, r2, r4
 8006d64:	6639      	str	r1, [r7, #96]	; 0x60
 8006d66:	416b      	adcs	r3, r5
 8006d68:	667b      	str	r3, [r7, #100]	; 0x64
 8006d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	461a      	mov	r2, r3
 8006d70:	f04f 0300 	mov.w	r3, #0
 8006d74:	1891      	adds	r1, r2, r2
 8006d76:	63b9      	str	r1, [r7, #56]	; 0x38
 8006d78:	415b      	adcs	r3, r3
 8006d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006d80:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006d84:	f7f9 ff80 	bl	8000c88 <__aeabi_uldivmod>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	4ba5      	ldr	r3, [pc, #660]	; (8007024 <UART_SetConfig+0x38c>)
 8006d8e:	fba3 2302 	umull	r2, r3, r3, r2
 8006d92:	095b      	lsrs	r3, r3, #5
 8006d94:	011e      	lsls	r6, r3, #4
 8006d96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d98:	461c      	mov	r4, r3
 8006d9a:	f04f 0500 	mov.w	r5, #0
 8006d9e:	4622      	mov	r2, r4
 8006da0:	462b      	mov	r3, r5
 8006da2:	1891      	adds	r1, r2, r2
 8006da4:	6339      	str	r1, [r7, #48]	; 0x30
 8006da6:	415b      	adcs	r3, r3
 8006da8:	637b      	str	r3, [r7, #52]	; 0x34
 8006daa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006dae:	1912      	adds	r2, r2, r4
 8006db0:	eb45 0303 	adc.w	r3, r5, r3
 8006db4:	f04f 0000 	mov.w	r0, #0
 8006db8:	f04f 0100 	mov.w	r1, #0
 8006dbc:	00d9      	lsls	r1, r3, #3
 8006dbe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006dc2:	00d0      	lsls	r0, r2, #3
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	1911      	adds	r1, r2, r4
 8006dca:	65b9      	str	r1, [r7, #88]	; 0x58
 8006dcc:	416b      	adcs	r3, r5
 8006dce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006dd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	f04f 0300 	mov.w	r3, #0
 8006dda:	1891      	adds	r1, r2, r2
 8006ddc:	62b9      	str	r1, [r7, #40]	; 0x28
 8006dde:	415b      	adcs	r3, r3
 8006de0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006de2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006de6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006dea:	f7f9 ff4d 	bl	8000c88 <__aeabi_uldivmod>
 8006dee:	4602      	mov	r2, r0
 8006df0:	460b      	mov	r3, r1
 8006df2:	4b8c      	ldr	r3, [pc, #560]	; (8007024 <UART_SetConfig+0x38c>)
 8006df4:	fba3 1302 	umull	r1, r3, r3, r2
 8006df8:	095b      	lsrs	r3, r3, #5
 8006dfa:	2164      	movs	r1, #100	; 0x64
 8006dfc:	fb01 f303 	mul.w	r3, r1, r3
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	00db      	lsls	r3, r3, #3
 8006e04:	3332      	adds	r3, #50	; 0x32
 8006e06:	4a87      	ldr	r2, [pc, #540]	; (8007024 <UART_SetConfig+0x38c>)
 8006e08:	fba2 2303 	umull	r2, r3, r2, r3
 8006e0c:	095b      	lsrs	r3, r3, #5
 8006e0e:	005b      	lsls	r3, r3, #1
 8006e10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e14:	441e      	add	r6, r3
 8006e16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f04f 0100 	mov.w	r1, #0
 8006e1e:	4602      	mov	r2, r0
 8006e20:	460b      	mov	r3, r1
 8006e22:	1894      	adds	r4, r2, r2
 8006e24:	623c      	str	r4, [r7, #32]
 8006e26:	415b      	adcs	r3, r3
 8006e28:	627b      	str	r3, [r7, #36]	; 0x24
 8006e2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e2e:	1812      	adds	r2, r2, r0
 8006e30:	eb41 0303 	adc.w	r3, r1, r3
 8006e34:	f04f 0400 	mov.w	r4, #0
 8006e38:	f04f 0500 	mov.w	r5, #0
 8006e3c:	00dd      	lsls	r5, r3, #3
 8006e3e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006e42:	00d4      	lsls	r4, r2, #3
 8006e44:	4622      	mov	r2, r4
 8006e46:	462b      	mov	r3, r5
 8006e48:	1814      	adds	r4, r2, r0
 8006e4a:	653c      	str	r4, [r7, #80]	; 0x50
 8006e4c:	414b      	adcs	r3, r1
 8006e4e:	657b      	str	r3, [r7, #84]	; 0x54
 8006e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	461a      	mov	r2, r3
 8006e56:	f04f 0300 	mov.w	r3, #0
 8006e5a:	1891      	adds	r1, r2, r2
 8006e5c:	61b9      	str	r1, [r7, #24]
 8006e5e:	415b      	adcs	r3, r3
 8006e60:	61fb      	str	r3, [r7, #28]
 8006e62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e66:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006e6a:	f7f9 ff0d 	bl	8000c88 <__aeabi_uldivmod>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	460b      	mov	r3, r1
 8006e72:	4b6c      	ldr	r3, [pc, #432]	; (8007024 <UART_SetConfig+0x38c>)
 8006e74:	fba3 1302 	umull	r1, r3, r3, r2
 8006e78:	095b      	lsrs	r3, r3, #5
 8006e7a:	2164      	movs	r1, #100	; 0x64
 8006e7c:	fb01 f303 	mul.w	r3, r1, r3
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	00db      	lsls	r3, r3, #3
 8006e84:	3332      	adds	r3, #50	; 0x32
 8006e86:	4a67      	ldr	r2, [pc, #412]	; (8007024 <UART_SetConfig+0x38c>)
 8006e88:	fba2 2303 	umull	r2, r3, r2, r3
 8006e8c:	095b      	lsrs	r3, r3, #5
 8006e8e:	f003 0207 	and.w	r2, r3, #7
 8006e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4432      	add	r2, r6
 8006e98:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e9a:	e0b9      	b.n	8007010 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e9e:	461c      	mov	r4, r3
 8006ea0:	f04f 0500 	mov.w	r5, #0
 8006ea4:	4622      	mov	r2, r4
 8006ea6:	462b      	mov	r3, r5
 8006ea8:	1891      	adds	r1, r2, r2
 8006eaa:	6139      	str	r1, [r7, #16]
 8006eac:	415b      	adcs	r3, r3
 8006eae:	617b      	str	r3, [r7, #20]
 8006eb0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006eb4:	1912      	adds	r2, r2, r4
 8006eb6:	eb45 0303 	adc.w	r3, r5, r3
 8006eba:	f04f 0000 	mov.w	r0, #0
 8006ebe:	f04f 0100 	mov.w	r1, #0
 8006ec2:	00d9      	lsls	r1, r3, #3
 8006ec4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006ec8:	00d0      	lsls	r0, r2, #3
 8006eca:	4602      	mov	r2, r0
 8006ecc:	460b      	mov	r3, r1
 8006ece:	eb12 0804 	adds.w	r8, r2, r4
 8006ed2:	eb43 0905 	adc.w	r9, r3, r5
 8006ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	4618      	mov	r0, r3
 8006edc:	f04f 0100 	mov.w	r1, #0
 8006ee0:	f04f 0200 	mov.w	r2, #0
 8006ee4:	f04f 0300 	mov.w	r3, #0
 8006ee8:	008b      	lsls	r3, r1, #2
 8006eea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006eee:	0082      	lsls	r2, r0, #2
 8006ef0:	4640      	mov	r0, r8
 8006ef2:	4649      	mov	r1, r9
 8006ef4:	f7f9 fec8 	bl	8000c88 <__aeabi_uldivmod>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	460b      	mov	r3, r1
 8006efc:	4b49      	ldr	r3, [pc, #292]	; (8007024 <UART_SetConfig+0x38c>)
 8006efe:	fba3 2302 	umull	r2, r3, r3, r2
 8006f02:	095b      	lsrs	r3, r3, #5
 8006f04:	011e      	lsls	r6, r3, #4
 8006f06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f04f 0100 	mov.w	r1, #0
 8006f0e:	4602      	mov	r2, r0
 8006f10:	460b      	mov	r3, r1
 8006f12:	1894      	adds	r4, r2, r2
 8006f14:	60bc      	str	r4, [r7, #8]
 8006f16:	415b      	adcs	r3, r3
 8006f18:	60fb      	str	r3, [r7, #12]
 8006f1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f1e:	1812      	adds	r2, r2, r0
 8006f20:	eb41 0303 	adc.w	r3, r1, r3
 8006f24:	f04f 0400 	mov.w	r4, #0
 8006f28:	f04f 0500 	mov.w	r5, #0
 8006f2c:	00dd      	lsls	r5, r3, #3
 8006f2e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006f32:	00d4      	lsls	r4, r2, #3
 8006f34:	4622      	mov	r2, r4
 8006f36:	462b      	mov	r3, r5
 8006f38:	1814      	adds	r4, r2, r0
 8006f3a:	64bc      	str	r4, [r7, #72]	; 0x48
 8006f3c:	414b      	adcs	r3, r1
 8006f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	4618      	mov	r0, r3
 8006f46:	f04f 0100 	mov.w	r1, #0
 8006f4a:	f04f 0200 	mov.w	r2, #0
 8006f4e:	f04f 0300 	mov.w	r3, #0
 8006f52:	008b      	lsls	r3, r1, #2
 8006f54:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006f58:	0082      	lsls	r2, r0, #2
 8006f5a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006f5e:	f7f9 fe93 	bl	8000c88 <__aeabi_uldivmod>
 8006f62:	4602      	mov	r2, r0
 8006f64:	460b      	mov	r3, r1
 8006f66:	4b2f      	ldr	r3, [pc, #188]	; (8007024 <UART_SetConfig+0x38c>)
 8006f68:	fba3 1302 	umull	r1, r3, r3, r2
 8006f6c:	095b      	lsrs	r3, r3, #5
 8006f6e:	2164      	movs	r1, #100	; 0x64
 8006f70:	fb01 f303 	mul.w	r3, r1, r3
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	011b      	lsls	r3, r3, #4
 8006f78:	3332      	adds	r3, #50	; 0x32
 8006f7a:	4a2a      	ldr	r2, [pc, #168]	; (8007024 <UART_SetConfig+0x38c>)
 8006f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f80:	095b      	lsrs	r3, r3, #5
 8006f82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f86:	441e      	add	r6, r3
 8006f88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f04f 0100 	mov.w	r1, #0
 8006f90:	4602      	mov	r2, r0
 8006f92:	460b      	mov	r3, r1
 8006f94:	1894      	adds	r4, r2, r2
 8006f96:	603c      	str	r4, [r7, #0]
 8006f98:	415b      	adcs	r3, r3
 8006f9a:	607b      	str	r3, [r7, #4]
 8006f9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fa0:	1812      	adds	r2, r2, r0
 8006fa2:	eb41 0303 	adc.w	r3, r1, r3
 8006fa6:	f04f 0400 	mov.w	r4, #0
 8006faa:	f04f 0500 	mov.w	r5, #0
 8006fae:	00dd      	lsls	r5, r3, #3
 8006fb0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006fb4:	00d4      	lsls	r4, r2, #3
 8006fb6:	4622      	mov	r2, r4
 8006fb8:	462b      	mov	r3, r5
 8006fba:	eb12 0a00 	adds.w	sl, r2, r0
 8006fbe:	eb43 0b01 	adc.w	fp, r3, r1
 8006fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f04f 0100 	mov.w	r1, #0
 8006fcc:	f04f 0200 	mov.w	r2, #0
 8006fd0:	f04f 0300 	mov.w	r3, #0
 8006fd4:	008b      	lsls	r3, r1, #2
 8006fd6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006fda:	0082      	lsls	r2, r0, #2
 8006fdc:	4650      	mov	r0, sl
 8006fde:	4659      	mov	r1, fp
 8006fe0:	f7f9 fe52 	bl	8000c88 <__aeabi_uldivmod>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	4b0e      	ldr	r3, [pc, #56]	; (8007024 <UART_SetConfig+0x38c>)
 8006fea:	fba3 1302 	umull	r1, r3, r3, r2
 8006fee:	095b      	lsrs	r3, r3, #5
 8006ff0:	2164      	movs	r1, #100	; 0x64
 8006ff2:	fb01 f303 	mul.w	r3, r1, r3
 8006ff6:	1ad3      	subs	r3, r2, r3
 8006ff8:	011b      	lsls	r3, r3, #4
 8006ffa:	3332      	adds	r3, #50	; 0x32
 8006ffc:	4a09      	ldr	r2, [pc, #36]	; (8007024 <UART_SetConfig+0x38c>)
 8006ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8007002:	095b      	lsrs	r3, r3, #5
 8007004:	f003 020f 	and.w	r2, r3, #15
 8007008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4432      	add	r2, r6
 800700e:	609a      	str	r2, [r3, #8]
}
 8007010:	bf00      	nop
 8007012:	377c      	adds	r7, #124	; 0x7c
 8007014:	46bd      	mov	sp, r7
 8007016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800701a:	bf00      	nop
 800701c:	40011000 	.word	0x40011000
 8007020:	40011400 	.word	0x40011400
 8007024:	51eb851f 	.word	0x51eb851f

08007028 <__errno>:
 8007028:	4b01      	ldr	r3, [pc, #4]	; (8007030 <__errno+0x8>)
 800702a:	6818      	ldr	r0, [r3, #0]
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop
 8007030:	2000005c 	.word	0x2000005c

08007034 <__libc_init_array>:
 8007034:	b570      	push	{r4, r5, r6, lr}
 8007036:	4d0d      	ldr	r5, [pc, #52]	; (800706c <__libc_init_array+0x38>)
 8007038:	4c0d      	ldr	r4, [pc, #52]	; (8007070 <__libc_init_array+0x3c>)
 800703a:	1b64      	subs	r4, r4, r5
 800703c:	10a4      	asrs	r4, r4, #2
 800703e:	2600      	movs	r6, #0
 8007040:	42a6      	cmp	r6, r4
 8007042:	d109      	bne.n	8007058 <__libc_init_array+0x24>
 8007044:	4d0b      	ldr	r5, [pc, #44]	; (8007074 <__libc_init_array+0x40>)
 8007046:	4c0c      	ldr	r4, [pc, #48]	; (8007078 <__libc_init_array+0x44>)
 8007048:	f002 feb6 	bl	8009db8 <_init>
 800704c:	1b64      	subs	r4, r4, r5
 800704e:	10a4      	asrs	r4, r4, #2
 8007050:	2600      	movs	r6, #0
 8007052:	42a6      	cmp	r6, r4
 8007054:	d105      	bne.n	8007062 <__libc_init_array+0x2e>
 8007056:	bd70      	pop	{r4, r5, r6, pc}
 8007058:	f855 3b04 	ldr.w	r3, [r5], #4
 800705c:	4798      	blx	r3
 800705e:	3601      	adds	r6, #1
 8007060:	e7ee      	b.n	8007040 <__libc_init_array+0xc>
 8007062:	f855 3b04 	ldr.w	r3, [r5], #4
 8007066:	4798      	blx	r3
 8007068:	3601      	adds	r6, #1
 800706a:	e7f2      	b.n	8007052 <__libc_init_array+0x1e>
 800706c:	0800a214 	.word	0x0800a214
 8007070:	0800a214 	.word	0x0800a214
 8007074:	0800a214 	.word	0x0800a214
 8007078:	0800a218 	.word	0x0800a218

0800707c <memcpy>:
 800707c:	440a      	add	r2, r1
 800707e:	4291      	cmp	r1, r2
 8007080:	f100 33ff 	add.w	r3, r0, #4294967295
 8007084:	d100      	bne.n	8007088 <memcpy+0xc>
 8007086:	4770      	bx	lr
 8007088:	b510      	push	{r4, lr}
 800708a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800708e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007092:	4291      	cmp	r1, r2
 8007094:	d1f9      	bne.n	800708a <memcpy+0xe>
 8007096:	bd10      	pop	{r4, pc}

08007098 <memset>:
 8007098:	4402      	add	r2, r0
 800709a:	4603      	mov	r3, r0
 800709c:	4293      	cmp	r3, r2
 800709e:	d100      	bne.n	80070a2 <memset+0xa>
 80070a0:	4770      	bx	lr
 80070a2:	f803 1b01 	strb.w	r1, [r3], #1
 80070a6:	e7f9      	b.n	800709c <memset+0x4>

080070a8 <__cvt>:
 80070a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070ac:	ec55 4b10 	vmov	r4, r5, d0
 80070b0:	2d00      	cmp	r5, #0
 80070b2:	460e      	mov	r6, r1
 80070b4:	4619      	mov	r1, r3
 80070b6:	462b      	mov	r3, r5
 80070b8:	bfbb      	ittet	lt
 80070ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80070be:	461d      	movlt	r5, r3
 80070c0:	2300      	movge	r3, #0
 80070c2:	232d      	movlt	r3, #45	; 0x2d
 80070c4:	700b      	strb	r3, [r1, #0]
 80070c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80070cc:	4691      	mov	r9, r2
 80070ce:	f023 0820 	bic.w	r8, r3, #32
 80070d2:	bfbc      	itt	lt
 80070d4:	4622      	movlt	r2, r4
 80070d6:	4614      	movlt	r4, r2
 80070d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80070dc:	d005      	beq.n	80070ea <__cvt+0x42>
 80070de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80070e2:	d100      	bne.n	80070e6 <__cvt+0x3e>
 80070e4:	3601      	adds	r6, #1
 80070e6:	2102      	movs	r1, #2
 80070e8:	e000      	b.n	80070ec <__cvt+0x44>
 80070ea:	2103      	movs	r1, #3
 80070ec:	ab03      	add	r3, sp, #12
 80070ee:	9301      	str	r3, [sp, #4]
 80070f0:	ab02      	add	r3, sp, #8
 80070f2:	9300      	str	r3, [sp, #0]
 80070f4:	ec45 4b10 	vmov	d0, r4, r5
 80070f8:	4653      	mov	r3, sl
 80070fa:	4632      	mov	r2, r6
 80070fc:	f000 fcec 	bl	8007ad8 <_dtoa_r>
 8007100:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007104:	4607      	mov	r7, r0
 8007106:	d102      	bne.n	800710e <__cvt+0x66>
 8007108:	f019 0f01 	tst.w	r9, #1
 800710c:	d022      	beq.n	8007154 <__cvt+0xac>
 800710e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007112:	eb07 0906 	add.w	r9, r7, r6
 8007116:	d110      	bne.n	800713a <__cvt+0x92>
 8007118:	783b      	ldrb	r3, [r7, #0]
 800711a:	2b30      	cmp	r3, #48	; 0x30
 800711c:	d10a      	bne.n	8007134 <__cvt+0x8c>
 800711e:	2200      	movs	r2, #0
 8007120:	2300      	movs	r3, #0
 8007122:	4620      	mov	r0, r4
 8007124:	4629      	mov	r1, r5
 8007126:	f7f9 fcef 	bl	8000b08 <__aeabi_dcmpeq>
 800712a:	b918      	cbnz	r0, 8007134 <__cvt+0x8c>
 800712c:	f1c6 0601 	rsb	r6, r6, #1
 8007130:	f8ca 6000 	str.w	r6, [sl]
 8007134:	f8da 3000 	ldr.w	r3, [sl]
 8007138:	4499      	add	r9, r3
 800713a:	2200      	movs	r2, #0
 800713c:	2300      	movs	r3, #0
 800713e:	4620      	mov	r0, r4
 8007140:	4629      	mov	r1, r5
 8007142:	f7f9 fce1 	bl	8000b08 <__aeabi_dcmpeq>
 8007146:	b108      	cbz	r0, 800714c <__cvt+0xa4>
 8007148:	f8cd 900c 	str.w	r9, [sp, #12]
 800714c:	2230      	movs	r2, #48	; 0x30
 800714e:	9b03      	ldr	r3, [sp, #12]
 8007150:	454b      	cmp	r3, r9
 8007152:	d307      	bcc.n	8007164 <__cvt+0xbc>
 8007154:	9b03      	ldr	r3, [sp, #12]
 8007156:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007158:	1bdb      	subs	r3, r3, r7
 800715a:	4638      	mov	r0, r7
 800715c:	6013      	str	r3, [r2, #0]
 800715e:	b004      	add	sp, #16
 8007160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007164:	1c59      	adds	r1, r3, #1
 8007166:	9103      	str	r1, [sp, #12]
 8007168:	701a      	strb	r2, [r3, #0]
 800716a:	e7f0      	b.n	800714e <__cvt+0xa6>

0800716c <__exponent>:
 800716c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800716e:	4603      	mov	r3, r0
 8007170:	2900      	cmp	r1, #0
 8007172:	bfb8      	it	lt
 8007174:	4249      	neglt	r1, r1
 8007176:	f803 2b02 	strb.w	r2, [r3], #2
 800717a:	bfb4      	ite	lt
 800717c:	222d      	movlt	r2, #45	; 0x2d
 800717e:	222b      	movge	r2, #43	; 0x2b
 8007180:	2909      	cmp	r1, #9
 8007182:	7042      	strb	r2, [r0, #1]
 8007184:	dd2a      	ble.n	80071dc <__exponent+0x70>
 8007186:	f10d 0407 	add.w	r4, sp, #7
 800718a:	46a4      	mov	ip, r4
 800718c:	270a      	movs	r7, #10
 800718e:	46a6      	mov	lr, r4
 8007190:	460a      	mov	r2, r1
 8007192:	fb91 f6f7 	sdiv	r6, r1, r7
 8007196:	fb07 1516 	mls	r5, r7, r6, r1
 800719a:	3530      	adds	r5, #48	; 0x30
 800719c:	2a63      	cmp	r2, #99	; 0x63
 800719e:	f104 34ff 	add.w	r4, r4, #4294967295
 80071a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80071a6:	4631      	mov	r1, r6
 80071a8:	dcf1      	bgt.n	800718e <__exponent+0x22>
 80071aa:	3130      	adds	r1, #48	; 0x30
 80071ac:	f1ae 0502 	sub.w	r5, lr, #2
 80071b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80071b4:	1c44      	adds	r4, r0, #1
 80071b6:	4629      	mov	r1, r5
 80071b8:	4561      	cmp	r1, ip
 80071ba:	d30a      	bcc.n	80071d2 <__exponent+0x66>
 80071bc:	f10d 0209 	add.w	r2, sp, #9
 80071c0:	eba2 020e 	sub.w	r2, r2, lr
 80071c4:	4565      	cmp	r5, ip
 80071c6:	bf88      	it	hi
 80071c8:	2200      	movhi	r2, #0
 80071ca:	4413      	add	r3, r2
 80071cc:	1a18      	subs	r0, r3, r0
 80071ce:	b003      	add	sp, #12
 80071d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80071da:	e7ed      	b.n	80071b8 <__exponent+0x4c>
 80071dc:	2330      	movs	r3, #48	; 0x30
 80071de:	3130      	adds	r1, #48	; 0x30
 80071e0:	7083      	strb	r3, [r0, #2]
 80071e2:	70c1      	strb	r1, [r0, #3]
 80071e4:	1d03      	adds	r3, r0, #4
 80071e6:	e7f1      	b.n	80071cc <__exponent+0x60>

080071e8 <_printf_float>:
 80071e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ec:	ed2d 8b02 	vpush	{d8}
 80071f0:	b08d      	sub	sp, #52	; 0x34
 80071f2:	460c      	mov	r4, r1
 80071f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80071f8:	4616      	mov	r6, r2
 80071fa:	461f      	mov	r7, r3
 80071fc:	4605      	mov	r5, r0
 80071fe:	f001 fa57 	bl	80086b0 <_localeconv_r>
 8007202:	f8d0 a000 	ldr.w	sl, [r0]
 8007206:	4650      	mov	r0, sl
 8007208:	f7f9 f802 	bl	8000210 <strlen>
 800720c:	2300      	movs	r3, #0
 800720e:	930a      	str	r3, [sp, #40]	; 0x28
 8007210:	6823      	ldr	r3, [r4, #0]
 8007212:	9305      	str	r3, [sp, #20]
 8007214:	f8d8 3000 	ldr.w	r3, [r8]
 8007218:	f894 b018 	ldrb.w	fp, [r4, #24]
 800721c:	3307      	adds	r3, #7
 800721e:	f023 0307 	bic.w	r3, r3, #7
 8007222:	f103 0208 	add.w	r2, r3, #8
 8007226:	f8c8 2000 	str.w	r2, [r8]
 800722a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007232:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007236:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800723a:	9307      	str	r3, [sp, #28]
 800723c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007240:	ee08 0a10 	vmov	s16, r0
 8007244:	4b9f      	ldr	r3, [pc, #636]	; (80074c4 <_printf_float+0x2dc>)
 8007246:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800724a:	f04f 32ff 	mov.w	r2, #4294967295
 800724e:	f7f9 fc8d 	bl	8000b6c <__aeabi_dcmpun>
 8007252:	bb88      	cbnz	r0, 80072b8 <_printf_float+0xd0>
 8007254:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007258:	4b9a      	ldr	r3, [pc, #616]	; (80074c4 <_printf_float+0x2dc>)
 800725a:	f04f 32ff 	mov.w	r2, #4294967295
 800725e:	f7f9 fc67 	bl	8000b30 <__aeabi_dcmple>
 8007262:	bb48      	cbnz	r0, 80072b8 <_printf_float+0xd0>
 8007264:	2200      	movs	r2, #0
 8007266:	2300      	movs	r3, #0
 8007268:	4640      	mov	r0, r8
 800726a:	4649      	mov	r1, r9
 800726c:	f7f9 fc56 	bl	8000b1c <__aeabi_dcmplt>
 8007270:	b110      	cbz	r0, 8007278 <_printf_float+0x90>
 8007272:	232d      	movs	r3, #45	; 0x2d
 8007274:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007278:	4b93      	ldr	r3, [pc, #588]	; (80074c8 <_printf_float+0x2e0>)
 800727a:	4894      	ldr	r0, [pc, #592]	; (80074cc <_printf_float+0x2e4>)
 800727c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007280:	bf94      	ite	ls
 8007282:	4698      	movls	r8, r3
 8007284:	4680      	movhi	r8, r0
 8007286:	2303      	movs	r3, #3
 8007288:	6123      	str	r3, [r4, #16]
 800728a:	9b05      	ldr	r3, [sp, #20]
 800728c:	f023 0204 	bic.w	r2, r3, #4
 8007290:	6022      	str	r2, [r4, #0]
 8007292:	f04f 0900 	mov.w	r9, #0
 8007296:	9700      	str	r7, [sp, #0]
 8007298:	4633      	mov	r3, r6
 800729a:	aa0b      	add	r2, sp, #44	; 0x2c
 800729c:	4621      	mov	r1, r4
 800729e:	4628      	mov	r0, r5
 80072a0:	f000 f9d8 	bl	8007654 <_printf_common>
 80072a4:	3001      	adds	r0, #1
 80072a6:	f040 8090 	bne.w	80073ca <_printf_float+0x1e2>
 80072aa:	f04f 30ff 	mov.w	r0, #4294967295
 80072ae:	b00d      	add	sp, #52	; 0x34
 80072b0:	ecbd 8b02 	vpop	{d8}
 80072b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072b8:	4642      	mov	r2, r8
 80072ba:	464b      	mov	r3, r9
 80072bc:	4640      	mov	r0, r8
 80072be:	4649      	mov	r1, r9
 80072c0:	f7f9 fc54 	bl	8000b6c <__aeabi_dcmpun>
 80072c4:	b140      	cbz	r0, 80072d8 <_printf_float+0xf0>
 80072c6:	464b      	mov	r3, r9
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	bfbc      	itt	lt
 80072cc:	232d      	movlt	r3, #45	; 0x2d
 80072ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80072d2:	487f      	ldr	r0, [pc, #508]	; (80074d0 <_printf_float+0x2e8>)
 80072d4:	4b7f      	ldr	r3, [pc, #508]	; (80074d4 <_printf_float+0x2ec>)
 80072d6:	e7d1      	b.n	800727c <_printf_float+0x94>
 80072d8:	6863      	ldr	r3, [r4, #4]
 80072da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80072de:	9206      	str	r2, [sp, #24]
 80072e0:	1c5a      	adds	r2, r3, #1
 80072e2:	d13f      	bne.n	8007364 <_printf_float+0x17c>
 80072e4:	2306      	movs	r3, #6
 80072e6:	6063      	str	r3, [r4, #4]
 80072e8:	9b05      	ldr	r3, [sp, #20]
 80072ea:	6861      	ldr	r1, [r4, #4]
 80072ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80072f0:	2300      	movs	r3, #0
 80072f2:	9303      	str	r3, [sp, #12]
 80072f4:	ab0a      	add	r3, sp, #40	; 0x28
 80072f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80072fa:	ab09      	add	r3, sp, #36	; 0x24
 80072fc:	ec49 8b10 	vmov	d0, r8, r9
 8007300:	9300      	str	r3, [sp, #0]
 8007302:	6022      	str	r2, [r4, #0]
 8007304:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007308:	4628      	mov	r0, r5
 800730a:	f7ff fecd 	bl	80070a8 <__cvt>
 800730e:	9b06      	ldr	r3, [sp, #24]
 8007310:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007312:	2b47      	cmp	r3, #71	; 0x47
 8007314:	4680      	mov	r8, r0
 8007316:	d108      	bne.n	800732a <_printf_float+0x142>
 8007318:	1cc8      	adds	r0, r1, #3
 800731a:	db02      	blt.n	8007322 <_printf_float+0x13a>
 800731c:	6863      	ldr	r3, [r4, #4]
 800731e:	4299      	cmp	r1, r3
 8007320:	dd41      	ble.n	80073a6 <_printf_float+0x1be>
 8007322:	f1ab 0b02 	sub.w	fp, fp, #2
 8007326:	fa5f fb8b 	uxtb.w	fp, fp
 800732a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800732e:	d820      	bhi.n	8007372 <_printf_float+0x18a>
 8007330:	3901      	subs	r1, #1
 8007332:	465a      	mov	r2, fp
 8007334:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007338:	9109      	str	r1, [sp, #36]	; 0x24
 800733a:	f7ff ff17 	bl	800716c <__exponent>
 800733e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007340:	1813      	adds	r3, r2, r0
 8007342:	2a01      	cmp	r2, #1
 8007344:	4681      	mov	r9, r0
 8007346:	6123      	str	r3, [r4, #16]
 8007348:	dc02      	bgt.n	8007350 <_printf_float+0x168>
 800734a:	6822      	ldr	r2, [r4, #0]
 800734c:	07d2      	lsls	r2, r2, #31
 800734e:	d501      	bpl.n	8007354 <_printf_float+0x16c>
 8007350:	3301      	adds	r3, #1
 8007352:	6123      	str	r3, [r4, #16]
 8007354:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007358:	2b00      	cmp	r3, #0
 800735a:	d09c      	beq.n	8007296 <_printf_float+0xae>
 800735c:	232d      	movs	r3, #45	; 0x2d
 800735e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007362:	e798      	b.n	8007296 <_printf_float+0xae>
 8007364:	9a06      	ldr	r2, [sp, #24]
 8007366:	2a47      	cmp	r2, #71	; 0x47
 8007368:	d1be      	bne.n	80072e8 <_printf_float+0x100>
 800736a:	2b00      	cmp	r3, #0
 800736c:	d1bc      	bne.n	80072e8 <_printf_float+0x100>
 800736e:	2301      	movs	r3, #1
 8007370:	e7b9      	b.n	80072e6 <_printf_float+0xfe>
 8007372:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007376:	d118      	bne.n	80073aa <_printf_float+0x1c2>
 8007378:	2900      	cmp	r1, #0
 800737a:	6863      	ldr	r3, [r4, #4]
 800737c:	dd0b      	ble.n	8007396 <_printf_float+0x1ae>
 800737e:	6121      	str	r1, [r4, #16]
 8007380:	b913      	cbnz	r3, 8007388 <_printf_float+0x1a0>
 8007382:	6822      	ldr	r2, [r4, #0]
 8007384:	07d0      	lsls	r0, r2, #31
 8007386:	d502      	bpl.n	800738e <_printf_float+0x1a6>
 8007388:	3301      	adds	r3, #1
 800738a:	440b      	add	r3, r1
 800738c:	6123      	str	r3, [r4, #16]
 800738e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007390:	f04f 0900 	mov.w	r9, #0
 8007394:	e7de      	b.n	8007354 <_printf_float+0x16c>
 8007396:	b913      	cbnz	r3, 800739e <_printf_float+0x1b6>
 8007398:	6822      	ldr	r2, [r4, #0]
 800739a:	07d2      	lsls	r2, r2, #31
 800739c:	d501      	bpl.n	80073a2 <_printf_float+0x1ba>
 800739e:	3302      	adds	r3, #2
 80073a0:	e7f4      	b.n	800738c <_printf_float+0x1a4>
 80073a2:	2301      	movs	r3, #1
 80073a4:	e7f2      	b.n	800738c <_printf_float+0x1a4>
 80073a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80073aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073ac:	4299      	cmp	r1, r3
 80073ae:	db05      	blt.n	80073bc <_printf_float+0x1d4>
 80073b0:	6823      	ldr	r3, [r4, #0]
 80073b2:	6121      	str	r1, [r4, #16]
 80073b4:	07d8      	lsls	r0, r3, #31
 80073b6:	d5ea      	bpl.n	800738e <_printf_float+0x1a6>
 80073b8:	1c4b      	adds	r3, r1, #1
 80073ba:	e7e7      	b.n	800738c <_printf_float+0x1a4>
 80073bc:	2900      	cmp	r1, #0
 80073be:	bfd4      	ite	le
 80073c0:	f1c1 0202 	rsble	r2, r1, #2
 80073c4:	2201      	movgt	r2, #1
 80073c6:	4413      	add	r3, r2
 80073c8:	e7e0      	b.n	800738c <_printf_float+0x1a4>
 80073ca:	6823      	ldr	r3, [r4, #0]
 80073cc:	055a      	lsls	r2, r3, #21
 80073ce:	d407      	bmi.n	80073e0 <_printf_float+0x1f8>
 80073d0:	6923      	ldr	r3, [r4, #16]
 80073d2:	4642      	mov	r2, r8
 80073d4:	4631      	mov	r1, r6
 80073d6:	4628      	mov	r0, r5
 80073d8:	47b8      	blx	r7
 80073da:	3001      	adds	r0, #1
 80073dc:	d12c      	bne.n	8007438 <_printf_float+0x250>
 80073de:	e764      	b.n	80072aa <_printf_float+0xc2>
 80073e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80073e4:	f240 80e0 	bls.w	80075a8 <_printf_float+0x3c0>
 80073e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80073ec:	2200      	movs	r2, #0
 80073ee:	2300      	movs	r3, #0
 80073f0:	f7f9 fb8a 	bl	8000b08 <__aeabi_dcmpeq>
 80073f4:	2800      	cmp	r0, #0
 80073f6:	d034      	beq.n	8007462 <_printf_float+0x27a>
 80073f8:	4a37      	ldr	r2, [pc, #220]	; (80074d8 <_printf_float+0x2f0>)
 80073fa:	2301      	movs	r3, #1
 80073fc:	4631      	mov	r1, r6
 80073fe:	4628      	mov	r0, r5
 8007400:	47b8      	blx	r7
 8007402:	3001      	adds	r0, #1
 8007404:	f43f af51 	beq.w	80072aa <_printf_float+0xc2>
 8007408:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800740c:	429a      	cmp	r2, r3
 800740e:	db02      	blt.n	8007416 <_printf_float+0x22e>
 8007410:	6823      	ldr	r3, [r4, #0]
 8007412:	07d8      	lsls	r0, r3, #31
 8007414:	d510      	bpl.n	8007438 <_printf_float+0x250>
 8007416:	ee18 3a10 	vmov	r3, s16
 800741a:	4652      	mov	r2, sl
 800741c:	4631      	mov	r1, r6
 800741e:	4628      	mov	r0, r5
 8007420:	47b8      	blx	r7
 8007422:	3001      	adds	r0, #1
 8007424:	f43f af41 	beq.w	80072aa <_printf_float+0xc2>
 8007428:	f04f 0800 	mov.w	r8, #0
 800742c:	f104 091a 	add.w	r9, r4, #26
 8007430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007432:	3b01      	subs	r3, #1
 8007434:	4543      	cmp	r3, r8
 8007436:	dc09      	bgt.n	800744c <_printf_float+0x264>
 8007438:	6823      	ldr	r3, [r4, #0]
 800743a:	079b      	lsls	r3, r3, #30
 800743c:	f100 8105 	bmi.w	800764a <_printf_float+0x462>
 8007440:	68e0      	ldr	r0, [r4, #12]
 8007442:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007444:	4298      	cmp	r0, r3
 8007446:	bfb8      	it	lt
 8007448:	4618      	movlt	r0, r3
 800744a:	e730      	b.n	80072ae <_printf_float+0xc6>
 800744c:	2301      	movs	r3, #1
 800744e:	464a      	mov	r2, r9
 8007450:	4631      	mov	r1, r6
 8007452:	4628      	mov	r0, r5
 8007454:	47b8      	blx	r7
 8007456:	3001      	adds	r0, #1
 8007458:	f43f af27 	beq.w	80072aa <_printf_float+0xc2>
 800745c:	f108 0801 	add.w	r8, r8, #1
 8007460:	e7e6      	b.n	8007430 <_printf_float+0x248>
 8007462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007464:	2b00      	cmp	r3, #0
 8007466:	dc39      	bgt.n	80074dc <_printf_float+0x2f4>
 8007468:	4a1b      	ldr	r2, [pc, #108]	; (80074d8 <_printf_float+0x2f0>)
 800746a:	2301      	movs	r3, #1
 800746c:	4631      	mov	r1, r6
 800746e:	4628      	mov	r0, r5
 8007470:	47b8      	blx	r7
 8007472:	3001      	adds	r0, #1
 8007474:	f43f af19 	beq.w	80072aa <_printf_float+0xc2>
 8007478:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800747c:	4313      	orrs	r3, r2
 800747e:	d102      	bne.n	8007486 <_printf_float+0x29e>
 8007480:	6823      	ldr	r3, [r4, #0]
 8007482:	07d9      	lsls	r1, r3, #31
 8007484:	d5d8      	bpl.n	8007438 <_printf_float+0x250>
 8007486:	ee18 3a10 	vmov	r3, s16
 800748a:	4652      	mov	r2, sl
 800748c:	4631      	mov	r1, r6
 800748e:	4628      	mov	r0, r5
 8007490:	47b8      	blx	r7
 8007492:	3001      	adds	r0, #1
 8007494:	f43f af09 	beq.w	80072aa <_printf_float+0xc2>
 8007498:	f04f 0900 	mov.w	r9, #0
 800749c:	f104 0a1a 	add.w	sl, r4, #26
 80074a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074a2:	425b      	negs	r3, r3
 80074a4:	454b      	cmp	r3, r9
 80074a6:	dc01      	bgt.n	80074ac <_printf_float+0x2c4>
 80074a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074aa:	e792      	b.n	80073d2 <_printf_float+0x1ea>
 80074ac:	2301      	movs	r3, #1
 80074ae:	4652      	mov	r2, sl
 80074b0:	4631      	mov	r1, r6
 80074b2:	4628      	mov	r0, r5
 80074b4:	47b8      	blx	r7
 80074b6:	3001      	adds	r0, #1
 80074b8:	f43f aef7 	beq.w	80072aa <_printf_float+0xc2>
 80074bc:	f109 0901 	add.w	r9, r9, #1
 80074c0:	e7ee      	b.n	80074a0 <_printf_float+0x2b8>
 80074c2:	bf00      	nop
 80074c4:	7fefffff 	.word	0x7fefffff
 80074c8:	08009e2c 	.word	0x08009e2c
 80074cc:	08009e30 	.word	0x08009e30
 80074d0:	08009e38 	.word	0x08009e38
 80074d4:	08009e34 	.word	0x08009e34
 80074d8:	08009e3c 	.word	0x08009e3c
 80074dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80074e0:	429a      	cmp	r2, r3
 80074e2:	bfa8      	it	ge
 80074e4:	461a      	movge	r2, r3
 80074e6:	2a00      	cmp	r2, #0
 80074e8:	4691      	mov	r9, r2
 80074ea:	dc37      	bgt.n	800755c <_printf_float+0x374>
 80074ec:	f04f 0b00 	mov.w	fp, #0
 80074f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074f4:	f104 021a 	add.w	r2, r4, #26
 80074f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80074fa:	9305      	str	r3, [sp, #20]
 80074fc:	eba3 0309 	sub.w	r3, r3, r9
 8007500:	455b      	cmp	r3, fp
 8007502:	dc33      	bgt.n	800756c <_printf_float+0x384>
 8007504:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007508:	429a      	cmp	r2, r3
 800750a:	db3b      	blt.n	8007584 <_printf_float+0x39c>
 800750c:	6823      	ldr	r3, [r4, #0]
 800750e:	07da      	lsls	r2, r3, #31
 8007510:	d438      	bmi.n	8007584 <_printf_float+0x39c>
 8007512:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007514:	9b05      	ldr	r3, [sp, #20]
 8007516:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007518:	1ad3      	subs	r3, r2, r3
 800751a:	eba2 0901 	sub.w	r9, r2, r1
 800751e:	4599      	cmp	r9, r3
 8007520:	bfa8      	it	ge
 8007522:	4699      	movge	r9, r3
 8007524:	f1b9 0f00 	cmp.w	r9, #0
 8007528:	dc35      	bgt.n	8007596 <_printf_float+0x3ae>
 800752a:	f04f 0800 	mov.w	r8, #0
 800752e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007532:	f104 0a1a 	add.w	sl, r4, #26
 8007536:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800753a:	1a9b      	subs	r3, r3, r2
 800753c:	eba3 0309 	sub.w	r3, r3, r9
 8007540:	4543      	cmp	r3, r8
 8007542:	f77f af79 	ble.w	8007438 <_printf_float+0x250>
 8007546:	2301      	movs	r3, #1
 8007548:	4652      	mov	r2, sl
 800754a:	4631      	mov	r1, r6
 800754c:	4628      	mov	r0, r5
 800754e:	47b8      	blx	r7
 8007550:	3001      	adds	r0, #1
 8007552:	f43f aeaa 	beq.w	80072aa <_printf_float+0xc2>
 8007556:	f108 0801 	add.w	r8, r8, #1
 800755a:	e7ec      	b.n	8007536 <_printf_float+0x34e>
 800755c:	4613      	mov	r3, r2
 800755e:	4631      	mov	r1, r6
 8007560:	4642      	mov	r2, r8
 8007562:	4628      	mov	r0, r5
 8007564:	47b8      	blx	r7
 8007566:	3001      	adds	r0, #1
 8007568:	d1c0      	bne.n	80074ec <_printf_float+0x304>
 800756a:	e69e      	b.n	80072aa <_printf_float+0xc2>
 800756c:	2301      	movs	r3, #1
 800756e:	4631      	mov	r1, r6
 8007570:	4628      	mov	r0, r5
 8007572:	9205      	str	r2, [sp, #20]
 8007574:	47b8      	blx	r7
 8007576:	3001      	adds	r0, #1
 8007578:	f43f ae97 	beq.w	80072aa <_printf_float+0xc2>
 800757c:	9a05      	ldr	r2, [sp, #20]
 800757e:	f10b 0b01 	add.w	fp, fp, #1
 8007582:	e7b9      	b.n	80074f8 <_printf_float+0x310>
 8007584:	ee18 3a10 	vmov	r3, s16
 8007588:	4652      	mov	r2, sl
 800758a:	4631      	mov	r1, r6
 800758c:	4628      	mov	r0, r5
 800758e:	47b8      	blx	r7
 8007590:	3001      	adds	r0, #1
 8007592:	d1be      	bne.n	8007512 <_printf_float+0x32a>
 8007594:	e689      	b.n	80072aa <_printf_float+0xc2>
 8007596:	9a05      	ldr	r2, [sp, #20]
 8007598:	464b      	mov	r3, r9
 800759a:	4442      	add	r2, r8
 800759c:	4631      	mov	r1, r6
 800759e:	4628      	mov	r0, r5
 80075a0:	47b8      	blx	r7
 80075a2:	3001      	adds	r0, #1
 80075a4:	d1c1      	bne.n	800752a <_printf_float+0x342>
 80075a6:	e680      	b.n	80072aa <_printf_float+0xc2>
 80075a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075aa:	2a01      	cmp	r2, #1
 80075ac:	dc01      	bgt.n	80075b2 <_printf_float+0x3ca>
 80075ae:	07db      	lsls	r3, r3, #31
 80075b0:	d538      	bpl.n	8007624 <_printf_float+0x43c>
 80075b2:	2301      	movs	r3, #1
 80075b4:	4642      	mov	r2, r8
 80075b6:	4631      	mov	r1, r6
 80075b8:	4628      	mov	r0, r5
 80075ba:	47b8      	blx	r7
 80075bc:	3001      	adds	r0, #1
 80075be:	f43f ae74 	beq.w	80072aa <_printf_float+0xc2>
 80075c2:	ee18 3a10 	vmov	r3, s16
 80075c6:	4652      	mov	r2, sl
 80075c8:	4631      	mov	r1, r6
 80075ca:	4628      	mov	r0, r5
 80075cc:	47b8      	blx	r7
 80075ce:	3001      	adds	r0, #1
 80075d0:	f43f ae6b 	beq.w	80072aa <_printf_float+0xc2>
 80075d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80075d8:	2200      	movs	r2, #0
 80075da:	2300      	movs	r3, #0
 80075dc:	f7f9 fa94 	bl	8000b08 <__aeabi_dcmpeq>
 80075e0:	b9d8      	cbnz	r0, 800761a <_printf_float+0x432>
 80075e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075e4:	f108 0201 	add.w	r2, r8, #1
 80075e8:	3b01      	subs	r3, #1
 80075ea:	4631      	mov	r1, r6
 80075ec:	4628      	mov	r0, r5
 80075ee:	47b8      	blx	r7
 80075f0:	3001      	adds	r0, #1
 80075f2:	d10e      	bne.n	8007612 <_printf_float+0x42a>
 80075f4:	e659      	b.n	80072aa <_printf_float+0xc2>
 80075f6:	2301      	movs	r3, #1
 80075f8:	4652      	mov	r2, sl
 80075fa:	4631      	mov	r1, r6
 80075fc:	4628      	mov	r0, r5
 80075fe:	47b8      	blx	r7
 8007600:	3001      	adds	r0, #1
 8007602:	f43f ae52 	beq.w	80072aa <_printf_float+0xc2>
 8007606:	f108 0801 	add.w	r8, r8, #1
 800760a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800760c:	3b01      	subs	r3, #1
 800760e:	4543      	cmp	r3, r8
 8007610:	dcf1      	bgt.n	80075f6 <_printf_float+0x40e>
 8007612:	464b      	mov	r3, r9
 8007614:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007618:	e6dc      	b.n	80073d4 <_printf_float+0x1ec>
 800761a:	f04f 0800 	mov.w	r8, #0
 800761e:	f104 0a1a 	add.w	sl, r4, #26
 8007622:	e7f2      	b.n	800760a <_printf_float+0x422>
 8007624:	2301      	movs	r3, #1
 8007626:	4642      	mov	r2, r8
 8007628:	e7df      	b.n	80075ea <_printf_float+0x402>
 800762a:	2301      	movs	r3, #1
 800762c:	464a      	mov	r2, r9
 800762e:	4631      	mov	r1, r6
 8007630:	4628      	mov	r0, r5
 8007632:	47b8      	blx	r7
 8007634:	3001      	adds	r0, #1
 8007636:	f43f ae38 	beq.w	80072aa <_printf_float+0xc2>
 800763a:	f108 0801 	add.w	r8, r8, #1
 800763e:	68e3      	ldr	r3, [r4, #12]
 8007640:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007642:	1a5b      	subs	r3, r3, r1
 8007644:	4543      	cmp	r3, r8
 8007646:	dcf0      	bgt.n	800762a <_printf_float+0x442>
 8007648:	e6fa      	b.n	8007440 <_printf_float+0x258>
 800764a:	f04f 0800 	mov.w	r8, #0
 800764e:	f104 0919 	add.w	r9, r4, #25
 8007652:	e7f4      	b.n	800763e <_printf_float+0x456>

08007654 <_printf_common>:
 8007654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007658:	4616      	mov	r6, r2
 800765a:	4699      	mov	r9, r3
 800765c:	688a      	ldr	r2, [r1, #8]
 800765e:	690b      	ldr	r3, [r1, #16]
 8007660:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007664:	4293      	cmp	r3, r2
 8007666:	bfb8      	it	lt
 8007668:	4613      	movlt	r3, r2
 800766a:	6033      	str	r3, [r6, #0]
 800766c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007670:	4607      	mov	r7, r0
 8007672:	460c      	mov	r4, r1
 8007674:	b10a      	cbz	r2, 800767a <_printf_common+0x26>
 8007676:	3301      	adds	r3, #1
 8007678:	6033      	str	r3, [r6, #0]
 800767a:	6823      	ldr	r3, [r4, #0]
 800767c:	0699      	lsls	r1, r3, #26
 800767e:	bf42      	ittt	mi
 8007680:	6833      	ldrmi	r3, [r6, #0]
 8007682:	3302      	addmi	r3, #2
 8007684:	6033      	strmi	r3, [r6, #0]
 8007686:	6825      	ldr	r5, [r4, #0]
 8007688:	f015 0506 	ands.w	r5, r5, #6
 800768c:	d106      	bne.n	800769c <_printf_common+0x48>
 800768e:	f104 0a19 	add.w	sl, r4, #25
 8007692:	68e3      	ldr	r3, [r4, #12]
 8007694:	6832      	ldr	r2, [r6, #0]
 8007696:	1a9b      	subs	r3, r3, r2
 8007698:	42ab      	cmp	r3, r5
 800769a:	dc26      	bgt.n	80076ea <_printf_common+0x96>
 800769c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80076a0:	1e13      	subs	r3, r2, #0
 80076a2:	6822      	ldr	r2, [r4, #0]
 80076a4:	bf18      	it	ne
 80076a6:	2301      	movne	r3, #1
 80076a8:	0692      	lsls	r2, r2, #26
 80076aa:	d42b      	bmi.n	8007704 <_printf_common+0xb0>
 80076ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076b0:	4649      	mov	r1, r9
 80076b2:	4638      	mov	r0, r7
 80076b4:	47c0      	blx	r8
 80076b6:	3001      	adds	r0, #1
 80076b8:	d01e      	beq.n	80076f8 <_printf_common+0xa4>
 80076ba:	6823      	ldr	r3, [r4, #0]
 80076bc:	68e5      	ldr	r5, [r4, #12]
 80076be:	6832      	ldr	r2, [r6, #0]
 80076c0:	f003 0306 	and.w	r3, r3, #6
 80076c4:	2b04      	cmp	r3, #4
 80076c6:	bf08      	it	eq
 80076c8:	1aad      	subeq	r5, r5, r2
 80076ca:	68a3      	ldr	r3, [r4, #8]
 80076cc:	6922      	ldr	r2, [r4, #16]
 80076ce:	bf0c      	ite	eq
 80076d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076d4:	2500      	movne	r5, #0
 80076d6:	4293      	cmp	r3, r2
 80076d8:	bfc4      	itt	gt
 80076da:	1a9b      	subgt	r3, r3, r2
 80076dc:	18ed      	addgt	r5, r5, r3
 80076de:	2600      	movs	r6, #0
 80076e0:	341a      	adds	r4, #26
 80076e2:	42b5      	cmp	r5, r6
 80076e4:	d11a      	bne.n	800771c <_printf_common+0xc8>
 80076e6:	2000      	movs	r0, #0
 80076e8:	e008      	b.n	80076fc <_printf_common+0xa8>
 80076ea:	2301      	movs	r3, #1
 80076ec:	4652      	mov	r2, sl
 80076ee:	4649      	mov	r1, r9
 80076f0:	4638      	mov	r0, r7
 80076f2:	47c0      	blx	r8
 80076f4:	3001      	adds	r0, #1
 80076f6:	d103      	bne.n	8007700 <_printf_common+0xac>
 80076f8:	f04f 30ff 	mov.w	r0, #4294967295
 80076fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007700:	3501      	adds	r5, #1
 8007702:	e7c6      	b.n	8007692 <_printf_common+0x3e>
 8007704:	18e1      	adds	r1, r4, r3
 8007706:	1c5a      	adds	r2, r3, #1
 8007708:	2030      	movs	r0, #48	; 0x30
 800770a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800770e:	4422      	add	r2, r4
 8007710:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007714:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007718:	3302      	adds	r3, #2
 800771a:	e7c7      	b.n	80076ac <_printf_common+0x58>
 800771c:	2301      	movs	r3, #1
 800771e:	4622      	mov	r2, r4
 8007720:	4649      	mov	r1, r9
 8007722:	4638      	mov	r0, r7
 8007724:	47c0      	blx	r8
 8007726:	3001      	adds	r0, #1
 8007728:	d0e6      	beq.n	80076f8 <_printf_common+0xa4>
 800772a:	3601      	adds	r6, #1
 800772c:	e7d9      	b.n	80076e2 <_printf_common+0x8e>
	...

08007730 <_printf_i>:
 8007730:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007734:	460c      	mov	r4, r1
 8007736:	4691      	mov	r9, r2
 8007738:	7e27      	ldrb	r7, [r4, #24]
 800773a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800773c:	2f78      	cmp	r7, #120	; 0x78
 800773e:	4680      	mov	r8, r0
 8007740:	469a      	mov	sl, r3
 8007742:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007746:	d807      	bhi.n	8007758 <_printf_i+0x28>
 8007748:	2f62      	cmp	r7, #98	; 0x62
 800774a:	d80a      	bhi.n	8007762 <_printf_i+0x32>
 800774c:	2f00      	cmp	r7, #0
 800774e:	f000 80d8 	beq.w	8007902 <_printf_i+0x1d2>
 8007752:	2f58      	cmp	r7, #88	; 0x58
 8007754:	f000 80a3 	beq.w	800789e <_printf_i+0x16e>
 8007758:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800775c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007760:	e03a      	b.n	80077d8 <_printf_i+0xa8>
 8007762:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007766:	2b15      	cmp	r3, #21
 8007768:	d8f6      	bhi.n	8007758 <_printf_i+0x28>
 800776a:	a001      	add	r0, pc, #4	; (adr r0, 8007770 <_printf_i+0x40>)
 800776c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007770:	080077c9 	.word	0x080077c9
 8007774:	080077dd 	.word	0x080077dd
 8007778:	08007759 	.word	0x08007759
 800777c:	08007759 	.word	0x08007759
 8007780:	08007759 	.word	0x08007759
 8007784:	08007759 	.word	0x08007759
 8007788:	080077dd 	.word	0x080077dd
 800778c:	08007759 	.word	0x08007759
 8007790:	08007759 	.word	0x08007759
 8007794:	08007759 	.word	0x08007759
 8007798:	08007759 	.word	0x08007759
 800779c:	080078e9 	.word	0x080078e9
 80077a0:	0800780d 	.word	0x0800780d
 80077a4:	080078cb 	.word	0x080078cb
 80077a8:	08007759 	.word	0x08007759
 80077ac:	08007759 	.word	0x08007759
 80077b0:	0800790b 	.word	0x0800790b
 80077b4:	08007759 	.word	0x08007759
 80077b8:	0800780d 	.word	0x0800780d
 80077bc:	08007759 	.word	0x08007759
 80077c0:	08007759 	.word	0x08007759
 80077c4:	080078d3 	.word	0x080078d3
 80077c8:	680b      	ldr	r3, [r1, #0]
 80077ca:	1d1a      	adds	r2, r3, #4
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	600a      	str	r2, [r1, #0]
 80077d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80077d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077d8:	2301      	movs	r3, #1
 80077da:	e0a3      	b.n	8007924 <_printf_i+0x1f4>
 80077dc:	6825      	ldr	r5, [r4, #0]
 80077de:	6808      	ldr	r0, [r1, #0]
 80077e0:	062e      	lsls	r6, r5, #24
 80077e2:	f100 0304 	add.w	r3, r0, #4
 80077e6:	d50a      	bpl.n	80077fe <_printf_i+0xce>
 80077e8:	6805      	ldr	r5, [r0, #0]
 80077ea:	600b      	str	r3, [r1, #0]
 80077ec:	2d00      	cmp	r5, #0
 80077ee:	da03      	bge.n	80077f8 <_printf_i+0xc8>
 80077f0:	232d      	movs	r3, #45	; 0x2d
 80077f2:	426d      	negs	r5, r5
 80077f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077f8:	485e      	ldr	r0, [pc, #376]	; (8007974 <_printf_i+0x244>)
 80077fa:	230a      	movs	r3, #10
 80077fc:	e019      	b.n	8007832 <_printf_i+0x102>
 80077fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007802:	6805      	ldr	r5, [r0, #0]
 8007804:	600b      	str	r3, [r1, #0]
 8007806:	bf18      	it	ne
 8007808:	b22d      	sxthne	r5, r5
 800780a:	e7ef      	b.n	80077ec <_printf_i+0xbc>
 800780c:	680b      	ldr	r3, [r1, #0]
 800780e:	6825      	ldr	r5, [r4, #0]
 8007810:	1d18      	adds	r0, r3, #4
 8007812:	6008      	str	r0, [r1, #0]
 8007814:	0628      	lsls	r0, r5, #24
 8007816:	d501      	bpl.n	800781c <_printf_i+0xec>
 8007818:	681d      	ldr	r5, [r3, #0]
 800781a:	e002      	b.n	8007822 <_printf_i+0xf2>
 800781c:	0669      	lsls	r1, r5, #25
 800781e:	d5fb      	bpl.n	8007818 <_printf_i+0xe8>
 8007820:	881d      	ldrh	r5, [r3, #0]
 8007822:	4854      	ldr	r0, [pc, #336]	; (8007974 <_printf_i+0x244>)
 8007824:	2f6f      	cmp	r7, #111	; 0x6f
 8007826:	bf0c      	ite	eq
 8007828:	2308      	moveq	r3, #8
 800782a:	230a      	movne	r3, #10
 800782c:	2100      	movs	r1, #0
 800782e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007832:	6866      	ldr	r6, [r4, #4]
 8007834:	60a6      	str	r6, [r4, #8]
 8007836:	2e00      	cmp	r6, #0
 8007838:	bfa2      	ittt	ge
 800783a:	6821      	ldrge	r1, [r4, #0]
 800783c:	f021 0104 	bicge.w	r1, r1, #4
 8007840:	6021      	strge	r1, [r4, #0]
 8007842:	b90d      	cbnz	r5, 8007848 <_printf_i+0x118>
 8007844:	2e00      	cmp	r6, #0
 8007846:	d04d      	beq.n	80078e4 <_printf_i+0x1b4>
 8007848:	4616      	mov	r6, r2
 800784a:	fbb5 f1f3 	udiv	r1, r5, r3
 800784e:	fb03 5711 	mls	r7, r3, r1, r5
 8007852:	5dc7      	ldrb	r7, [r0, r7]
 8007854:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007858:	462f      	mov	r7, r5
 800785a:	42bb      	cmp	r3, r7
 800785c:	460d      	mov	r5, r1
 800785e:	d9f4      	bls.n	800784a <_printf_i+0x11a>
 8007860:	2b08      	cmp	r3, #8
 8007862:	d10b      	bne.n	800787c <_printf_i+0x14c>
 8007864:	6823      	ldr	r3, [r4, #0]
 8007866:	07df      	lsls	r7, r3, #31
 8007868:	d508      	bpl.n	800787c <_printf_i+0x14c>
 800786a:	6923      	ldr	r3, [r4, #16]
 800786c:	6861      	ldr	r1, [r4, #4]
 800786e:	4299      	cmp	r1, r3
 8007870:	bfde      	ittt	le
 8007872:	2330      	movle	r3, #48	; 0x30
 8007874:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007878:	f106 36ff 	addle.w	r6, r6, #4294967295
 800787c:	1b92      	subs	r2, r2, r6
 800787e:	6122      	str	r2, [r4, #16]
 8007880:	f8cd a000 	str.w	sl, [sp]
 8007884:	464b      	mov	r3, r9
 8007886:	aa03      	add	r2, sp, #12
 8007888:	4621      	mov	r1, r4
 800788a:	4640      	mov	r0, r8
 800788c:	f7ff fee2 	bl	8007654 <_printf_common>
 8007890:	3001      	adds	r0, #1
 8007892:	d14c      	bne.n	800792e <_printf_i+0x1fe>
 8007894:	f04f 30ff 	mov.w	r0, #4294967295
 8007898:	b004      	add	sp, #16
 800789a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800789e:	4835      	ldr	r0, [pc, #212]	; (8007974 <_printf_i+0x244>)
 80078a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80078a4:	6823      	ldr	r3, [r4, #0]
 80078a6:	680e      	ldr	r6, [r1, #0]
 80078a8:	061f      	lsls	r7, r3, #24
 80078aa:	f856 5b04 	ldr.w	r5, [r6], #4
 80078ae:	600e      	str	r6, [r1, #0]
 80078b0:	d514      	bpl.n	80078dc <_printf_i+0x1ac>
 80078b2:	07d9      	lsls	r1, r3, #31
 80078b4:	bf44      	itt	mi
 80078b6:	f043 0320 	orrmi.w	r3, r3, #32
 80078ba:	6023      	strmi	r3, [r4, #0]
 80078bc:	b91d      	cbnz	r5, 80078c6 <_printf_i+0x196>
 80078be:	6823      	ldr	r3, [r4, #0]
 80078c0:	f023 0320 	bic.w	r3, r3, #32
 80078c4:	6023      	str	r3, [r4, #0]
 80078c6:	2310      	movs	r3, #16
 80078c8:	e7b0      	b.n	800782c <_printf_i+0xfc>
 80078ca:	6823      	ldr	r3, [r4, #0]
 80078cc:	f043 0320 	orr.w	r3, r3, #32
 80078d0:	6023      	str	r3, [r4, #0]
 80078d2:	2378      	movs	r3, #120	; 0x78
 80078d4:	4828      	ldr	r0, [pc, #160]	; (8007978 <_printf_i+0x248>)
 80078d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80078da:	e7e3      	b.n	80078a4 <_printf_i+0x174>
 80078dc:	065e      	lsls	r6, r3, #25
 80078de:	bf48      	it	mi
 80078e0:	b2ad      	uxthmi	r5, r5
 80078e2:	e7e6      	b.n	80078b2 <_printf_i+0x182>
 80078e4:	4616      	mov	r6, r2
 80078e6:	e7bb      	b.n	8007860 <_printf_i+0x130>
 80078e8:	680b      	ldr	r3, [r1, #0]
 80078ea:	6826      	ldr	r6, [r4, #0]
 80078ec:	6960      	ldr	r0, [r4, #20]
 80078ee:	1d1d      	adds	r5, r3, #4
 80078f0:	600d      	str	r5, [r1, #0]
 80078f2:	0635      	lsls	r5, r6, #24
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	d501      	bpl.n	80078fc <_printf_i+0x1cc>
 80078f8:	6018      	str	r0, [r3, #0]
 80078fa:	e002      	b.n	8007902 <_printf_i+0x1d2>
 80078fc:	0671      	lsls	r1, r6, #25
 80078fe:	d5fb      	bpl.n	80078f8 <_printf_i+0x1c8>
 8007900:	8018      	strh	r0, [r3, #0]
 8007902:	2300      	movs	r3, #0
 8007904:	6123      	str	r3, [r4, #16]
 8007906:	4616      	mov	r6, r2
 8007908:	e7ba      	b.n	8007880 <_printf_i+0x150>
 800790a:	680b      	ldr	r3, [r1, #0]
 800790c:	1d1a      	adds	r2, r3, #4
 800790e:	600a      	str	r2, [r1, #0]
 8007910:	681e      	ldr	r6, [r3, #0]
 8007912:	6862      	ldr	r2, [r4, #4]
 8007914:	2100      	movs	r1, #0
 8007916:	4630      	mov	r0, r6
 8007918:	f7f8 fc82 	bl	8000220 <memchr>
 800791c:	b108      	cbz	r0, 8007922 <_printf_i+0x1f2>
 800791e:	1b80      	subs	r0, r0, r6
 8007920:	6060      	str	r0, [r4, #4]
 8007922:	6863      	ldr	r3, [r4, #4]
 8007924:	6123      	str	r3, [r4, #16]
 8007926:	2300      	movs	r3, #0
 8007928:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800792c:	e7a8      	b.n	8007880 <_printf_i+0x150>
 800792e:	6923      	ldr	r3, [r4, #16]
 8007930:	4632      	mov	r2, r6
 8007932:	4649      	mov	r1, r9
 8007934:	4640      	mov	r0, r8
 8007936:	47d0      	blx	sl
 8007938:	3001      	adds	r0, #1
 800793a:	d0ab      	beq.n	8007894 <_printf_i+0x164>
 800793c:	6823      	ldr	r3, [r4, #0]
 800793e:	079b      	lsls	r3, r3, #30
 8007940:	d413      	bmi.n	800796a <_printf_i+0x23a>
 8007942:	68e0      	ldr	r0, [r4, #12]
 8007944:	9b03      	ldr	r3, [sp, #12]
 8007946:	4298      	cmp	r0, r3
 8007948:	bfb8      	it	lt
 800794a:	4618      	movlt	r0, r3
 800794c:	e7a4      	b.n	8007898 <_printf_i+0x168>
 800794e:	2301      	movs	r3, #1
 8007950:	4632      	mov	r2, r6
 8007952:	4649      	mov	r1, r9
 8007954:	4640      	mov	r0, r8
 8007956:	47d0      	blx	sl
 8007958:	3001      	adds	r0, #1
 800795a:	d09b      	beq.n	8007894 <_printf_i+0x164>
 800795c:	3501      	adds	r5, #1
 800795e:	68e3      	ldr	r3, [r4, #12]
 8007960:	9903      	ldr	r1, [sp, #12]
 8007962:	1a5b      	subs	r3, r3, r1
 8007964:	42ab      	cmp	r3, r5
 8007966:	dcf2      	bgt.n	800794e <_printf_i+0x21e>
 8007968:	e7eb      	b.n	8007942 <_printf_i+0x212>
 800796a:	2500      	movs	r5, #0
 800796c:	f104 0619 	add.w	r6, r4, #25
 8007970:	e7f5      	b.n	800795e <_printf_i+0x22e>
 8007972:	bf00      	nop
 8007974:	08009e3e 	.word	0x08009e3e
 8007978:	08009e4f 	.word	0x08009e4f

0800797c <siprintf>:
 800797c:	b40e      	push	{r1, r2, r3}
 800797e:	b500      	push	{lr}
 8007980:	b09c      	sub	sp, #112	; 0x70
 8007982:	ab1d      	add	r3, sp, #116	; 0x74
 8007984:	9002      	str	r0, [sp, #8]
 8007986:	9006      	str	r0, [sp, #24]
 8007988:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800798c:	4809      	ldr	r0, [pc, #36]	; (80079b4 <siprintf+0x38>)
 800798e:	9107      	str	r1, [sp, #28]
 8007990:	9104      	str	r1, [sp, #16]
 8007992:	4909      	ldr	r1, [pc, #36]	; (80079b8 <siprintf+0x3c>)
 8007994:	f853 2b04 	ldr.w	r2, [r3], #4
 8007998:	9105      	str	r1, [sp, #20]
 800799a:	6800      	ldr	r0, [r0, #0]
 800799c:	9301      	str	r3, [sp, #4]
 800799e:	a902      	add	r1, sp, #8
 80079a0:	f001 fb26 	bl	8008ff0 <_svfiprintf_r>
 80079a4:	9b02      	ldr	r3, [sp, #8]
 80079a6:	2200      	movs	r2, #0
 80079a8:	701a      	strb	r2, [r3, #0]
 80079aa:	b01c      	add	sp, #112	; 0x70
 80079ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80079b0:	b003      	add	sp, #12
 80079b2:	4770      	bx	lr
 80079b4:	2000005c 	.word	0x2000005c
 80079b8:	ffff0208 	.word	0xffff0208

080079bc <quorem>:
 80079bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c0:	6903      	ldr	r3, [r0, #16]
 80079c2:	690c      	ldr	r4, [r1, #16]
 80079c4:	42a3      	cmp	r3, r4
 80079c6:	4607      	mov	r7, r0
 80079c8:	f2c0 8081 	blt.w	8007ace <quorem+0x112>
 80079cc:	3c01      	subs	r4, #1
 80079ce:	f101 0814 	add.w	r8, r1, #20
 80079d2:	f100 0514 	add.w	r5, r0, #20
 80079d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079da:	9301      	str	r3, [sp, #4]
 80079dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80079e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079e4:	3301      	adds	r3, #1
 80079e6:	429a      	cmp	r2, r3
 80079e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80079ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80079f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80079f4:	d331      	bcc.n	8007a5a <quorem+0x9e>
 80079f6:	f04f 0e00 	mov.w	lr, #0
 80079fa:	4640      	mov	r0, r8
 80079fc:	46ac      	mov	ip, r5
 80079fe:	46f2      	mov	sl, lr
 8007a00:	f850 2b04 	ldr.w	r2, [r0], #4
 8007a04:	b293      	uxth	r3, r2
 8007a06:	fb06 e303 	mla	r3, r6, r3, lr
 8007a0a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	ebaa 0303 	sub.w	r3, sl, r3
 8007a14:	0c12      	lsrs	r2, r2, #16
 8007a16:	f8dc a000 	ldr.w	sl, [ip]
 8007a1a:	fb06 e202 	mla	r2, r6, r2, lr
 8007a1e:	fa13 f38a 	uxtah	r3, r3, sl
 8007a22:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007a26:	fa1f fa82 	uxth.w	sl, r2
 8007a2a:	f8dc 2000 	ldr.w	r2, [ip]
 8007a2e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007a32:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a3c:	4581      	cmp	r9, r0
 8007a3e:	f84c 3b04 	str.w	r3, [ip], #4
 8007a42:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007a46:	d2db      	bcs.n	8007a00 <quorem+0x44>
 8007a48:	f855 300b 	ldr.w	r3, [r5, fp]
 8007a4c:	b92b      	cbnz	r3, 8007a5a <quorem+0x9e>
 8007a4e:	9b01      	ldr	r3, [sp, #4]
 8007a50:	3b04      	subs	r3, #4
 8007a52:	429d      	cmp	r5, r3
 8007a54:	461a      	mov	r2, r3
 8007a56:	d32e      	bcc.n	8007ab6 <quorem+0xfa>
 8007a58:	613c      	str	r4, [r7, #16]
 8007a5a:	4638      	mov	r0, r7
 8007a5c:	f001 f8b2 	bl	8008bc4 <__mcmp>
 8007a60:	2800      	cmp	r0, #0
 8007a62:	db24      	blt.n	8007aae <quorem+0xf2>
 8007a64:	3601      	adds	r6, #1
 8007a66:	4628      	mov	r0, r5
 8007a68:	f04f 0c00 	mov.w	ip, #0
 8007a6c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007a70:	f8d0 e000 	ldr.w	lr, [r0]
 8007a74:	b293      	uxth	r3, r2
 8007a76:	ebac 0303 	sub.w	r3, ip, r3
 8007a7a:	0c12      	lsrs	r2, r2, #16
 8007a7c:	fa13 f38e 	uxtah	r3, r3, lr
 8007a80:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007a84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a8e:	45c1      	cmp	r9, r8
 8007a90:	f840 3b04 	str.w	r3, [r0], #4
 8007a94:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007a98:	d2e8      	bcs.n	8007a6c <quorem+0xb0>
 8007a9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007aa2:	b922      	cbnz	r2, 8007aae <quorem+0xf2>
 8007aa4:	3b04      	subs	r3, #4
 8007aa6:	429d      	cmp	r5, r3
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	d30a      	bcc.n	8007ac2 <quorem+0x106>
 8007aac:	613c      	str	r4, [r7, #16]
 8007aae:	4630      	mov	r0, r6
 8007ab0:	b003      	add	sp, #12
 8007ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ab6:	6812      	ldr	r2, [r2, #0]
 8007ab8:	3b04      	subs	r3, #4
 8007aba:	2a00      	cmp	r2, #0
 8007abc:	d1cc      	bne.n	8007a58 <quorem+0x9c>
 8007abe:	3c01      	subs	r4, #1
 8007ac0:	e7c7      	b.n	8007a52 <quorem+0x96>
 8007ac2:	6812      	ldr	r2, [r2, #0]
 8007ac4:	3b04      	subs	r3, #4
 8007ac6:	2a00      	cmp	r2, #0
 8007ac8:	d1f0      	bne.n	8007aac <quorem+0xf0>
 8007aca:	3c01      	subs	r4, #1
 8007acc:	e7eb      	b.n	8007aa6 <quorem+0xea>
 8007ace:	2000      	movs	r0, #0
 8007ad0:	e7ee      	b.n	8007ab0 <quorem+0xf4>
 8007ad2:	0000      	movs	r0, r0
 8007ad4:	0000      	movs	r0, r0
	...

08007ad8 <_dtoa_r>:
 8007ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007adc:	ed2d 8b02 	vpush	{d8}
 8007ae0:	ec57 6b10 	vmov	r6, r7, d0
 8007ae4:	b095      	sub	sp, #84	; 0x54
 8007ae6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007ae8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007aec:	9105      	str	r1, [sp, #20]
 8007aee:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007af2:	4604      	mov	r4, r0
 8007af4:	9209      	str	r2, [sp, #36]	; 0x24
 8007af6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007af8:	b975      	cbnz	r5, 8007b18 <_dtoa_r+0x40>
 8007afa:	2010      	movs	r0, #16
 8007afc:	f000 fddc 	bl	80086b8 <malloc>
 8007b00:	4602      	mov	r2, r0
 8007b02:	6260      	str	r0, [r4, #36]	; 0x24
 8007b04:	b920      	cbnz	r0, 8007b10 <_dtoa_r+0x38>
 8007b06:	4bb2      	ldr	r3, [pc, #712]	; (8007dd0 <_dtoa_r+0x2f8>)
 8007b08:	21ea      	movs	r1, #234	; 0xea
 8007b0a:	48b2      	ldr	r0, [pc, #712]	; (8007dd4 <_dtoa_r+0x2fc>)
 8007b0c:	f001 fb80 	bl	8009210 <__assert_func>
 8007b10:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007b14:	6005      	str	r5, [r0, #0]
 8007b16:	60c5      	str	r5, [r0, #12]
 8007b18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b1a:	6819      	ldr	r1, [r3, #0]
 8007b1c:	b151      	cbz	r1, 8007b34 <_dtoa_r+0x5c>
 8007b1e:	685a      	ldr	r2, [r3, #4]
 8007b20:	604a      	str	r2, [r1, #4]
 8007b22:	2301      	movs	r3, #1
 8007b24:	4093      	lsls	r3, r2
 8007b26:	608b      	str	r3, [r1, #8]
 8007b28:	4620      	mov	r0, r4
 8007b2a:	f000 fe0d 	bl	8008748 <_Bfree>
 8007b2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b30:	2200      	movs	r2, #0
 8007b32:	601a      	str	r2, [r3, #0]
 8007b34:	1e3b      	subs	r3, r7, #0
 8007b36:	bfb9      	ittee	lt
 8007b38:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007b3c:	9303      	strlt	r3, [sp, #12]
 8007b3e:	2300      	movge	r3, #0
 8007b40:	f8c8 3000 	strge.w	r3, [r8]
 8007b44:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007b48:	4ba3      	ldr	r3, [pc, #652]	; (8007dd8 <_dtoa_r+0x300>)
 8007b4a:	bfbc      	itt	lt
 8007b4c:	2201      	movlt	r2, #1
 8007b4e:	f8c8 2000 	strlt.w	r2, [r8]
 8007b52:	ea33 0309 	bics.w	r3, r3, r9
 8007b56:	d11b      	bne.n	8007b90 <_dtoa_r+0xb8>
 8007b58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b5a:	f242 730f 	movw	r3, #9999	; 0x270f
 8007b5e:	6013      	str	r3, [r2, #0]
 8007b60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b64:	4333      	orrs	r3, r6
 8007b66:	f000 857a 	beq.w	800865e <_dtoa_r+0xb86>
 8007b6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b6c:	b963      	cbnz	r3, 8007b88 <_dtoa_r+0xb0>
 8007b6e:	4b9b      	ldr	r3, [pc, #620]	; (8007ddc <_dtoa_r+0x304>)
 8007b70:	e024      	b.n	8007bbc <_dtoa_r+0xe4>
 8007b72:	4b9b      	ldr	r3, [pc, #620]	; (8007de0 <_dtoa_r+0x308>)
 8007b74:	9300      	str	r3, [sp, #0]
 8007b76:	3308      	adds	r3, #8
 8007b78:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007b7a:	6013      	str	r3, [r2, #0]
 8007b7c:	9800      	ldr	r0, [sp, #0]
 8007b7e:	b015      	add	sp, #84	; 0x54
 8007b80:	ecbd 8b02 	vpop	{d8}
 8007b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b88:	4b94      	ldr	r3, [pc, #592]	; (8007ddc <_dtoa_r+0x304>)
 8007b8a:	9300      	str	r3, [sp, #0]
 8007b8c:	3303      	adds	r3, #3
 8007b8e:	e7f3      	b.n	8007b78 <_dtoa_r+0xa0>
 8007b90:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b94:	2200      	movs	r2, #0
 8007b96:	ec51 0b17 	vmov	r0, r1, d7
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007ba0:	f7f8 ffb2 	bl	8000b08 <__aeabi_dcmpeq>
 8007ba4:	4680      	mov	r8, r0
 8007ba6:	b158      	cbz	r0, 8007bc0 <_dtoa_r+0xe8>
 8007ba8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007baa:	2301      	movs	r3, #1
 8007bac:	6013      	str	r3, [r2, #0]
 8007bae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	f000 8551 	beq.w	8008658 <_dtoa_r+0xb80>
 8007bb6:	488b      	ldr	r0, [pc, #556]	; (8007de4 <_dtoa_r+0x30c>)
 8007bb8:	6018      	str	r0, [r3, #0]
 8007bba:	1e43      	subs	r3, r0, #1
 8007bbc:	9300      	str	r3, [sp, #0]
 8007bbe:	e7dd      	b.n	8007b7c <_dtoa_r+0xa4>
 8007bc0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007bc4:	aa12      	add	r2, sp, #72	; 0x48
 8007bc6:	a913      	add	r1, sp, #76	; 0x4c
 8007bc8:	4620      	mov	r0, r4
 8007bca:	f001 f89f 	bl	8008d0c <__d2b>
 8007bce:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007bd2:	4683      	mov	fp, r0
 8007bd4:	2d00      	cmp	r5, #0
 8007bd6:	d07c      	beq.n	8007cd2 <_dtoa_r+0x1fa>
 8007bd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bda:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007bde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007be2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007be6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007bea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007bee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007bf2:	4b7d      	ldr	r3, [pc, #500]	; (8007de8 <_dtoa_r+0x310>)
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	4630      	mov	r0, r6
 8007bf8:	4639      	mov	r1, r7
 8007bfa:	f7f8 fb65 	bl	80002c8 <__aeabi_dsub>
 8007bfe:	a36e      	add	r3, pc, #440	; (adr r3, 8007db8 <_dtoa_r+0x2e0>)
 8007c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c04:	f7f8 fd18 	bl	8000638 <__aeabi_dmul>
 8007c08:	a36d      	add	r3, pc, #436	; (adr r3, 8007dc0 <_dtoa_r+0x2e8>)
 8007c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0e:	f7f8 fb5d 	bl	80002cc <__adddf3>
 8007c12:	4606      	mov	r6, r0
 8007c14:	4628      	mov	r0, r5
 8007c16:	460f      	mov	r7, r1
 8007c18:	f7f8 fca4 	bl	8000564 <__aeabi_i2d>
 8007c1c:	a36a      	add	r3, pc, #424	; (adr r3, 8007dc8 <_dtoa_r+0x2f0>)
 8007c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c22:	f7f8 fd09 	bl	8000638 <__aeabi_dmul>
 8007c26:	4602      	mov	r2, r0
 8007c28:	460b      	mov	r3, r1
 8007c2a:	4630      	mov	r0, r6
 8007c2c:	4639      	mov	r1, r7
 8007c2e:	f7f8 fb4d 	bl	80002cc <__adddf3>
 8007c32:	4606      	mov	r6, r0
 8007c34:	460f      	mov	r7, r1
 8007c36:	f7f8 ffaf 	bl	8000b98 <__aeabi_d2iz>
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	4682      	mov	sl, r0
 8007c3e:	2300      	movs	r3, #0
 8007c40:	4630      	mov	r0, r6
 8007c42:	4639      	mov	r1, r7
 8007c44:	f7f8 ff6a 	bl	8000b1c <__aeabi_dcmplt>
 8007c48:	b148      	cbz	r0, 8007c5e <_dtoa_r+0x186>
 8007c4a:	4650      	mov	r0, sl
 8007c4c:	f7f8 fc8a 	bl	8000564 <__aeabi_i2d>
 8007c50:	4632      	mov	r2, r6
 8007c52:	463b      	mov	r3, r7
 8007c54:	f7f8 ff58 	bl	8000b08 <__aeabi_dcmpeq>
 8007c58:	b908      	cbnz	r0, 8007c5e <_dtoa_r+0x186>
 8007c5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c5e:	f1ba 0f16 	cmp.w	sl, #22
 8007c62:	d854      	bhi.n	8007d0e <_dtoa_r+0x236>
 8007c64:	4b61      	ldr	r3, [pc, #388]	; (8007dec <_dtoa_r+0x314>)
 8007c66:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007c72:	f7f8 ff53 	bl	8000b1c <__aeabi_dcmplt>
 8007c76:	2800      	cmp	r0, #0
 8007c78:	d04b      	beq.n	8007d12 <_dtoa_r+0x23a>
 8007c7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c7e:	2300      	movs	r3, #0
 8007c80:	930e      	str	r3, [sp, #56]	; 0x38
 8007c82:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c84:	1b5d      	subs	r5, r3, r5
 8007c86:	1e6b      	subs	r3, r5, #1
 8007c88:	9304      	str	r3, [sp, #16]
 8007c8a:	bf43      	ittte	mi
 8007c8c:	2300      	movmi	r3, #0
 8007c8e:	f1c5 0801 	rsbmi	r8, r5, #1
 8007c92:	9304      	strmi	r3, [sp, #16]
 8007c94:	f04f 0800 	movpl.w	r8, #0
 8007c98:	f1ba 0f00 	cmp.w	sl, #0
 8007c9c:	db3b      	blt.n	8007d16 <_dtoa_r+0x23e>
 8007c9e:	9b04      	ldr	r3, [sp, #16]
 8007ca0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007ca4:	4453      	add	r3, sl
 8007ca6:	9304      	str	r3, [sp, #16]
 8007ca8:	2300      	movs	r3, #0
 8007caa:	9306      	str	r3, [sp, #24]
 8007cac:	9b05      	ldr	r3, [sp, #20]
 8007cae:	2b09      	cmp	r3, #9
 8007cb0:	d869      	bhi.n	8007d86 <_dtoa_r+0x2ae>
 8007cb2:	2b05      	cmp	r3, #5
 8007cb4:	bfc4      	itt	gt
 8007cb6:	3b04      	subgt	r3, #4
 8007cb8:	9305      	strgt	r3, [sp, #20]
 8007cba:	9b05      	ldr	r3, [sp, #20]
 8007cbc:	f1a3 0302 	sub.w	r3, r3, #2
 8007cc0:	bfcc      	ite	gt
 8007cc2:	2500      	movgt	r5, #0
 8007cc4:	2501      	movle	r5, #1
 8007cc6:	2b03      	cmp	r3, #3
 8007cc8:	d869      	bhi.n	8007d9e <_dtoa_r+0x2c6>
 8007cca:	e8df f003 	tbb	[pc, r3]
 8007cce:	4e2c      	.short	0x4e2c
 8007cd0:	5a4c      	.short	0x5a4c
 8007cd2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007cd6:	441d      	add	r5, r3
 8007cd8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007cdc:	2b20      	cmp	r3, #32
 8007cde:	bfc1      	itttt	gt
 8007ce0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007ce4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007ce8:	fa09 f303 	lslgt.w	r3, r9, r3
 8007cec:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007cf0:	bfda      	itte	le
 8007cf2:	f1c3 0320 	rsble	r3, r3, #32
 8007cf6:	fa06 f003 	lslle.w	r0, r6, r3
 8007cfa:	4318      	orrgt	r0, r3
 8007cfc:	f7f8 fc22 	bl	8000544 <__aeabi_ui2d>
 8007d00:	2301      	movs	r3, #1
 8007d02:	4606      	mov	r6, r0
 8007d04:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007d08:	3d01      	subs	r5, #1
 8007d0a:	9310      	str	r3, [sp, #64]	; 0x40
 8007d0c:	e771      	b.n	8007bf2 <_dtoa_r+0x11a>
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e7b6      	b.n	8007c80 <_dtoa_r+0x1a8>
 8007d12:	900e      	str	r0, [sp, #56]	; 0x38
 8007d14:	e7b5      	b.n	8007c82 <_dtoa_r+0x1aa>
 8007d16:	f1ca 0300 	rsb	r3, sl, #0
 8007d1a:	9306      	str	r3, [sp, #24]
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	eba8 080a 	sub.w	r8, r8, sl
 8007d22:	930d      	str	r3, [sp, #52]	; 0x34
 8007d24:	e7c2      	b.n	8007cac <_dtoa_r+0x1d4>
 8007d26:	2300      	movs	r3, #0
 8007d28:	9308      	str	r3, [sp, #32]
 8007d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	dc39      	bgt.n	8007da4 <_dtoa_r+0x2cc>
 8007d30:	f04f 0901 	mov.w	r9, #1
 8007d34:	f8cd 9004 	str.w	r9, [sp, #4]
 8007d38:	464b      	mov	r3, r9
 8007d3a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007d3e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007d40:	2200      	movs	r2, #0
 8007d42:	6042      	str	r2, [r0, #4]
 8007d44:	2204      	movs	r2, #4
 8007d46:	f102 0614 	add.w	r6, r2, #20
 8007d4a:	429e      	cmp	r6, r3
 8007d4c:	6841      	ldr	r1, [r0, #4]
 8007d4e:	d92f      	bls.n	8007db0 <_dtoa_r+0x2d8>
 8007d50:	4620      	mov	r0, r4
 8007d52:	f000 fcb9 	bl	80086c8 <_Balloc>
 8007d56:	9000      	str	r0, [sp, #0]
 8007d58:	2800      	cmp	r0, #0
 8007d5a:	d14b      	bne.n	8007df4 <_dtoa_r+0x31c>
 8007d5c:	4b24      	ldr	r3, [pc, #144]	; (8007df0 <_dtoa_r+0x318>)
 8007d5e:	4602      	mov	r2, r0
 8007d60:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007d64:	e6d1      	b.n	8007b0a <_dtoa_r+0x32>
 8007d66:	2301      	movs	r3, #1
 8007d68:	e7de      	b.n	8007d28 <_dtoa_r+0x250>
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	9308      	str	r3, [sp, #32]
 8007d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d70:	eb0a 0903 	add.w	r9, sl, r3
 8007d74:	f109 0301 	add.w	r3, r9, #1
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	9301      	str	r3, [sp, #4]
 8007d7c:	bfb8      	it	lt
 8007d7e:	2301      	movlt	r3, #1
 8007d80:	e7dd      	b.n	8007d3e <_dtoa_r+0x266>
 8007d82:	2301      	movs	r3, #1
 8007d84:	e7f2      	b.n	8007d6c <_dtoa_r+0x294>
 8007d86:	2501      	movs	r5, #1
 8007d88:	2300      	movs	r3, #0
 8007d8a:	9305      	str	r3, [sp, #20]
 8007d8c:	9508      	str	r5, [sp, #32]
 8007d8e:	f04f 39ff 	mov.w	r9, #4294967295
 8007d92:	2200      	movs	r2, #0
 8007d94:	f8cd 9004 	str.w	r9, [sp, #4]
 8007d98:	2312      	movs	r3, #18
 8007d9a:	9209      	str	r2, [sp, #36]	; 0x24
 8007d9c:	e7cf      	b.n	8007d3e <_dtoa_r+0x266>
 8007d9e:	2301      	movs	r3, #1
 8007da0:	9308      	str	r3, [sp, #32]
 8007da2:	e7f4      	b.n	8007d8e <_dtoa_r+0x2b6>
 8007da4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007da8:	f8cd 9004 	str.w	r9, [sp, #4]
 8007dac:	464b      	mov	r3, r9
 8007dae:	e7c6      	b.n	8007d3e <_dtoa_r+0x266>
 8007db0:	3101      	adds	r1, #1
 8007db2:	6041      	str	r1, [r0, #4]
 8007db4:	0052      	lsls	r2, r2, #1
 8007db6:	e7c6      	b.n	8007d46 <_dtoa_r+0x26e>
 8007db8:	636f4361 	.word	0x636f4361
 8007dbc:	3fd287a7 	.word	0x3fd287a7
 8007dc0:	8b60c8b3 	.word	0x8b60c8b3
 8007dc4:	3fc68a28 	.word	0x3fc68a28
 8007dc8:	509f79fb 	.word	0x509f79fb
 8007dcc:	3fd34413 	.word	0x3fd34413
 8007dd0:	08009e6d 	.word	0x08009e6d
 8007dd4:	08009e84 	.word	0x08009e84
 8007dd8:	7ff00000 	.word	0x7ff00000
 8007ddc:	08009e69 	.word	0x08009e69
 8007de0:	08009e60 	.word	0x08009e60
 8007de4:	08009e3d 	.word	0x08009e3d
 8007de8:	3ff80000 	.word	0x3ff80000
 8007dec:	08009f80 	.word	0x08009f80
 8007df0:	08009ee3 	.word	0x08009ee3
 8007df4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007df6:	9a00      	ldr	r2, [sp, #0]
 8007df8:	601a      	str	r2, [r3, #0]
 8007dfa:	9b01      	ldr	r3, [sp, #4]
 8007dfc:	2b0e      	cmp	r3, #14
 8007dfe:	f200 80ad 	bhi.w	8007f5c <_dtoa_r+0x484>
 8007e02:	2d00      	cmp	r5, #0
 8007e04:	f000 80aa 	beq.w	8007f5c <_dtoa_r+0x484>
 8007e08:	f1ba 0f00 	cmp.w	sl, #0
 8007e0c:	dd36      	ble.n	8007e7c <_dtoa_r+0x3a4>
 8007e0e:	4ac3      	ldr	r2, [pc, #780]	; (800811c <_dtoa_r+0x644>)
 8007e10:	f00a 030f 	and.w	r3, sl, #15
 8007e14:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007e18:	ed93 7b00 	vldr	d7, [r3]
 8007e1c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007e20:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007e24:	eeb0 8a47 	vmov.f32	s16, s14
 8007e28:	eef0 8a67 	vmov.f32	s17, s15
 8007e2c:	d016      	beq.n	8007e5c <_dtoa_r+0x384>
 8007e2e:	4bbc      	ldr	r3, [pc, #752]	; (8008120 <_dtoa_r+0x648>)
 8007e30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007e34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e38:	f7f8 fd28 	bl	800088c <__aeabi_ddiv>
 8007e3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e40:	f007 070f 	and.w	r7, r7, #15
 8007e44:	2503      	movs	r5, #3
 8007e46:	4eb6      	ldr	r6, [pc, #728]	; (8008120 <_dtoa_r+0x648>)
 8007e48:	b957      	cbnz	r7, 8007e60 <_dtoa_r+0x388>
 8007e4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e4e:	ec53 2b18 	vmov	r2, r3, d8
 8007e52:	f7f8 fd1b 	bl	800088c <__aeabi_ddiv>
 8007e56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e5a:	e029      	b.n	8007eb0 <_dtoa_r+0x3d8>
 8007e5c:	2502      	movs	r5, #2
 8007e5e:	e7f2      	b.n	8007e46 <_dtoa_r+0x36e>
 8007e60:	07f9      	lsls	r1, r7, #31
 8007e62:	d508      	bpl.n	8007e76 <_dtoa_r+0x39e>
 8007e64:	ec51 0b18 	vmov	r0, r1, d8
 8007e68:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007e6c:	f7f8 fbe4 	bl	8000638 <__aeabi_dmul>
 8007e70:	ec41 0b18 	vmov	d8, r0, r1
 8007e74:	3501      	adds	r5, #1
 8007e76:	107f      	asrs	r7, r7, #1
 8007e78:	3608      	adds	r6, #8
 8007e7a:	e7e5      	b.n	8007e48 <_dtoa_r+0x370>
 8007e7c:	f000 80a6 	beq.w	8007fcc <_dtoa_r+0x4f4>
 8007e80:	f1ca 0600 	rsb	r6, sl, #0
 8007e84:	4ba5      	ldr	r3, [pc, #660]	; (800811c <_dtoa_r+0x644>)
 8007e86:	4fa6      	ldr	r7, [pc, #664]	; (8008120 <_dtoa_r+0x648>)
 8007e88:	f006 020f 	and.w	r2, r6, #15
 8007e8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e94:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007e98:	f7f8 fbce 	bl	8000638 <__aeabi_dmul>
 8007e9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ea0:	1136      	asrs	r6, r6, #4
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	2502      	movs	r5, #2
 8007ea6:	2e00      	cmp	r6, #0
 8007ea8:	f040 8085 	bne.w	8007fb6 <_dtoa_r+0x4de>
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d1d2      	bne.n	8007e56 <_dtoa_r+0x37e>
 8007eb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	f000 808c 	beq.w	8007fd0 <_dtoa_r+0x4f8>
 8007eb8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007ebc:	4b99      	ldr	r3, [pc, #612]	; (8008124 <_dtoa_r+0x64c>)
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	4630      	mov	r0, r6
 8007ec2:	4639      	mov	r1, r7
 8007ec4:	f7f8 fe2a 	bl	8000b1c <__aeabi_dcmplt>
 8007ec8:	2800      	cmp	r0, #0
 8007eca:	f000 8081 	beq.w	8007fd0 <_dtoa_r+0x4f8>
 8007ece:	9b01      	ldr	r3, [sp, #4]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d07d      	beq.n	8007fd0 <_dtoa_r+0x4f8>
 8007ed4:	f1b9 0f00 	cmp.w	r9, #0
 8007ed8:	dd3c      	ble.n	8007f54 <_dtoa_r+0x47c>
 8007eda:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007ede:	9307      	str	r3, [sp, #28]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	4b91      	ldr	r3, [pc, #580]	; (8008128 <_dtoa_r+0x650>)
 8007ee4:	4630      	mov	r0, r6
 8007ee6:	4639      	mov	r1, r7
 8007ee8:	f7f8 fba6 	bl	8000638 <__aeabi_dmul>
 8007eec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ef0:	3501      	adds	r5, #1
 8007ef2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007ef6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007efa:	4628      	mov	r0, r5
 8007efc:	f7f8 fb32 	bl	8000564 <__aeabi_i2d>
 8007f00:	4632      	mov	r2, r6
 8007f02:	463b      	mov	r3, r7
 8007f04:	f7f8 fb98 	bl	8000638 <__aeabi_dmul>
 8007f08:	4b88      	ldr	r3, [pc, #544]	; (800812c <_dtoa_r+0x654>)
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f7f8 f9de 	bl	80002cc <__adddf3>
 8007f10:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007f14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f18:	9303      	str	r3, [sp, #12]
 8007f1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d15c      	bne.n	8007fda <_dtoa_r+0x502>
 8007f20:	4b83      	ldr	r3, [pc, #524]	; (8008130 <_dtoa_r+0x658>)
 8007f22:	2200      	movs	r2, #0
 8007f24:	4630      	mov	r0, r6
 8007f26:	4639      	mov	r1, r7
 8007f28:	f7f8 f9ce 	bl	80002c8 <__aeabi_dsub>
 8007f2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f30:	4606      	mov	r6, r0
 8007f32:	460f      	mov	r7, r1
 8007f34:	f7f8 fe10 	bl	8000b58 <__aeabi_dcmpgt>
 8007f38:	2800      	cmp	r0, #0
 8007f3a:	f040 8296 	bne.w	800846a <_dtoa_r+0x992>
 8007f3e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007f42:	4630      	mov	r0, r6
 8007f44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f48:	4639      	mov	r1, r7
 8007f4a:	f7f8 fde7 	bl	8000b1c <__aeabi_dcmplt>
 8007f4e:	2800      	cmp	r0, #0
 8007f50:	f040 8288 	bne.w	8008464 <_dtoa_r+0x98c>
 8007f54:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007f58:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	f2c0 8158 	blt.w	8008214 <_dtoa_r+0x73c>
 8007f64:	f1ba 0f0e 	cmp.w	sl, #14
 8007f68:	f300 8154 	bgt.w	8008214 <_dtoa_r+0x73c>
 8007f6c:	4b6b      	ldr	r3, [pc, #428]	; (800811c <_dtoa_r+0x644>)
 8007f6e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007f72:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f280 80e3 	bge.w	8008144 <_dtoa_r+0x66c>
 8007f7e:	9b01      	ldr	r3, [sp, #4]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f300 80df 	bgt.w	8008144 <_dtoa_r+0x66c>
 8007f86:	f040 826d 	bne.w	8008464 <_dtoa_r+0x98c>
 8007f8a:	4b69      	ldr	r3, [pc, #420]	; (8008130 <_dtoa_r+0x658>)
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	4640      	mov	r0, r8
 8007f90:	4649      	mov	r1, r9
 8007f92:	f7f8 fb51 	bl	8000638 <__aeabi_dmul>
 8007f96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f9a:	f7f8 fdd3 	bl	8000b44 <__aeabi_dcmpge>
 8007f9e:	9e01      	ldr	r6, [sp, #4]
 8007fa0:	4637      	mov	r7, r6
 8007fa2:	2800      	cmp	r0, #0
 8007fa4:	f040 8243 	bne.w	800842e <_dtoa_r+0x956>
 8007fa8:	9d00      	ldr	r5, [sp, #0]
 8007faa:	2331      	movs	r3, #49	; 0x31
 8007fac:	f805 3b01 	strb.w	r3, [r5], #1
 8007fb0:	f10a 0a01 	add.w	sl, sl, #1
 8007fb4:	e23f      	b.n	8008436 <_dtoa_r+0x95e>
 8007fb6:	07f2      	lsls	r2, r6, #31
 8007fb8:	d505      	bpl.n	8007fc6 <_dtoa_r+0x4ee>
 8007fba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fbe:	f7f8 fb3b 	bl	8000638 <__aeabi_dmul>
 8007fc2:	3501      	adds	r5, #1
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	1076      	asrs	r6, r6, #1
 8007fc8:	3708      	adds	r7, #8
 8007fca:	e76c      	b.n	8007ea6 <_dtoa_r+0x3ce>
 8007fcc:	2502      	movs	r5, #2
 8007fce:	e76f      	b.n	8007eb0 <_dtoa_r+0x3d8>
 8007fd0:	9b01      	ldr	r3, [sp, #4]
 8007fd2:	f8cd a01c 	str.w	sl, [sp, #28]
 8007fd6:	930c      	str	r3, [sp, #48]	; 0x30
 8007fd8:	e78d      	b.n	8007ef6 <_dtoa_r+0x41e>
 8007fda:	9900      	ldr	r1, [sp, #0]
 8007fdc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007fde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007fe0:	4b4e      	ldr	r3, [pc, #312]	; (800811c <_dtoa_r+0x644>)
 8007fe2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007fe6:	4401      	add	r1, r0
 8007fe8:	9102      	str	r1, [sp, #8]
 8007fea:	9908      	ldr	r1, [sp, #32]
 8007fec:	eeb0 8a47 	vmov.f32	s16, s14
 8007ff0:	eef0 8a67 	vmov.f32	s17, s15
 8007ff4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ff8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007ffc:	2900      	cmp	r1, #0
 8007ffe:	d045      	beq.n	800808c <_dtoa_r+0x5b4>
 8008000:	494c      	ldr	r1, [pc, #304]	; (8008134 <_dtoa_r+0x65c>)
 8008002:	2000      	movs	r0, #0
 8008004:	f7f8 fc42 	bl	800088c <__aeabi_ddiv>
 8008008:	ec53 2b18 	vmov	r2, r3, d8
 800800c:	f7f8 f95c 	bl	80002c8 <__aeabi_dsub>
 8008010:	9d00      	ldr	r5, [sp, #0]
 8008012:	ec41 0b18 	vmov	d8, r0, r1
 8008016:	4639      	mov	r1, r7
 8008018:	4630      	mov	r0, r6
 800801a:	f7f8 fdbd 	bl	8000b98 <__aeabi_d2iz>
 800801e:	900c      	str	r0, [sp, #48]	; 0x30
 8008020:	f7f8 faa0 	bl	8000564 <__aeabi_i2d>
 8008024:	4602      	mov	r2, r0
 8008026:	460b      	mov	r3, r1
 8008028:	4630      	mov	r0, r6
 800802a:	4639      	mov	r1, r7
 800802c:	f7f8 f94c 	bl	80002c8 <__aeabi_dsub>
 8008030:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008032:	3330      	adds	r3, #48	; 0x30
 8008034:	f805 3b01 	strb.w	r3, [r5], #1
 8008038:	ec53 2b18 	vmov	r2, r3, d8
 800803c:	4606      	mov	r6, r0
 800803e:	460f      	mov	r7, r1
 8008040:	f7f8 fd6c 	bl	8000b1c <__aeabi_dcmplt>
 8008044:	2800      	cmp	r0, #0
 8008046:	d165      	bne.n	8008114 <_dtoa_r+0x63c>
 8008048:	4632      	mov	r2, r6
 800804a:	463b      	mov	r3, r7
 800804c:	4935      	ldr	r1, [pc, #212]	; (8008124 <_dtoa_r+0x64c>)
 800804e:	2000      	movs	r0, #0
 8008050:	f7f8 f93a 	bl	80002c8 <__aeabi_dsub>
 8008054:	ec53 2b18 	vmov	r2, r3, d8
 8008058:	f7f8 fd60 	bl	8000b1c <__aeabi_dcmplt>
 800805c:	2800      	cmp	r0, #0
 800805e:	f040 80b9 	bne.w	80081d4 <_dtoa_r+0x6fc>
 8008062:	9b02      	ldr	r3, [sp, #8]
 8008064:	429d      	cmp	r5, r3
 8008066:	f43f af75 	beq.w	8007f54 <_dtoa_r+0x47c>
 800806a:	4b2f      	ldr	r3, [pc, #188]	; (8008128 <_dtoa_r+0x650>)
 800806c:	ec51 0b18 	vmov	r0, r1, d8
 8008070:	2200      	movs	r2, #0
 8008072:	f7f8 fae1 	bl	8000638 <__aeabi_dmul>
 8008076:	4b2c      	ldr	r3, [pc, #176]	; (8008128 <_dtoa_r+0x650>)
 8008078:	ec41 0b18 	vmov	d8, r0, r1
 800807c:	2200      	movs	r2, #0
 800807e:	4630      	mov	r0, r6
 8008080:	4639      	mov	r1, r7
 8008082:	f7f8 fad9 	bl	8000638 <__aeabi_dmul>
 8008086:	4606      	mov	r6, r0
 8008088:	460f      	mov	r7, r1
 800808a:	e7c4      	b.n	8008016 <_dtoa_r+0x53e>
 800808c:	ec51 0b17 	vmov	r0, r1, d7
 8008090:	f7f8 fad2 	bl	8000638 <__aeabi_dmul>
 8008094:	9b02      	ldr	r3, [sp, #8]
 8008096:	9d00      	ldr	r5, [sp, #0]
 8008098:	930c      	str	r3, [sp, #48]	; 0x30
 800809a:	ec41 0b18 	vmov	d8, r0, r1
 800809e:	4639      	mov	r1, r7
 80080a0:	4630      	mov	r0, r6
 80080a2:	f7f8 fd79 	bl	8000b98 <__aeabi_d2iz>
 80080a6:	9011      	str	r0, [sp, #68]	; 0x44
 80080a8:	f7f8 fa5c 	bl	8000564 <__aeabi_i2d>
 80080ac:	4602      	mov	r2, r0
 80080ae:	460b      	mov	r3, r1
 80080b0:	4630      	mov	r0, r6
 80080b2:	4639      	mov	r1, r7
 80080b4:	f7f8 f908 	bl	80002c8 <__aeabi_dsub>
 80080b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080ba:	3330      	adds	r3, #48	; 0x30
 80080bc:	f805 3b01 	strb.w	r3, [r5], #1
 80080c0:	9b02      	ldr	r3, [sp, #8]
 80080c2:	429d      	cmp	r5, r3
 80080c4:	4606      	mov	r6, r0
 80080c6:	460f      	mov	r7, r1
 80080c8:	f04f 0200 	mov.w	r2, #0
 80080cc:	d134      	bne.n	8008138 <_dtoa_r+0x660>
 80080ce:	4b19      	ldr	r3, [pc, #100]	; (8008134 <_dtoa_r+0x65c>)
 80080d0:	ec51 0b18 	vmov	r0, r1, d8
 80080d4:	f7f8 f8fa 	bl	80002cc <__adddf3>
 80080d8:	4602      	mov	r2, r0
 80080da:	460b      	mov	r3, r1
 80080dc:	4630      	mov	r0, r6
 80080de:	4639      	mov	r1, r7
 80080e0:	f7f8 fd3a 	bl	8000b58 <__aeabi_dcmpgt>
 80080e4:	2800      	cmp	r0, #0
 80080e6:	d175      	bne.n	80081d4 <_dtoa_r+0x6fc>
 80080e8:	ec53 2b18 	vmov	r2, r3, d8
 80080ec:	4911      	ldr	r1, [pc, #68]	; (8008134 <_dtoa_r+0x65c>)
 80080ee:	2000      	movs	r0, #0
 80080f0:	f7f8 f8ea 	bl	80002c8 <__aeabi_dsub>
 80080f4:	4602      	mov	r2, r0
 80080f6:	460b      	mov	r3, r1
 80080f8:	4630      	mov	r0, r6
 80080fa:	4639      	mov	r1, r7
 80080fc:	f7f8 fd0e 	bl	8000b1c <__aeabi_dcmplt>
 8008100:	2800      	cmp	r0, #0
 8008102:	f43f af27 	beq.w	8007f54 <_dtoa_r+0x47c>
 8008106:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008108:	1e6b      	subs	r3, r5, #1
 800810a:	930c      	str	r3, [sp, #48]	; 0x30
 800810c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008110:	2b30      	cmp	r3, #48	; 0x30
 8008112:	d0f8      	beq.n	8008106 <_dtoa_r+0x62e>
 8008114:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008118:	e04a      	b.n	80081b0 <_dtoa_r+0x6d8>
 800811a:	bf00      	nop
 800811c:	08009f80 	.word	0x08009f80
 8008120:	08009f58 	.word	0x08009f58
 8008124:	3ff00000 	.word	0x3ff00000
 8008128:	40240000 	.word	0x40240000
 800812c:	401c0000 	.word	0x401c0000
 8008130:	40140000 	.word	0x40140000
 8008134:	3fe00000 	.word	0x3fe00000
 8008138:	4baf      	ldr	r3, [pc, #700]	; (80083f8 <_dtoa_r+0x920>)
 800813a:	f7f8 fa7d 	bl	8000638 <__aeabi_dmul>
 800813e:	4606      	mov	r6, r0
 8008140:	460f      	mov	r7, r1
 8008142:	e7ac      	b.n	800809e <_dtoa_r+0x5c6>
 8008144:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008148:	9d00      	ldr	r5, [sp, #0]
 800814a:	4642      	mov	r2, r8
 800814c:	464b      	mov	r3, r9
 800814e:	4630      	mov	r0, r6
 8008150:	4639      	mov	r1, r7
 8008152:	f7f8 fb9b 	bl	800088c <__aeabi_ddiv>
 8008156:	f7f8 fd1f 	bl	8000b98 <__aeabi_d2iz>
 800815a:	9002      	str	r0, [sp, #8]
 800815c:	f7f8 fa02 	bl	8000564 <__aeabi_i2d>
 8008160:	4642      	mov	r2, r8
 8008162:	464b      	mov	r3, r9
 8008164:	f7f8 fa68 	bl	8000638 <__aeabi_dmul>
 8008168:	4602      	mov	r2, r0
 800816a:	460b      	mov	r3, r1
 800816c:	4630      	mov	r0, r6
 800816e:	4639      	mov	r1, r7
 8008170:	f7f8 f8aa 	bl	80002c8 <__aeabi_dsub>
 8008174:	9e02      	ldr	r6, [sp, #8]
 8008176:	9f01      	ldr	r7, [sp, #4]
 8008178:	3630      	adds	r6, #48	; 0x30
 800817a:	f805 6b01 	strb.w	r6, [r5], #1
 800817e:	9e00      	ldr	r6, [sp, #0]
 8008180:	1bae      	subs	r6, r5, r6
 8008182:	42b7      	cmp	r7, r6
 8008184:	4602      	mov	r2, r0
 8008186:	460b      	mov	r3, r1
 8008188:	d137      	bne.n	80081fa <_dtoa_r+0x722>
 800818a:	f7f8 f89f 	bl	80002cc <__adddf3>
 800818e:	4642      	mov	r2, r8
 8008190:	464b      	mov	r3, r9
 8008192:	4606      	mov	r6, r0
 8008194:	460f      	mov	r7, r1
 8008196:	f7f8 fcdf 	bl	8000b58 <__aeabi_dcmpgt>
 800819a:	b9c8      	cbnz	r0, 80081d0 <_dtoa_r+0x6f8>
 800819c:	4642      	mov	r2, r8
 800819e:	464b      	mov	r3, r9
 80081a0:	4630      	mov	r0, r6
 80081a2:	4639      	mov	r1, r7
 80081a4:	f7f8 fcb0 	bl	8000b08 <__aeabi_dcmpeq>
 80081a8:	b110      	cbz	r0, 80081b0 <_dtoa_r+0x6d8>
 80081aa:	9b02      	ldr	r3, [sp, #8]
 80081ac:	07d9      	lsls	r1, r3, #31
 80081ae:	d40f      	bmi.n	80081d0 <_dtoa_r+0x6f8>
 80081b0:	4620      	mov	r0, r4
 80081b2:	4659      	mov	r1, fp
 80081b4:	f000 fac8 	bl	8008748 <_Bfree>
 80081b8:	2300      	movs	r3, #0
 80081ba:	702b      	strb	r3, [r5, #0]
 80081bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80081be:	f10a 0001 	add.w	r0, sl, #1
 80081c2:	6018      	str	r0, [r3, #0]
 80081c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	f43f acd8 	beq.w	8007b7c <_dtoa_r+0xa4>
 80081cc:	601d      	str	r5, [r3, #0]
 80081ce:	e4d5      	b.n	8007b7c <_dtoa_r+0xa4>
 80081d0:	f8cd a01c 	str.w	sl, [sp, #28]
 80081d4:	462b      	mov	r3, r5
 80081d6:	461d      	mov	r5, r3
 80081d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081dc:	2a39      	cmp	r2, #57	; 0x39
 80081de:	d108      	bne.n	80081f2 <_dtoa_r+0x71a>
 80081e0:	9a00      	ldr	r2, [sp, #0]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d1f7      	bne.n	80081d6 <_dtoa_r+0x6fe>
 80081e6:	9a07      	ldr	r2, [sp, #28]
 80081e8:	9900      	ldr	r1, [sp, #0]
 80081ea:	3201      	adds	r2, #1
 80081ec:	9207      	str	r2, [sp, #28]
 80081ee:	2230      	movs	r2, #48	; 0x30
 80081f0:	700a      	strb	r2, [r1, #0]
 80081f2:	781a      	ldrb	r2, [r3, #0]
 80081f4:	3201      	adds	r2, #1
 80081f6:	701a      	strb	r2, [r3, #0]
 80081f8:	e78c      	b.n	8008114 <_dtoa_r+0x63c>
 80081fa:	4b7f      	ldr	r3, [pc, #508]	; (80083f8 <_dtoa_r+0x920>)
 80081fc:	2200      	movs	r2, #0
 80081fe:	f7f8 fa1b 	bl	8000638 <__aeabi_dmul>
 8008202:	2200      	movs	r2, #0
 8008204:	2300      	movs	r3, #0
 8008206:	4606      	mov	r6, r0
 8008208:	460f      	mov	r7, r1
 800820a:	f7f8 fc7d 	bl	8000b08 <__aeabi_dcmpeq>
 800820e:	2800      	cmp	r0, #0
 8008210:	d09b      	beq.n	800814a <_dtoa_r+0x672>
 8008212:	e7cd      	b.n	80081b0 <_dtoa_r+0x6d8>
 8008214:	9a08      	ldr	r2, [sp, #32]
 8008216:	2a00      	cmp	r2, #0
 8008218:	f000 80c4 	beq.w	80083a4 <_dtoa_r+0x8cc>
 800821c:	9a05      	ldr	r2, [sp, #20]
 800821e:	2a01      	cmp	r2, #1
 8008220:	f300 80a8 	bgt.w	8008374 <_dtoa_r+0x89c>
 8008224:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008226:	2a00      	cmp	r2, #0
 8008228:	f000 80a0 	beq.w	800836c <_dtoa_r+0x894>
 800822c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008230:	9e06      	ldr	r6, [sp, #24]
 8008232:	4645      	mov	r5, r8
 8008234:	9a04      	ldr	r2, [sp, #16]
 8008236:	2101      	movs	r1, #1
 8008238:	441a      	add	r2, r3
 800823a:	4620      	mov	r0, r4
 800823c:	4498      	add	r8, r3
 800823e:	9204      	str	r2, [sp, #16]
 8008240:	f000 fb3e 	bl	80088c0 <__i2b>
 8008244:	4607      	mov	r7, r0
 8008246:	2d00      	cmp	r5, #0
 8008248:	dd0b      	ble.n	8008262 <_dtoa_r+0x78a>
 800824a:	9b04      	ldr	r3, [sp, #16]
 800824c:	2b00      	cmp	r3, #0
 800824e:	dd08      	ble.n	8008262 <_dtoa_r+0x78a>
 8008250:	42ab      	cmp	r3, r5
 8008252:	9a04      	ldr	r2, [sp, #16]
 8008254:	bfa8      	it	ge
 8008256:	462b      	movge	r3, r5
 8008258:	eba8 0803 	sub.w	r8, r8, r3
 800825c:	1aed      	subs	r5, r5, r3
 800825e:	1ad3      	subs	r3, r2, r3
 8008260:	9304      	str	r3, [sp, #16]
 8008262:	9b06      	ldr	r3, [sp, #24]
 8008264:	b1fb      	cbz	r3, 80082a6 <_dtoa_r+0x7ce>
 8008266:	9b08      	ldr	r3, [sp, #32]
 8008268:	2b00      	cmp	r3, #0
 800826a:	f000 809f 	beq.w	80083ac <_dtoa_r+0x8d4>
 800826e:	2e00      	cmp	r6, #0
 8008270:	dd11      	ble.n	8008296 <_dtoa_r+0x7be>
 8008272:	4639      	mov	r1, r7
 8008274:	4632      	mov	r2, r6
 8008276:	4620      	mov	r0, r4
 8008278:	f000 fbde 	bl	8008a38 <__pow5mult>
 800827c:	465a      	mov	r2, fp
 800827e:	4601      	mov	r1, r0
 8008280:	4607      	mov	r7, r0
 8008282:	4620      	mov	r0, r4
 8008284:	f000 fb32 	bl	80088ec <__multiply>
 8008288:	4659      	mov	r1, fp
 800828a:	9007      	str	r0, [sp, #28]
 800828c:	4620      	mov	r0, r4
 800828e:	f000 fa5b 	bl	8008748 <_Bfree>
 8008292:	9b07      	ldr	r3, [sp, #28]
 8008294:	469b      	mov	fp, r3
 8008296:	9b06      	ldr	r3, [sp, #24]
 8008298:	1b9a      	subs	r2, r3, r6
 800829a:	d004      	beq.n	80082a6 <_dtoa_r+0x7ce>
 800829c:	4659      	mov	r1, fp
 800829e:	4620      	mov	r0, r4
 80082a0:	f000 fbca 	bl	8008a38 <__pow5mult>
 80082a4:	4683      	mov	fp, r0
 80082a6:	2101      	movs	r1, #1
 80082a8:	4620      	mov	r0, r4
 80082aa:	f000 fb09 	bl	80088c0 <__i2b>
 80082ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	4606      	mov	r6, r0
 80082b4:	dd7c      	ble.n	80083b0 <_dtoa_r+0x8d8>
 80082b6:	461a      	mov	r2, r3
 80082b8:	4601      	mov	r1, r0
 80082ba:	4620      	mov	r0, r4
 80082bc:	f000 fbbc 	bl	8008a38 <__pow5mult>
 80082c0:	9b05      	ldr	r3, [sp, #20]
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	4606      	mov	r6, r0
 80082c6:	dd76      	ble.n	80083b6 <_dtoa_r+0x8de>
 80082c8:	2300      	movs	r3, #0
 80082ca:	9306      	str	r3, [sp, #24]
 80082cc:	6933      	ldr	r3, [r6, #16]
 80082ce:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80082d2:	6918      	ldr	r0, [r3, #16]
 80082d4:	f000 faa4 	bl	8008820 <__hi0bits>
 80082d8:	f1c0 0020 	rsb	r0, r0, #32
 80082dc:	9b04      	ldr	r3, [sp, #16]
 80082de:	4418      	add	r0, r3
 80082e0:	f010 001f 	ands.w	r0, r0, #31
 80082e4:	f000 8086 	beq.w	80083f4 <_dtoa_r+0x91c>
 80082e8:	f1c0 0320 	rsb	r3, r0, #32
 80082ec:	2b04      	cmp	r3, #4
 80082ee:	dd7f      	ble.n	80083f0 <_dtoa_r+0x918>
 80082f0:	f1c0 001c 	rsb	r0, r0, #28
 80082f4:	9b04      	ldr	r3, [sp, #16]
 80082f6:	4403      	add	r3, r0
 80082f8:	4480      	add	r8, r0
 80082fa:	4405      	add	r5, r0
 80082fc:	9304      	str	r3, [sp, #16]
 80082fe:	f1b8 0f00 	cmp.w	r8, #0
 8008302:	dd05      	ble.n	8008310 <_dtoa_r+0x838>
 8008304:	4659      	mov	r1, fp
 8008306:	4642      	mov	r2, r8
 8008308:	4620      	mov	r0, r4
 800830a:	f000 fbef 	bl	8008aec <__lshift>
 800830e:	4683      	mov	fp, r0
 8008310:	9b04      	ldr	r3, [sp, #16]
 8008312:	2b00      	cmp	r3, #0
 8008314:	dd05      	ble.n	8008322 <_dtoa_r+0x84a>
 8008316:	4631      	mov	r1, r6
 8008318:	461a      	mov	r2, r3
 800831a:	4620      	mov	r0, r4
 800831c:	f000 fbe6 	bl	8008aec <__lshift>
 8008320:	4606      	mov	r6, r0
 8008322:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008324:	2b00      	cmp	r3, #0
 8008326:	d069      	beq.n	80083fc <_dtoa_r+0x924>
 8008328:	4631      	mov	r1, r6
 800832a:	4658      	mov	r0, fp
 800832c:	f000 fc4a 	bl	8008bc4 <__mcmp>
 8008330:	2800      	cmp	r0, #0
 8008332:	da63      	bge.n	80083fc <_dtoa_r+0x924>
 8008334:	2300      	movs	r3, #0
 8008336:	4659      	mov	r1, fp
 8008338:	220a      	movs	r2, #10
 800833a:	4620      	mov	r0, r4
 800833c:	f000 fa26 	bl	800878c <__multadd>
 8008340:	9b08      	ldr	r3, [sp, #32]
 8008342:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008346:	4683      	mov	fp, r0
 8008348:	2b00      	cmp	r3, #0
 800834a:	f000 818f 	beq.w	800866c <_dtoa_r+0xb94>
 800834e:	4639      	mov	r1, r7
 8008350:	2300      	movs	r3, #0
 8008352:	220a      	movs	r2, #10
 8008354:	4620      	mov	r0, r4
 8008356:	f000 fa19 	bl	800878c <__multadd>
 800835a:	f1b9 0f00 	cmp.w	r9, #0
 800835e:	4607      	mov	r7, r0
 8008360:	f300 808e 	bgt.w	8008480 <_dtoa_r+0x9a8>
 8008364:	9b05      	ldr	r3, [sp, #20]
 8008366:	2b02      	cmp	r3, #2
 8008368:	dc50      	bgt.n	800840c <_dtoa_r+0x934>
 800836a:	e089      	b.n	8008480 <_dtoa_r+0x9a8>
 800836c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800836e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008372:	e75d      	b.n	8008230 <_dtoa_r+0x758>
 8008374:	9b01      	ldr	r3, [sp, #4]
 8008376:	1e5e      	subs	r6, r3, #1
 8008378:	9b06      	ldr	r3, [sp, #24]
 800837a:	42b3      	cmp	r3, r6
 800837c:	bfbf      	itttt	lt
 800837e:	9b06      	ldrlt	r3, [sp, #24]
 8008380:	9606      	strlt	r6, [sp, #24]
 8008382:	1af2      	sublt	r2, r6, r3
 8008384:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008386:	bfb6      	itet	lt
 8008388:	189b      	addlt	r3, r3, r2
 800838a:	1b9e      	subge	r6, r3, r6
 800838c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800838e:	9b01      	ldr	r3, [sp, #4]
 8008390:	bfb8      	it	lt
 8008392:	2600      	movlt	r6, #0
 8008394:	2b00      	cmp	r3, #0
 8008396:	bfb5      	itete	lt
 8008398:	eba8 0503 	sublt.w	r5, r8, r3
 800839c:	9b01      	ldrge	r3, [sp, #4]
 800839e:	2300      	movlt	r3, #0
 80083a0:	4645      	movge	r5, r8
 80083a2:	e747      	b.n	8008234 <_dtoa_r+0x75c>
 80083a4:	9e06      	ldr	r6, [sp, #24]
 80083a6:	9f08      	ldr	r7, [sp, #32]
 80083a8:	4645      	mov	r5, r8
 80083aa:	e74c      	b.n	8008246 <_dtoa_r+0x76e>
 80083ac:	9a06      	ldr	r2, [sp, #24]
 80083ae:	e775      	b.n	800829c <_dtoa_r+0x7c4>
 80083b0:	9b05      	ldr	r3, [sp, #20]
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	dc18      	bgt.n	80083e8 <_dtoa_r+0x910>
 80083b6:	9b02      	ldr	r3, [sp, #8]
 80083b8:	b9b3      	cbnz	r3, 80083e8 <_dtoa_r+0x910>
 80083ba:	9b03      	ldr	r3, [sp, #12]
 80083bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083c0:	b9a3      	cbnz	r3, 80083ec <_dtoa_r+0x914>
 80083c2:	9b03      	ldr	r3, [sp, #12]
 80083c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80083c8:	0d1b      	lsrs	r3, r3, #20
 80083ca:	051b      	lsls	r3, r3, #20
 80083cc:	b12b      	cbz	r3, 80083da <_dtoa_r+0x902>
 80083ce:	9b04      	ldr	r3, [sp, #16]
 80083d0:	3301      	adds	r3, #1
 80083d2:	9304      	str	r3, [sp, #16]
 80083d4:	f108 0801 	add.w	r8, r8, #1
 80083d8:	2301      	movs	r3, #1
 80083da:	9306      	str	r3, [sp, #24]
 80083dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083de:	2b00      	cmp	r3, #0
 80083e0:	f47f af74 	bne.w	80082cc <_dtoa_r+0x7f4>
 80083e4:	2001      	movs	r0, #1
 80083e6:	e779      	b.n	80082dc <_dtoa_r+0x804>
 80083e8:	2300      	movs	r3, #0
 80083ea:	e7f6      	b.n	80083da <_dtoa_r+0x902>
 80083ec:	9b02      	ldr	r3, [sp, #8]
 80083ee:	e7f4      	b.n	80083da <_dtoa_r+0x902>
 80083f0:	d085      	beq.n	80082fe <_dtoa_r+0x826>
 80083f2:	4618      	mov	r0, r3
 80083f4:	301c      	adds	r0, #28
 80083f6:	e77d      	b.n	80082f4 <_dtoa_r+0x81c>
 80083f8:	40240000 	.word	0x40240000
 80083fc:	9b01      	ldr	r3, [sp, #4]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	dc38      	bgt.n	8008474 <_dtoa_r+0x99c>
 8008402:	9b05      	ldr	r3, [sp, #20]
 8008404:	2b02      	cmp	r3, #2
 8008406:	dd35      	ble.n	8008474 <_dtoa_r+0x99c>
 8008408:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800840c:	f1b9 0f00 	cmp.w	r9, #0
 8008410:	d10d      	bne.n	800842e <_dtoa_r+0x956>
 8008412:	4631      	mov	r1, r6
 8008414:	464b      	mov	r3, r9
 8008416:	2205      	movs	r2, #5
 8008418:	4620      	mov	r0, r4
 800841a:	f000 f9b7 	bl	800878c <__multadd>
 800841e:	4601      	mov	r1, r0
 8008420:	4606      	mov	r6, r0
 8008422:	4658      	mov	r0, fp
 8008424:	f000 fbce 	bl	8008bc4 <__mcmp>
 8008428:	2800      	cmp	r0, #0
 800842a:	f73f adbd 	bgt.w	8007fa8 <_dtoa_r+0x4d0>
 800842e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008430:	9d00      	ldr	r5, [sp, #0]
 8008432:	ea6f 0a03 	mvn.w	sl, r3
 8008436:	f04f 0800 	mov.w	r8, #0
 800843a:	4631      	mov	r1, r6
 800843c:	4620      	mov	r0, r4
 800843e:	f000 f983 	bl	8008748 <_Bfree>
 8008442:	2f00      	cmp	r7, #0
 8008444:	f43f aeb4 	beq.w	80081b0 <_dtoa_r+0x6d8>
 8008448:	f1b8 0f00 	cmp.w	r8, #0
 800844c:	d005      	beq.n	800845a <_dtoa_r+0x982>
 800844e:	45b8      	cmp	r8, r7
 8008450:	d003      	beq.n	800845a <_dtoa_r+0x982>
 8008452:	4641      	mov	r1, r8
 8008454:	4620      	mov	r0, r4
 8008456:	f000 f977 	bl	8008748 <_Bfree>
 800845a:	4639      	mov	r1, r7
 800845c:	4620      	mov	r0, r4
 800845e:	f000 f973 	bl	8008748 <_Bfree>
 8008462:	e6a5      	b.n	80081b0 <_dtoa_r+0x6d8>
 8008464:	2600      	movs	r6, #0
 8008466:	4637      	mov	r7, r6
 8008468:	e7e1      	b.n	800842e <_dtoa_r+0x956>
 800846a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800846c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008470:	4637      	mov	r7, r6
 8008472:	e599      	b.n	8007fa8 <_dtoa_r+0x4d0>
 8008474:	9b08      	ldr	r3, [sp, #32]
 8008476:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800847a:	2b00      	cmp	r3, #0
 800847c:	f000 80fd 	beq.w	800867a <_dtoa_r+0xba2>
 8008480:	2d00      	cmp	r5, #0
 8008482:	dd05      	ble.n	8008490 <_dtoa_r+0x9b8>
 8008484:	4639      	mov	r1, r7
 8008486:	462a      	mov	r2, r5
 8008488:	4620      	mov	r0, r4
 800848a:	f000 fb2f 	bl	8008aec <__lshift>
 800848e:	4607      	mov	r7, r0
 8008490:	9b06      	ldr	r3, [sp, #24]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d05c      	beq.n	8008550 <_dtoa_r+0xa78>
 8008496:	6879      	ldr	r1, [r7, #4]
 8008498:	4620      	mov	r0, r4
 800849a:	f000 f915 	bl	80086c8 <_Balloc>
 800849e:	4605      	mov	r5, r0
 80084a0:	b928      	cbnz	r0, 80084ae <_dtoa_r+0x9d6>
 80084a2:	4b80      	ldr	r3, [pc, #512]	; (80086a4 <_dtoa_r+0xbcc>)
 80084a4:	4602      	mov	r2, r0
 80084a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80084aa:	f7ff bb2e 	b.w	8007b0a <_dtoa_r+0x32>
 80084ae:	693a      	ldr	r2, [r7, #16]
 80084b0:	3202      	adds	r2, #2
 80084b2:	0092      	lsls	r2, r2, #2
 80084b4:	f107 010c 	add.w	r1, r7, #12
 80084b8:	300c      	adds	r0, #12
 80084ba:	f7fe fddf 	bl	800707c <memcpy>
 80084be:	2201      	movs	r2, #1
 80084c0:	4629      	mov	r1, r5
 80084c2:	4620      	mov	r0, r4
 80084c4:	f000 fb12 	bl	8008aec <__lshift>
 80084c8:	9b00      	ldr	r3, [sp, #0]
 80084ca:	3301      	adds	r3, #1
 80084cc:	9301      	str	r3, [sp, #4]
 80084ce:	9b00      	ldr	r3, [sp, #0]
 80084d0:	444b      	add	r3, r9
 80084d2:	9307      	str	r3, [sp, #28]
 80084d4:	9b02      	ldr	r3, [sp, #8]
 80084d6:	f003 0301 	and.w	r3, r3, #1
 80084da:	46b8      	mov	r8, r7
 80084dc:	9306      	str	r3, [sp, #24]
 80084de:	4607      	mov	r7, r0
 80084e0:	9b01      	ldr	r3, [sp, #4]
 80084e2:	4631      	mov	r1, r6
 80084e4:	3b01      	subs	r3, #1
 80084e6:	4658      	mov	r0, fp
 80084e8:	9302      	str	r3, [sp, #8]
 80084ea:	f7ff fa67 	bl	80079bc <quorem>
 80084ee:	4603      	mov	r3, r0
 80084f0:	3330      	adds	r3, #48	; 0x30
 80084f2:	9004      	str	r0, [sp, #16]
 80084f4:	4641      	mov	r1, r8
 80084f6:	4658      	mov	r0, fp
 80084f8:	9308      	str	r3, [sp, #32]
 80084fa:	f000 fb63 	bl	8008bc4 <__mcmp>
 80084fe:	463a      	mov	r2, r7
 8008500:	4681      	mov	r9, r0
 8008502:	4631      	mov	r1, r6
 8008504:	4620      	mov	r0, r4
 8008506:	f000 fb79 	bl	8008bfc <__mdiff>
 800850a:	68c2      	ldr	r2, [r0, #12]
 800850c:	9b08      	ldr	r3, [sp, #32]
 800850e:	4605      	mov	r5, r0
 8008510:	bb02      	cbnz	r2, 8008554 <_dtoa_r+0xa7c>
 8008512:	4601      	mov	r1, r0
 8008514:	4658      	mov	r0, fp
 8008516:	f000 fb55 	bl	8008bc4 <__mcmp>
 800851a:	9b08      	ldr	r3, [sp, #32]
 800851c:	4602      	mov	r2, r0
 800851e:	4629      	mov	r1, r5
 8008520:	4620      	mov	r0, r4
 8008522:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008526:	f000 f90f 	bl	8008748 <_Bfree>
 800852a:	9b05      	ldr	r3, [sp, #20]
 800852c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800852e:	9d01      	ldr	r5, [sp, #4]
 8008530:	ea43 0102 	orr.w	r1, r3, r2
 8008534:	9b06      	ldr	r3, [sp, #24]
 8008536:	430b      	orrs	r3, r1
 8008538:	9b08      	ldr	r3, [sp, #32]
 800853a:	d10d      	bne.n	8008558 <_dtoa_r+0xa80>
 800853c:	2b39      	cmp	r3, #57	; 0x39
 800853e:	d029      	beq.n	8008594 <_dtoa_r+0xabc>
 8008540:	f1b9 0f00 	cmp.w	r9, #0
 8008544:	dd01      	ble.n	800854a <_dtoa_r+0xa72>
 8008546:	9b04      	ldr	r3, [sp, #16]
 8008548:	3331      	adds	r3, #49	; 0x31
 800854a:	9a02      	ldr	r2, [sp, #8]
 800854c:	7013      	strb	r3, [r2, #0]
 800854e:	e774      	b.n	800843a <_dtoa_r+0x962>
 8008550:	4638      	mov	r0, r7
 8008552:	e7b9      	b.n	80084c8 <_dtoa_r+0x9f0>
 8008554:	2201      	movs	r2, #1
 8008556:	e7e2      	b.n	800851e <_dtoa_r+0xa46>
 8008558:	f1b9 0f00 	cmp.w	r9, #0
 800855c:	db06      	blt.n	800856c <_dtoa_r+0xa94>
 800855e:	9905      	ldr	r1, [sp, #20]
 8008560:	ea41 0909 	orr.w	r9, r1, r9
 8008564:	9906      	ldr	r1, [sp, #24]
 8008566:	ea59 0101 	orrs.w	r1, r9, r1
 800856a:	d120      	bne.n	80085ae <_dtoa_r+0xad6>
 800856c:	2a00      	cmp	r2, #0
 800856e:	ddec      	ble.n	800854a <_dtoa_r+0xa72>
 8008570:	4659      	mov	r1, fp
 8008572:	2201      	movs	r2, #1
 8008574:	4620      	mov	r0, r4
 8008576:	9301      	str	r3, [sp, #4]
 8008578:	f000 fab8 	bl	8008aec <__lshift>
 800857c:	4631      	mov	r1, r6
 800857e:	4683      	mov	fp, r0
 8008580:	f000 fb20 	bl	8008bc4 <__mcmp>
 8008584:	2800      	cmp	r0, #0
 8008586:	9b01      	ldr	r3, [sp, #4]
 8008588:	dc02      	bgt.n	8008590 <_dtoa_r+0xab8>
 800858a:	d1de      	bne.n	800854a <_dtoa_r+0xa72>
 800858c:	07da      	lsls	r2, r3, #31
 800858e:	d5dc      	bpl.n	800854a <_dtoa_r+0xa72>
 8008590:	2b39      	cmp	r3, #57	; 0x39
 8008592:	d1d8      	bne.n	8008546 <_dtoa_r+0xa6e>
 8008594:	9a02      	ldr	r2, [sp, #8]
 8008596:	2339      	movs	r3, #57	; 0x39
 8008598:	7013      	strb	r3, [r2, #0]
 800859a:	462b      	mov	r3, r5
 800859c:	461d      	mov	r5, r3
 800859e:	3b01      	subs	r3, #1
 80085a0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80085a4:	2a39      	cmp	r2, #57	; 0x39
 80085a6:	d050      	beq.n	800864a <_dtoa_r+0xb72>
 80085a8:	3201      	adds	r2, #1
 80085aa:	701a      	strb	r2, [r3, #0]
 80085ac:	e745      	b.n	800843a <_dtoa_r+0x962>
 80085ae:	2a00      	cmp	r2, #0
 80085b0:	dd03      	ble.n	80085ba <_dtoa_r+0xae2>
 80085b2:	2b39      	cmp	r3, #57	; 0x39
 80085b4:	d0ee      	beq.n	8008594 <_dtoa_r+0xabc>
 80085b6:	3301      	adds	r3, #1
 80085b8:	e7c7      	b.n	800854a <_dtoa_r+0xa72>
 80085ba:	9a01      	ldr	r2, [sp, #4]
 80085bc:	9907      	ldr	r1, [sp, #28]
 80085be:	f802 3c01 	strb.w	r3, [r2, #-1]
 80085c2:	428a      	cmp	r2, r1
 80085c4:	d02a      	beq.n	800861c <_dtoa_r+0xb44>
 80085c6:	4659      	mov	r1, fp
 80085c8:	2300      	movs	r3, #0
 80085ca:	220a      	movs	r2, #10
 80085cc:	4620      	mov	r0, r4
 80085ce:	f000 f8dd 	bl	800878c <__multadd>
 80085d2:	45b8      	cmp	r8, r7
 80085d4:	4683      	mov	fp, r0
 80085d6:	f04f 0300 	mov.w	r3, #0
 80085da:	f04f 020a 	mov.w	r2, #10
 80085de:	4641      	mov	r1, r8
 80085e0:	4620      	mov	r0, r4
 80085e2:	d107      	bne.n	80085f4 <_dtoa_r+0xb1c>
 80085e4:	f000 f8d2 	bl	800878c <__multadd>
 80085e8:	4680      	mov	r8, r0
 80085ea:	4607      	mov	r7, r0
 80085ec:	9b01      	ldr	r3, [sp, #4]
 80085ee:	3301      	adds	r3, #1
 80085f0:	9301      	str	r3, [sp, #4]
 80085f2:	e775      	b.n	80084e0 <_dtoa_r+0xa08>
 80085f4:	f000 f8ca 	bl	800878c <__multadd>
 80085f8:	4639      	mov	r1, r7
 80085fa:	4680      	mov	r8, r0
 80085fc:	2300      	movs	r3, #0
 80085fe:	220a      	movs	r2, #10
 8008600:	4620      	mov	r0, r4
 8008602:	f000 f8c3 	bl	800878c <__multadd>
 8008606:	4607      	mov	r7, r0
 8008608:	e7f0      	b.n	80085ec <_dtoa_r+0xb14>
 800860a:	f1b9 0f00 	cmp.w	r9, #0
 800860e:	9a00      	ldr	r2, [sp, #0]
 8008610:	bfcc      	ite	gt
 8008612:	464d      	movgt	r5, r9
 8008614:	2501      	movle	r5, #1
 8008616:	4415      	add	r5, r2
 8008618:	f04f 0800 	mov.w	r8, #0
 800861c:	4659      	mov	r1, fp
 800861e:	2201      	movs	r2, #1
 8008620:	4620      	mov	r0, r4
 8008622:	9301      	str	r3, [sp, #4]
 8008624:	f000 fa62 	bl	8008aec <__lshift>
 8008628:	4631      	mov	r1, r6
 800862a:	4683      	mov	fp, r0
 800862c:	f000 faca 	bl	8008bc4 <__mcmp>
 8008630:	2800      	cmp	r0, #0
 8008632:	dcb2      	bgt.n	800859a <_dtoa_r+0xac2>
 8008634:	d102      	bne.n	800863c <_dtoa_r+0xb64>
 8008636:	9b01      	ldr	r3, [sp, #4]
 8008638:	07db      	lsls	r3, r3, #31
 800863a:	d4ae      	bmi.n	800859a <_dtoa_r+0xac2>
 800863c:	462b      	mov	r3, r5
 800863e:	461d      	mov	r5, r3
 8008640:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008644:	2a30      	cmp	r2, #48	; 0x30
 8008646:	d0fa      	beq.n	800863e <_dtoa_r+0xb66>
 8008648:	e6f7      	b.n	800843a <_dtoa_r+0x962>
 800864a:	9a00      	ldr	r2, [sp, #0]
 800864c:	429a      	cmp	r2, r3
 800864e:	d1a5      	bne.n	800859c <_dtoa_r+0xac4>
 8008650:	f10a 0a01 	add.w	sl, sl, #1
 8008654:	2331      	movs	r3, #49	; 0x31
 8008656:	e779      	b.n	800854c <_dtoa_r+0xa74>
 8008658:	4b13      	ldr	r3, [pc, #76]	; (80086a8 <_dtoa_r+0xbd0>)
 800865a:	f7ff baaf 	b.w	8007bbc <_dtoa_r+0xe4>
 800865e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008660:	2b00      	cmp	r3, #0
 8008662:	f47f aa86 	bne.w	8007b72 <_dtoa_r+0x9a>
 8008666:	4b11      	ldr	r3, [pc, #68]	; (80086ac <_dtoa_r+0xbd4>)
 8008668:	f7ff baa8 	b.w	8007bbc <_dtoa_r+0xe4>
 800866c:	f1b9 0f00 	cmp.w	r9, #0
 8008670:	dc03      	bgt.n	800867a <_dtoa_r+0xba2>
 8008672:	9b05      	ldr	r3, [sp, #20]
 8008674:	2b02      	cmp	r3, #2
 8008676:	f73f aec9 	bgt.w	800840c <_dtoa_r+0x934>
 800867a:	9d00      	ldr	r5, [sp, #0]
 800867c:	4631      	mov	r1, r6
 800867e:	4658      	mov	r0, fp
 8008680:	f7ff f99c 	bl	80079bc <quorem>
 8008684:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008688:	f805 3b01 	strb.w	r3, [r5], #1
 800868c:	9a00      	ldr	r2, [sp, #0]
 800868e:	1aaa      	subs	r2, r5, r2
 8008690:	4591      	cmp	r9, r2
 8008692:	ddba      	ble.n	800860a <_dtoa_r+0xb32>
 8008694:	4659      	mov	r1, fp
 8008696:	2300      	movs	r3, #0
 8008698:	220a      	movs	r2, #10
 800869a:	4620      	mov	r0, r4
 800869c:	f000 f876 	bl	800878c <__multadd>
 80086a0:	4683      	mov	fp, r0
 80086a2:	e7eb      	b.n	800867c <_dtoa_r+0xba4>
 80086a4:	08009ee3 	.word	0x08009ee3
 80086a8:	08009e3c 	.word	0x08009e3c
 80086ac:	08009e60 	.word	0x08009e60

080086b0 <_localeconv_r>:
 80086b0:	4800      	ldr	r0, [pc, #0]	; (80086b4 <_localeconv_r+0x4>)
 80086b2:	4770      	bx	lr
 80086b4:	200001b0 	.word	0x200001b0

080086b8 <malloc>:
 80086b8:	4b02      	ldr	r3, [pc, #8]	; (80086c4 <malloc+0xc>)
 80086ba:	4601      	mov	r1, r0
 80086bc:	6818      	ldr	r0, [r3, #0]
 80086be:	f000 bbe1 	b.w	8008e84 <_malloc_r>
 80086c2:	bf00      	nop
 80086c4:	2000005c 	.word	0x2000005c

080086c8 <_Balloc>:
 80086c8:	b570      	push	{r4, r5, r6, lr}
 80086ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80086cc:	4604      	mov	r4, r0
 80086ce:	460d      	mov	r5, r1
 80086d0:	b976      	cbnz	r6, 80086f0 <_Balloc+0x28>
 80086d2:	2010      	movs	r0, #16
 80086d4:	f7ff fff0 	bl	80086b8 <malloc>
 80086d8:	4602      	mov	r2, r0
 80086da:	6260      	str	r0, [r4, #36]	; 0x24
 80086dc:	b920      	cbnz	r0, 80086e8 <_Balloc+0x20>
 80086de:	4b18      	ldr	r3, [pc, #96]	; (8008740 <_Balloc+0x78>)
 80086e0:	4818      	ldr	r0, [pc, #96]	; (8008744 <_Balloc+0x7c>)
 80086e2:	2166      	movs	r1, #102	; 0x66
 80086e4:	f000 fd94 	bl	8009210 <__assert_func>
 80086e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086ec:	6006      	str	r6, [r0, #0]
 80086ee:	60c6      	str	r6, [r0, #12]
 80086f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80086f2:	68f3      	ldr	r3, [r6, #12]
 80086f4:	b183      	cbz	r3, 8008718 <_Balloc+0x50>
 80086f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086f8:	68db      	ldr	r3, [r3, #12]
 80086fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80086fe:	b9b8      	cbnz	r0, 8008730 <_Balloc+0x68>
 8008700:	2101      	movs	r1, #1
 8008702:	fa01 f605 	lsl.w	r6, r1, r5
 8008706:	1d72      	adds	r2, r6, #5
 8008708:	0092      	lsls	r2, r2, #2
 800870a:	4620      	mov	r0, r4
 800870c:	f000 fb5a 	bl	8008dc4 <_calloc_r>
 8008710:	b160      	cbz	r0, 800872c <_Balloc+0x64>
 8008712:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008716:	e00e      	b.n	8008736 <_Balloc+0x6e>
 8008718:	2221      	movs	r2, #33	; 0x21
 800871a:	2104      	movs	r1, #4
 800871c:	4620      	mov	r0, r4
 800871e:	f000 fb51 	bl	8008dc4 <_calloc_r>
 8008722:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008724:	60f0      	str	r0, [r6, #12]
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d1e4      	bne.n	80086f6 <_Balloc+0x2e>
 800872c:	2000      	movs	r0, #0
 800872e:	bd70      	pop	{r4, r5, r6, pc}
 8008730:	6802      	ldr	r2, [r0, #0]
 8008732:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008736:	2300      	movs	r3, #0
 8008738:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800873c:	e7f7      	b.n	800872e <_Balloc+0x66>
 800873e:	bf00      	nop
 8008740:	08009e6d 	.word	0x08009e6d
 8008744:	08009ef4 	.word	0x08009ef4

08008748 <_Bfree>:
 8008748:	b570      	push	{r4, r5, r6, lr}
 800874a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800874c:	4605      	mov	r5, r0
 800874e:	460c      	mov	r4, r1
 8008750:	b976      	cbnz	r6, 8008770 <_Bfree+0x28>
 8008752:	2010      	movs	r0, #16
 8008754:	f7ff ffb0 	bl	80086b8 <malloc>
 8008758:	4602      	mov	r2, r0
 800875a:	6268      	str	r0, [r5, #36]	; 0x24
 800875c:	b920      	cbnz	r0, 8008768 <_Bfree+0x20>
 800875e:	4b09      	ldr	r3, [pc, #36]	; (8008784 <_Bfree+0x3c>)
 8008760:	4809      	ldr	r0, [pc, #36]	; (8008788 <_Bfree+0x40>)
 8008762:	218a      	movs	r1, #138	; 0x8a
 8008764:	f000 fd54 	bl	8009210 <__assert_func>
 8008768:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800876c:	6006      	str	r6, [r0, #0]
 800876e:	60c6      	str	r6, [r0, #12]
 8008770:	b13c      	cbz	r4, 8008782 <_Bfree+0x3a>
 8008772:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008774:	6862      	ldr	r2, [r4, #4]
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800877c:	6021      	str	r1, [r4, #0]
 800877e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008782:	bd70      	pop	{r4, r5, r6, pc}
 8008784:	08009e6d 	.word	0x08009e6d
 8008788:	08009ef4 	.word	0x08009ef4

0800878c <__multadd>:
 800878c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008790:	690e      	ldr	r6, [r1, #16]
 8008792:	4607      	mov	r7, r0
 8008794:	4698      	mov	r8, r3
 8008796:	460c      	mov	r4, r1
 8008798:	f101 0014 	add.w	r0, r1, #20
 800879c:	2300      	movs	r3, #0
 800879e:	6805      	ldr	r5, [r0, #0]
 80087a0:	b2a9      	uxth	r1, r5
 80087a2:	fb02 8101 	mla	r1, r2, r1, r8
 80087a6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80087aa:	0c2d      	lsrs	r5, r5, #16
 80087ac:	fb02 c505 	mla	r5, r2, r5, ip
 80087b0:	b289      	uxth	r1, r1
 80087b2:	3301      	adds	r3, #1
 80087b4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80087b8:	429e      	cmp	r6, r3
 80087ba:	f840 1b04 	str.w	r1, [r0], #4
 80087be:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80087c2:	dcec      	bgt.n	800879e <__multadd+0x12>
 80087c4:	f1b8 0f00 	cmp.w	r8, #0
 80087c8:	d022      	beq.n	8008810 <__multadd+0x84>
 80087ca:	68a3      	ldr	r3, [r4, #8]
 80087cc:	42b3      	cmp	r3, r6
 80087ce:	dc19      	bgt.n	8008804 <__multadd+0x78>
 80087d0:	6861      	ldr	r1, [r4, #4]
 80087d2:	4638      	mov	r0, r7
 80087d4:	3101      	adds	r1, #1
 80087d6:	f7ff ff77 	bl	80086c8 <_Balloc>
 80087da:	4605      	mov	r5, r0
 80087dc:	b928      	cbnz	r0, 80087ea <__multadd+0x5e>
 80087de:	4602      	mov	r2, r0
 80087e0:	4b0d      	ldr	r3, [pc, #52]	; (8008818 <__multadd+0x8c>)
 80087e2:	480e      	ldr	r0, [pc, #56]	; (800881c <__multadd+0x90>)
 80087e4:	21b5      	movs	r1, #181	; 0xb5
 80087e6:	f000 fd13 	bl	8009210 <__assert_func>
 80087ea:	6922      	ldr	r2, [r4, #16]
 80087ec:	3202      	adds	r2, #2
 80087ee:	f104 010c 	add.w	r1, r4, #12
 80087f2:	0092      	lsls	r2, r2, #2
 80087f4:	300c      	adds	r0, #12
 80087f6:	f7fe fc41 	bl	800707c <memcpy>
 80087fa:	4621      	mov	r1, r4
 80087fc:	4638      	mov	r0, r7
 80087fe:	f7ff ffa3 	bl	8008748 <_Bfree>
 8008802:	462c      	mov	r4, r5
 8008804:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008808:	3601      	adds	r6, #1
 800880a:	f8c3 8014 	str.w	r8, [r3, #20]
 800880e:	6126      	str	r6, [r4, #16]
 8008810:	4620      	mov	r0, r4
 8008812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008816:	bf00      	nop
 8008818:	08009ee3 	.word	0x08009ee3
 800881c:	08009ef4 	.word	0x08009ef4

08008820 <__hi0bits>:
 8008820:	0c03      	lsrs	r3, r0, #16
 8008822:	041b      	lsls	r3, r3, #16
 8008824:	b9d3      	cbnz	r3, 800885c <__hi0bits+0x3c>
 8008826:	0400      	lsls	r0, r0, #16
 8008828:	2310      	movs	r3, #16
 800882a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800882e:	bf04      	itt	eq
 8008830:	0200      	lsleq	r0, r0, #8
 8008832:	3308      	addeq	r3, #8
 8008834:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008838:	bf04      	itt	eq
 800883a:	0100      	lsleq	r0, r0, #4
 800883c:	3304      	addeq	r3, #4
 800883e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008842:	bf04      	itt	eq
 8008844:	0080      	lsleq	r0, r0, #2
 8008846:	3302      	addeq	r3, #2
 8008848:	2800      	cmp	r0, #0
 800884a:	db05      	blt.n	8008858 <__hi0bits+0x38>
 800884c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008850:	f103 0301 	add.w	r3, r3, #1
 8008854:	bf08      	it	eq
 8008856:	2320      	moveq	r3, #32
 8008858:	4618      	mov	r0, r3
 800885a:	4770      	bx	lr
 800885c:	2300      	movs	r3, #0
 800885e:	e7e4      	b.n	800882a <__hi0bits+0xa>

08008860 <__lo0bits>:
 8008860:	6803      	ldr	r3, [r0, #0]
 8008862:	f013 0207 	ands.w	r2, r3, #7
 8008866:	4601      	mov	r1, r0
 8008868:	d00b      	beq.n	8008882 <__lo0bits+0x22>
 800886a:	07da      	lsls	r2, r3, #31
 800886c:	d424      	bmi.n	80088b8 <__lo0bits+0x58>
 800886e:	0798      	lsls	r0, r3, #30
 8008870:	bf49      	itett	mi
 8008872:	085b      	lsrmi	r3, r3, #1
 8008874:	089b      	lsrpl	r3, r3, #2
 8008876:	2001      	movmi	r0, #1
 8008878:	600b      	strmi	r3, [r1, #0]
 800887a:	bf5c      	itt	pl
 800887c:	600b      	strpl	r3, [r1, #0]
 800887e:	2002      	movpl	r0, #2
 8008880:	4770      	bx	lr
 8008882:	b298      	uxth	r0, r3
 8008884:	b9b0      	cbnz	r0, 80088b4 <__lo0bits+0x54>
 8008886:	0c1b      	lsrs	r3, r3, #16
 8008888:	2010      	movs	r0, #16
 800888a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800888e:	bf04      	itt	eq
 8008890:	0a1b      	lsreq	r3, r3, #8
 8008892:	3008      	addeq	r0, #8
 8008894:	071a      	lsls	r2, r3, #28
 8008896:	bf04      	itt	eq
 8008898:	091b      	lsreq	r3, r3, #4
 800889a:	3004      	addeq	r0, #4
 800889c:	079a      	lsls	r2, r3, #30
 800889e:	bf04      	itt	eq
 80088a0:	089b      	lsreq	r3, r3, #2
 80088a2:	3002      	addeq	r0, #2
 80088a4:	07da      	lsls	r2, r3, #31
 80088a6:	d403      	bmi.n	80088b0 <__lo0bits+0x50>
 80088a8:	085b      	lsrs	r3, r3, #1
 80088aa:	f100 0001 	add.w	r0, r0, #1
 80088ae:	d005      	beq.n	80088bc <__lo0bits+0x5c>
 80088b0:	600b      	str	r3, [r1, #0]
 80088b2:	4770      	bx	lr
 80088b4:	4610      	mov	r0, r2
 80088b6:	e7e8      	b.n	800888a <__lo0bits+0x2a>
 80088b8:	2000      	movs	r0, #0
 80088ba:	4770      	bx	lr
 80088bc:	2020      	movs	r0, #32
 80088be:	4770      	bx	lr

080088c0 <__i2b>:
 80088c0:	b510      	push	{r4, lr}
 80088c2:	460c      	mov	r4, r1
 80088c4:	2101      	movs	r1, #1
 80088c6:	f7ff feff 	bl	80086c8 <_Balloc>
 80088ca:	4602      	mov	r2, r0
 80088cc:	b928      	cbnz	r0, 80088da <__i2b+0x1a>
 80088ce:	4b05      	ldr	r3, [pc, #20]	; (80088e4 <__i2b+0x24>)
 80088d0:	4805      	ldr	r0, [pc, #20]	; (80088e8 <__i2b+0x28>)
 80088d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80088d6:	f000 fc9b 	bl	8009210 <__assert_func>
 80088da:	2301      	movs	r3, #1
 80088dc:	6144      	str	r4, [r0, #20]
 80088de:	6103      	str	r3, [r0, #16]
 80088e0:	bd10      	pop	{r4, pc}
 80088e2:	bf00      	nop
 80088e4:	08009ee3 	.word	0x08009ee3
 80088e8:	08009ef4 	.word	0x08009ef4

080088ec <__multiply>:
 80088ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088f0:	4614      	mov	r4, r2
 80088f2:	690a      	ldr	r2, [r1, #16]
 80088f4:	6923      	ldr	r3, [r4, #16]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	bfb8      	it	lt
 80088fa:	460b      	movlt	r3, r1
 80088fc:	460d      	mov	r5, r1
 80088fe:	bfbc      	itt	lt
 8008900:	4625      	movlt	r5, r4
 8008902:	461c      	movlt	r4, r3
 8008904:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008908:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800890c:	68ab      	ldr	r3, [r5, #8]
 800890e:	6869      	ldr	r1, [r5, #4]
 8008910:	eb0a 0709 	add.w	r7, sl, r9
 8008914:	42bb      	cmp	r3, r7
 8008916:	b085      	sub	sp, #20
 8008918:	bfb8      	it	lt
 800891a:	3101      	addlt	r1, #1
 800891c:	f7ff fed4 	bl	80086c8 <_Balloc>
 8008920:	b930      	cbnz	r0, 8008930 <__multiply+0x44>
 8008922:	4602      	mov	r2, r0
 8008924:	4b42      	ldr	r3, [pc, #264]	; (8008a30 <__multiply+0x144>)
 8008926:	4843      	ldr	r0, [pc, #268]	; (8008a34 <__multiply+0x148>)
 8008928:	f240 115d 	movw	r1, #349	; 0x15d
 800892c:	f000 fc70 	bl	8009210 <__assert_func>
 8008930:	f100 0614 	add.w	r6, r0, #20
 8008934:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008938:	4633      	mov	r3, r6
 800893a:	2200      	movs	r2, #0
 800893c:	4543      	cmp	r3, r8
 800893e:	d31e      	bcc.n	800897e <__multiply+0x92>
 8008940:	f105 0c14 	add.w	ip, r5, #20
 8008944:	f104 0314 	add.w	r3, r4, #20
 8008948:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800894c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008950:	9202      	str	r2, [sp, #8]
 8008952:	ebac 0205 	sub.w	r2, ip, r5
 8008956:	3a15      	subs	r2, #21
 8008958:	f022 0203 	bic.w	r2, r2, #3
 800895c:	3204      	adds	r2, #4
 800895e:	f105 0115 	add.w	r1, r5, #21
 8008962:	458c      	cmp	ip, r1
 8008964:	bf38      	it	cc
 8008966:	2204      	movcc	r2, #4
 8008968:	9201      	str	r2, [sp, #4]
 800896a:	9a02      	ldr	r2, [sp, #8]
 800896c:	9303      	str	r3, [sp, #12]
 800896e:	429a      	cmp	r2, r3
 8008970:	d808      	bhi.n	8008984 <__multiply+0x98>
 8008972:	2f00      	cmp	r7, #0
 8008974:	dc55      	bgt.n	8008a22 <__multiply+0x136>
 8008976:	6107      	str	r7, [r0, #16]
 8008978:	b005      	add	sp, #20
 800897a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800897e:	f843 2b04 	str.w	r2, [r3], #4
 8008982:	e7db      	b.n	800893c <__multiply+0x50>
 8008984:	f8b3 a000 	ldrh.w	sl, [r3]
 8008988:	f1ba 0f00 	cmp.w	sl, #0
 800898c:	d020      	beq.n	80089d0 <__multiply+0xe4>
 800898e:	f105 0e14 	add.w	lr, r5, #20
 8008992:	46b1      	mov	r9, r6
 8008994:	2200      	movs	r2, #0
 8008996:	f85e 4b04 	ldr.w	r4, [lr], #4
 800899a:	f8d9 b000 	ldr.w	fp, [r9]
 800899e:	b2a1      	uxth	r1, r4
 80089a0:	fa1f fb8b 	uxth.w	fp, fp
 80089a4:	fb0a b101 	mla	r1, sl, r1, fp
 80089a8:	4411      	add	r1, r2
 80089aa:	f8d9 2000 	ldr.w	r2, [r9]
 80089ae:	0c24      	lsrs	r4, r4, #16
 80089b0:	0c12      	lsrs	r2, r2, #16
 80089b2:	fb0a 2404 	mla	r4, sl, r4, r2
 80089b6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80089ba:	b289      	uxth	r1, r1
 80089bc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80089c0:	45f4      	cmp	ip, lr
 80089c2:	f849 1b04 	str.w	r1, [r9], #4
 80089c6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80089ca:	d8e4      	bhi.n	8008996 <__multiply+0xaa>
 80089cc:	9901      	ldr	r1, [sp, #4]
 80089ce:	5072      	str	r2, [r6, r1]
 80089d0:	9a03      	ldr	r2, [sp, #12]
 80089d2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80089d6:	3304      	adds	r3, #4
 80089d8:	f1b9 0f00 	cmp.w	r9, #0
 80089dc:	d01f      	beq.n	8008a1e <__multiply+0x132>
 80089de:	6834      	ldr	r4, [r6, #0]
 80089e0:	f105 0114 	add.w	r1, r5, #20
 80089e4:	46b6      	mov	lr, r6
 80089e6:	f04f 0a00 	mov.w	sl, #0
 80089ea:	880a      	ldrh	r2, [r1, #0]
 80089ec:	f8be b002 	ldrh.w	fp, [lr, #2]
 80089f0:	fb09 b202 	mla	r2, r9, r2, fp
 80089f4:	4492      	add	sl, r2
 80089f6:	b2a4      	uxth	r4, r4
 80089f8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80089fc:	f84e 4b04 	str.w	r4, [lr], #4
 8008a00:	f851 4b04 	ldr.w	r4, [r1], #4
 8008a04:	f8be 2000 	ldrh.w	r2, [lr]
 8008a08:	0c24      	lsrs	r4, r4, #16
 8008a0a:	fb09 2404 	mla	r4, r9, r4, r2
 8008a0e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008a12:	458c      	cmp	ip, r1
 8008a14:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008a18:	d8e7      	bhi.n	80089ea <__multiply+0xfe>
 8008a1a:	9a01      	ldr	r2, [sp, #4]
 8008a1c:	50b4      	str	r4, [r6, r2]
 8008a1e:	3604      	adds	r6, #4
 8008a20:	e7a3      	b.n	800896a <__multiply+0x7e>
 8008a22:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d1a5      	bne.n	8008976 <__multiply+0x8a>
 8008a2a:	3f01      	subs	r7, #1
 8008a2c:	e7a1      	b.n	8008972 <__multiply+0x86>
 8008a2e:	bf00      	nop
 8008a30:	08009ee3 	.word	0x08009ee3
 8008a34:	08009ef4 	.word	0x08009ef4

08008a38 <__pow5mult>:
 8008a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a3c:	4615      	mov	r5, r2
 8008a3e:	f012 0203 	ands.w	r2, r2, #3
 8008a42:	4606      	mov	r6, r0
 8008a44:	460f      	mov	r7, r1
 8008a46:	d007      	beq.n	8008a58 <__pow5mult+0x20>
 8008a48:	4c25      	ldr	r4, [pc, #148]	; (8008ae0 <__pow5mult+0xa8>)
 8008a4a:	3a01      	subs	r2, #1
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a52:	f7ff fe9b 	bl	800878c <__multadd>
 8008a56:	4607      	mov	r7, r0
 8008a58:	10ad      	asrs	r5, r5, #2
 8008a5a:	d03d      	beq.n	8008ad8 <__pow5mult+0xa0>
 8008a5c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008a5e:	b97c      	cbnz	r4, 8008a80 <__pow5mult+0x48>
 8008a60:	2010      	movs	r0, #16
 8008a62:	f7ff fe29 	bl	80086b8 <malloc>
 8008a66:	4602      	mov	r2, r0
 8008a68:	6270      	str	r0, [r6, #36]	; 0x24
 8008a6a:	b928      	cbnz	r0, 8008a78 <__pow5mult+0x40>
 8008a6c:	4b1d      	ldr	r3, [pc, #116]	; (8008ae4 <__pow5mult+0xac>)
 8008a6e:	481e      	ldr	r0, [pc, #120]	; (8008ae8 <__pow5mult+0xb0>)
 8008a70:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008a74:	f000 fbcc 	bl	8009210 <__assert_func>
 8008a78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a7c:	6004      	str	r4, [r0, #0]
 8008a7e:	60c4      	str	r4, [r0, #12]
 8008a80:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008a84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008a88:	b94c      	cbnz	r4, 8008a9e <__pow5mult+0x66>
 8008a8a:	f240 2171 	movw	r1, #625	; 0x271
 8008a8e:	4630      	mov	r0, r6
 8008a90:	f7ff ff16 	bl	80088c0 <__i2b>
 8008a94:	2300      	movs	r3, #0
 8008a96:	f8c8 0008 	str.w	r0, [r8, #8]
 8008a9a:	4604      	mov	r4, r0
 8008a9c:	6003      	str	r3, [r0, #0]
 8008a9e:	f04f 0900 	mov.w	r9, #0
 8008aa2:	07eb      	lsls	r3, r5, #31
 8008aa4:	d50a      	bpl.n	8008abc <__pow5mult+0x84>
 8008aa6:	4639      	mov	r1, r7
 8008aa8:	4622      	mov	r2, r4
 8008aaa:	4630      	mov	r0, r6
 8008aac:	f7ff ff1e 	bl	80088ec <__multiply>
 8008ab0:	4639      	mov	r1, r7
 8008ab2:	4680      	mov	r8, r0
 8008ab4:	4630      	mov	r0, r6
 8008ab6:	f7ff fe47 	bl	8008748 <_Bfree>
 8008aba:	4647      	mov	r7, r8
 8008abc:	106d      	asrs	r5, r5, #1
 8008abe:	d00b      	beq.n	8008ad8 <__pow5mult+0xa0>
 8008ac0:	6820      	ldr	r0, [r4, #0]
 8008ac2:	b938      	cbnz	r0, 8008ad4 <__pow5mult+0x9c>
 8008ac4:	4622      	mov	r2, r4
 8008ac6:	4621      	mov	r1, r4
 8008ac8:	4630      	mov	r0, r6
 8008aca:	f7ff ff0f 	bl	80088ec <__multiply>
 8008ace:	6020      	str	r0, [r4, #0]
 8008ad0:	f8c0 9000 	str.w	r9, [r0]
 8008ad4:	4604      	mov	r4, r0
 8008ad6:	e7e4      	b.n	8008aa2 <__pow5mult+0x6a>
 8008ad8:	4638      	mov	r0, r7
 8008ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ade:	bf00      	nop
 8008ae0:	0800a048 	.word	0x0800a048
 8008ae4:	08009e6d 	.word	0x08009e6d
 8008ae8:	08009ef4 	.word	0x08009ef4

08008aec <__lshift>:
 8008aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008af0:	460c      	mov	r4, r1
 8008af2:	6849      	ldr	r1, [r1, #4]
 8008af4:	6923      	ldr	r3, [r4, #16]
 8008af6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008afa:	68a3      	ldr	r3, [r4, #8]
 8008afc:	4607      	mov	r7, r0
 8008afe:	4691      	mov	r9, r2
 8008b00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b04:	f108 0601 	add.w	r6, r8, #1
 8008b08:	42b3      	cmp	r3, r6
 8008b0a:	db0b      	blt.n	8008b24 <__lshift+0x38>
 8008b0c:	4638      	mov	r0, r7
 8008b0e:	f7ff fddb 	bl	80086c8 <_Balloc>
 8008b12:	4605      	mov	r5, r0
 8008b14:	b948      	cbnz	r0, 8008b2a <__lshift+0x3e>
 8008b16:	4602      	mov	r2, r0
 8008b18:	4b28      	ldr	r3, [pc, #160]	; (8008bbc <__lshift+0xd0>)
 8008b1a:	4829      	ldr	r0, [pc, #164]	; (8008bc0 <__lshift+0xd4>)
 8008b1c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008b20:	f000 fb76 	bl	8009210 <__assert_func>
 8008b24:	3101      	adds	r1, #1
 8008b26:	005b      	lsls	r3, r3, #1
 8008b28:	e7ee      	b.n	8008b08 <__lshift+0x1c>
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	f100 0114 	add.w	r1, r0, #20
 8008b30:	f100 0210 	add.w	r2, r0, #16
 8008b34:	4618      	mov	r0, r3
 8008b36:	4553      	cmp	r3, sl
 8008b38:	db33      	blt.n	8008ba2 <__lshift+0xb6>
 8008b3a:	6920      	ldr	r0, [r4, #16]
 8008b3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b40:	f104 0314 	add.w	r3, r4, #20
 8008b44:	f019 091f 	ands.w	r9, r9, #31
 8008b48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b4c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008b50:	d02b      	beq.n	8008baa <__lshift+0xbe>
 8008b52:	f1c9 0e20 	rsb	lr, r9, #32
 8008b56:	468a      	mov	sl, r1
 8008b58:	2200      	movs	r2, #0
 8008b5a:	6818      	ldr	r0, [r3, #0]
 8008b5c:	fa00 f009 	lsl.w	r0, r0, r9
 8008b60:	4302      	orrs	r2, r0
 8008b62:	f84a 2b04 	str.w	r2, [sl], #4
 8008b66:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b6a:	459c      	cmp	ip, r3
 8008b6c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008b70:	d8f3      	bhi.n	8008b5a <__lshift+0x6e>
 8008b72:	ebac 0304 	sub.w	r3, ip, r4
 8008b76:	3b15      	subs	r3, #21
 8008b78:	f023 0303 	bic.w	r3, r3, #3
 8008b7c:	3304      	adds	r3, #4
 8008b7e:	f104 0015 	add.w	r0, r4, #21
 8008b82:	4584      	cmp	ip, r0
 8008b84:	bf38      	it	cc
 8008b86:	2304      	movcc	r3, #4
 8008b88:	50ca      	str	r2, [r1, r3]
 8008b8a:	b10a      	cbz	r2, 8008b90 <__lshift+0xa4>
 8008b8c:	f108 0602 	add.w	r6, r8, #2
 8008b90:	3e01      	subs	r6, #1
 8008b92:	4638      	mov	r0, r7
 8008b94:	612e      	str	r6, [r5, #16]
 8008b96:	4621      	mov	r1, r4
 8008b98:	f7ff fdd6 	bl	8008748 <_Bfree>
 8008b9c:	4628      	mov	r0, r5
 8008b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba2:	f842 0f04 	str.w	r0, [r2, #4]!
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	e7c5      	b.n	8008b36 <__lshift+0x4a>
 8008baa:	3904      	subs	r1, #4
 8008bac:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bb0:	f841 2f04 	str.w	r2, [r1, #4]!
 8008bb4:	459c      	cmp	ip, r3
 8008bb6:	d8f9      	bhi.n	8008bac <__lshift+0xc0>
 8008bb8:	e7ea      	b.n	8008b90 <__lshift+0xa4>
 8008bba:	bf00      	nop
 8008bbc:	08009ee3 	.word	0x08009ee3
 8008bc0:	08009ef4 	.word	0x08009ef4

08008bc4 <__mcmp>:
 8008bc4:	b530      	push	{r4, r5, lr}
 8008bc6:	6902      	ldr	r2, [r0, #16]
 8008bc8:	690c      	ldr	r4, [r1, #16]
 8008bca:	1b12      	subs	r2, r2, r4
 8008bcc:	d10e      	bne.n	8008bec <__mcmp+0x28>
 8008bce:	f100 0314 	add.w	r3, r0, #20
 8008bd2:	3114      	adds	r1, #20
 8008bd4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008bd8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008bdc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008be0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008be4:	42a5      	cmp	r5, r4
 8008be6:	d003      	beq.n	8008bf0 <__mcmp+0x2c>
 8008be8:	d305      	bcc.n	8008bf6 <__mcmp+0x32>
 8008bea:	2201      	movs	r2, #1
 8008bec:	4610      	mov	r0, r2
 8008bee:	bd30      	pop	{r4, r5, pc}
 8008bf0:	4283      	cmp	r3, r0
 8008bf2:	d3f3      	bcc.n	8008bdc <__mcmp+0x18>
 8008bf4:	e7fa      	b.n	8008bec <__mcmp+0x28>
 8008bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8008bfa:	e7f7      	b.n	8008bec <__mcmp+0x28>

08008bfc <__mdiff>:
 8008bfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c00:	460c      	mov	r4, r1
 8008c02:	4606      	mov	r6, r0
 8008c04:	4611      	mov	r1, r2
 8008c06:	4620      	mov	r0, r4
 8008c08:	4617      	mov	r7, r2
 8008c0a:	f7ff ffdb 	bl	8008bc4 <__mcmp>
 8008c0e:	1e05      	subs	r5, r0, #0
 8008c10:	d110      	bne.n	8008c34 <__mdiff+0x38>
 8008c12:	4629      	mov	r1, r5
 8008c14:	4630      	mov	r0, r6
 8008c16:	f7ff fd57 	bl	80086c8 <_Balloc>
 8008c1a:	b930      	cbnz	r0, 8008c2a <__mdiff+0x2e>
 8008c1c:	4b39      	ldr	r3, [pc, #228]	; (8008d04 <__mdiff+0x108>)
 8008c1e:	4602      	mov	r2, r0
 8008c20:	f240 2132 	movw	r1, #562	; 0x232
 8008c24:	4838      	ldr	r0, [pc, #224]	; (8008d08 <__mdiff+0x10c>)
 8008c26:	f000 faf3 	bl	8009210 <__assert_func>
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008c30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c34:	bfa4      	itt	ge
 8008c36:	463b      	movge	r3, r7
 8008c38:	4627      	movge	r7, r4
 8008c3a:	4630      	mov	r0, r6
 8008c3c:	6879      	ldr	r1, [r7, #4]
 8008c3e:	bfa6      	itte	ge
 8008c40:	461c      	movge	r4, r3
 8008c42:	2500      	movge	r5, #0
 8008c44:	2501      	movlt	r5, #1
 8008c46:	f7ff fd3f 	bl	80086c8 <_Balloc>
 8008c4a:	b920      	cbnz	r0, 8008c56 <__mdiff+0x5a>
 8008c4c:	4b2d      	ldr	r3, [pc, #180]	; (8008d04 <__mdiff+0x108>)
 8008c4e:	4602      	mov	r2, r0
 8008c50:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008c54:	e7e6      	b.n	8008c24 <__mdiff+0x28>
 8008c56:	693e      	ldr	r6, [r7, #16]
 8008c58:	60c5      	str	r5, [r0, #12]
 8008c5a:	6925      	ldr	r5, [r4, #16]
 8008c5c:	f107 0114 	add.w	r1, r7, #20
 8008c60:	f104 0914 	add.w	r9, r4, #20
 8008c64:	f100 0e14 	add.w	lr, r0, #20
 8008c68:	f107 0210 	add.w	r2, r7, #16
 8008c6c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008c70:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008c74:	46f2      	mov	sl, lr
 8008c76:	2700      	movs	r7, #0
 8008c78:	f859 3b04 	ldr.w	r3, [r9], #4
 8008c7c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008c80:	fa1f f883 	uxth.w	r8, r3
 8008c84:	fa17 f78b 	uxtah	r7, r7, fp
 8008c88:	0c1b      	lsrs	r3, r3, #16
 8008c8a:	eba7 0808 	sub.w	r8, r7, r8
 8008c8e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008c92:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008c96:	fa1f f888 	uxth.w	r8, r8
 8008c9a:	141f      	asrs	r7, r3, #16
 8008c9c:	454d      	cmp	r5, r9
 8008c9e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008ca2:	f84a 3b04 	str.w	r3, [sl], #4
 8008ca6:	d8e7      	bhi.n	8008c78 <__mdiff+0x7c>
 8008ca8:	1b2b      	subs	r3, r5, r4
 8008caa:	3b15      	subs	r3, #21
 8008cac:	f023 0303 	bic.w	r3, r3, #3
 8008cb0:	3304      	adds	r3, #4
 8008cb2:	3415      	adds	r4, #21
 8008cb4:	42a5      	cmp	r5, r4
 8008cb6:	bf38      	it	cc
 8008cb8:	2304      	movcc	r3, #4
 8008cba:	4419      	add	r1, r3
 8008cbc:	4473      	add	r3, lr
 8008cbe:	469e      	mov	lr, r3
 8008cc0:	460d      	mov	r5, r1
 8008cc2:	4565      	cmp	r5, ip
 8008cc4:	d30e      	bcc.n	8008ce4 <__mdiff+0xe8>
 8008cc6:	f10c 0203 	add.w	r2, ip, #3
 8008cca:	1a52      	subs	r2, r2, r1
 8008ccc:	f022 0203 	bic.w	r2, r2, #3
 8008cd0:	3903      	subs	r1, #3
 8008cd2:	458c      	cmp	ip, r1
 8008cd4:	bf38      	it	cc
 8008cd6:	2200      	movcc	r2, #0
 8008cd8:	441a      	add	r2, r3
 8008cda:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008cde:	b17b      	cbz	r3, 8008d00 <__mdiff+0x104>
 8008ce0:	6106      	str	r6, [r0, #16]
 8008ce2:	e7a5      	b.n	8008c30 <__mdiff+0x34>
 8008ce4:	f855 8b04 	ldr.w	r8, [r5], #4
 8008ce8:	fa17 f488 	uxtah	r4, r7, r8
 8008cec:	1422      	asrs	r2, r4, #16
 8008cee:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008cf2:	b2a4      	uxth	r4, r4
 8008cf4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008cf8:	f84e 4b04 	str.w	r4, [lr], #4
 8008cfc:	1417      	asrs	r7, r2, #16
 8008cfe:	e7e0      	b.n	8008cc2 <__mdiff+0xc6>
 8008d00:	3e01      	subs	r6, #1
 8008d02:	e7ea      	b.n	8008cda <__mdiff+0xde>
 8008d04:	08009ee3 	.word	0x08009ee3
 8008d08:	08009ef4 	.word	0x08009ef4

08008d0c <__d2b>:
 8008d0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008d10:	4689      	mov	r9, r1
 8008d12:	2101      	movs	r1, #1
 8008d14:	ec57 6b10 	vmov	r6, r7, d0
 8008d18:	4690      	mov	r8, r2
 8008d1a:	f7ff fcd5 	bl	80086c8 <_Balloc>
 8008d1e:	4604      	mov	r4, r0
 8008d20:	b930      	cbnz	r0, 8008d30 <__d2b+0x24>
 8008d22:	4602      	mov	r2, r0
 8008d24:	4b25      	ldr	r3, [pc, #148]	; (8008dbc <__d2b+0xb0>)
 8008d26:	4826      	ldr	r0, [pc, #152]	; (8008dc0 <__d2b+0xb4>)
 8008d28:	f240 310a 	movw	r1, #778	; 0x30a
 8008d2c:	f000 fa70 	bl	8009210 <__assert_func>
 8008d30:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008d34:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008d38:	bb35      	cbnz	r5, 8008d88 <__d2b+0x7c>
 8008d3a:	2e00      	cmp	r6, #0
 8008d3c:	9301      	str	r3, [sp, #4]
 8008d3e:	d028      	beq.n	8008d92 <__d2b+0x86>
 8008d40:	4668      	mov	r0, sp
 8008d42:	9600      	str	r6, [sp, #0]
 8008d44:	f7ff fd8c 	bl	8008860 <__lo0bits>
 8008d48:	9900      	ldr	r1, [sp, #0]
 8008d4a:	b300      	cbz	r0, 8008d8e <__d2b+0x82>
 8008d4c:	9a01      	ldr	r2, [sp, #4]
 8008d4e:	f1c0 0320 	rsb	r3, r0, #32
 8008d52:	fa02 f303 	lsl.w	r3, r2, r3
 8008d56:	430b      	orrs	r3, r1
 8008d58:	40c2      	lsrs	r2, r0
 8008d5a:	6163      	str	r3, [r4, #20]
 8008d5c:	9201      	str	r2, [sp, #4]
 8008d5e:	9b01      	ldr	r3, [sp, #4]
 8008d60:	61a3      	str	r3, [r4, #24]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	bf14      	ite	ne
 8008d66:	2202      	movne	r2, #2
 8008d68:	2201      	moveq	r2, #1
 8008d6a:	6122      	str	r2, [r4, #16]
 8008d6c:	b1d5      	cbz	r5, 8008da4 <__d2b+0x98>
 8008d6e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008d72:	4405      	add	r5, r0
 8008d74:	f8c9 5000 	str.w	r5, [r9]
 8008d78:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008d7c:	f8c8 0000 	str.w	r0, [r8]
 8008d80:	4620      	mov	r0, r4
 8008d82:	b003      	add	sp, #12
 8008d84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d8c:	e7d5      	b.n	8008d3a <__d2b+0x2e>
 8008d8e:	6161      	str	r1, [r4, #20]
 8008d90:	e7e5      	b.n	8008d5e <__d2b+0x52>
 8008d92:	a801      	add	r0, sp, #4
 8008d94:	f7ff fd64 	bl	8008860 <__lo0bits>
 8008d98:	9b01      	ldr	r3, [sp, #4]
 8008d9a:	6163      	str	r3, [r4, #20]
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	6122      	str	r2, [r4, #16]
 8008da0:	3020      	adds	r0, #32
 8008da2:	e7e3      	b.n	8008d6c <__d2b+0x60>
 8008da4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008da8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008dac:	f8c9 0000 	str.w	r0, [r9]
 8008db0:	6918      	ldr	r0, [r3, #16]
 8008db2:	f7ff fd35 	bl	8008820 <__hi0bits>
 8008db6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008dba:	e7df      	b.n	8008d7c <__d2b+0x70>
 8008dbc:	08009ee3 	.word	0x08009ee3
 8008dc0:	08009ef4 	.word	0x08009ef4

08008dc4 <_calloc_r>:
 8008dc4:	b513      	push	{r0, r1, r4, lr}
 8008dc6:	434a      	muls	r2, r1
 8008dc8:	4611      	mov	r1, r2
 8008dca:	9201      	str	r2, [sp, #4]
 8008dcc:	f000 f85a 	bl	8008e84 <_malloc_r>
 8008dd0:	4604      	mov	r4, r0
 8008dd2:	b118      	cbz	r0, 8008ddc <_calloc_r+0x18>
 8008dd4:	9a01      	ldr	r2, [sp, #4]
 8008dd6:	2100      	movs	r1, #0
 8008dd8:	f7fe f95e 	bl	8007098 <memset>
 8008ddc:	4620      	mov	r0, r4
 8008dde:	b002      	add	sp, #8
 8008de0:	bd10      	pop	{r4, pc}
	...

08008de4 <_free_r>:
 8008de4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008de6:	2900      	cmp	r1, #0
 8008de8:	d048      	beq.n	8008e7c <_free_r+0x98>
 8008dea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dee:	9001      	str	r0, [sp, #4]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	f1a1 0404 	sub.w	r4, r1, #4
 8008df6:	bfb8      	it	lt
 8008df8:	18e4      	addlt	r4, r4, r3
 8008dfa:	f000 fa65 	bl	80092c8 <__malloc_lock>
 8008dfe:	4a20      	ldr	r2, [pc, #128]	; (8008e80 <_free_r+0x9c>)
 8008e00:	9801      	ldr	r0, [sp, #4]
 8008e02:	6813      	ldr	r3, [r2, #0]
 8008e04:	4615      	mov	r5, r2
 8008e06:	b933      	cbnz	r3, 8008e16 <_free_r+0x32>
 8008e08:	6063      	str	r3, [r4, #4]
 8008e0a:	6014      	str	r4, [r2, #0]
 8008e0c:	b003      	add	sp, #12
 8008e0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e12:	f000 ba5f 	b.w	80092d4 <__malloc_unlock>
 8008e16:	42a3      	cmp	r3, r4
 8008e18:	d90b      	bls.n	8008e32 <_free_r+0x4e>
 8008e1a:	6821      	ldr	r1, [r4, #0]
 8008e1c:	1862      	adds	r2, r4, r1
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	bf04      	itt	eq
 8008e22:	681a      	ldreq	r2, [r3, #0]
 8008e24:	685b      	ldreq	r3, [r3, #4]
 8008e26:	6063      	str	r3, [r4, #4]
 8008e28:	bf04      	itt	eq
 8008e2a:	1852      	addeq	r2, r2, r1
 8008e2c:	6022      	streq	r2, [r4, #0]
 8008e2e:	602c      	str	r4, [r5, #0]
 8008e30:	e7ec      	b.n	8008e0c <_free_r+0x28>
 8008e32:	461a      	mov	r2, r3
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	b10b      	cbz	r3, 8008e3c <_free_r+0x58>
 8008e38:	42a3      	cmp	r3, r4
 8008e3a:	d9fa      	bls.n	8008e32 <_free_r+0x4e>
 8008e3c:	6811      	ldr	r1, [r2, #0]
 8008e3e:	1855      	adds	r5, r2, r1
 8008e40:	42a5      	cmp	r5, r4
 8008e42:	d10b      	bne.n	8008e5c <_free_r+0x78>
 8008e44:	6824      	ldr	r4, [r4, #0]
 8008e46:	4421      	add	r1, r4
 8008e48:	1854      	adds	r4, r2, r1
 8008e4a:	42a3      	cmp	r3, r4
 8008e4c:	6011      	str	r1, [r2, #0]
 8008e4e:	d1dd      	bne.n	8008e0c <_free_r+0x28>
 8008e50:	681c      	ldr	r4, [r3, #0]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	6053      	str	r3, [r2, #4]
 8008e56:	4421      	add	r1, r4
 8008e58:	6011      	str	r1, [r2, #0]
 8008e5a:	e7d7      	b.n	8008e0c <_free_r+0x28>
 8008e5c:	d902      	bls.n	8008e64 <_free_r+0x80>
 8008e5e:	230c      	movs	r3, #12
 8008e60:	6003      	str	r3, [r0, #0]
 8008e62:	e7d3      	b.n	8008e0c <_free_r+0x28>
 8008e64:	6825      	ldr	r5, [r4, #0]
 8008e66:	1961      	adds	r1, r4, r5
 8008e68:	428b      	cmp	r3, r1
 8008e6a:	bf04      	itt	eq
 8008e6c:	6819      	ldreq	r1, [r3, #0]
 8008e6e:	685b      	ldreq	r3, [r3, #4]
 8008e70:	6063      	str	r3, [r4, #4]
 8008e72:	bf04      	itt	eq
 8008e74:	1949      	addeq	r1, r1, r5
 8008e76:	6021      	streq	r1, [r4, #0]
 8008e78:	6054      	str	r4, [r2, #4]
 8008e7a:	e7c7      	b.n	8008e0c <_free_r+0x28>
 8008e7c:	b003      	add	sp, #12
 8008e7e:	bd30      	pop	{r4, r5, pc}
 8008e80:	20000254 	.word	0x20000254

08008e84 <_malloc_r>:
 8008e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e86:	1ccd      	adds	r5, r1, #3
 8008e88:	f025 0503 	bic.w	r5, r5, #3
 8008e8c:	3508      	adds	r5, #8
 8008e8e:	2d0c      	cmp	r5, #12
 8008e90:	bf38      	it	cc
 8008e92:	250c      	movcc	r5, #12
 8008e94:	2d00      	cmp	r5, #0
 8008e96:	4606      	mov	r6, r0
 8008e98:	db01      	blt.n	8008e9e <_malloc_r+0x1a>
 8008e9a:	42a9      	cmp	r1, r5
 8008e9c:	d903      	bls.n	8008ea6 <_malloc_r+0x22>
 8008e9e:	230c      	movs	r3, #12
 8008ea0:	6033      	str	r3, [r6, #0]
 8008ea2:	2000      	movs	r0, #0
 8008ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ea6:	f000 fa0f 	bl	80092c8 <__malloc_lock>
 8008eaa:	4921      	ldr	r1, [pc, #132]	; (8008f30 <_malloc_r+0xac>)
 8008eac:	680a      	ldr	r2, [r1, #0]
 8008eae:	4614      	mov	r4, r2
 8008eb0:	b99c      	cbnz	r4, 8008eda <_malloc_r+0x56>
 8008eb2:	4f20      	ldr	r7, [pc, #128]	; (8008f34 <_malloc_r+0xb0>)
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	b923      	cbnz	r3, 8008ec2 <_malloc_r+0x3e>
 8008eb8:	4621      	mov	r1, r4
 8008eba:	4630      	mov	r0, r6
 8008ebc:	f000 f998 	bl	80091f0 <_sbrk_r>
 8008ec0:	6038      	str	r0, [r7, #0]
 8008ec2:	4629      	mov	r1, r5
 8008ec4:	4630      	mov	r0, r6
 8008ec6:	f000 f993 	bl	80091f0 <_sbrk_r>
 8008eca:	1c43      	adds	r3, r0, #1
 8008ecc:	d123      	bne.n	8008f16 <_malloc_r+0x92>
 8008ece:	230c      	movs	r3, #12
 8008ed0:	6033      	str	r3, [r6, #0]
 8008ed2:	4630      	mov	r0, r6
 8008ed4:	f000 f9fe 	bl	80092d4 <__malloc_unlock>
 8008ed8:	e7e3      	b.n	8008ea2 <_malloc_r+0x1e>
 8008eda:	6823      	ldr	r3, [r4, #0]
 8008edc:	1b5b      	subs	r3, r3, r5
 8008ede:	d417      	bmi.n	8008f10 <_malloc_r+0x8c>
 8008ee0:	2b0b      	cmp	r3, #11
 8008ee2:	d903      	bls.n	8008eec <_malloc_r+0x68>
 8008ee4:	6023      	str	r3, [r4, #0]
 8008ee6:	441c      	add	r4, r3
 8008ee8:	6025      	str	r5, [r4, #0]
 8008eea:	e004      	b.n	8008ef6 <_malloc_r+0x72>
 8008eec:	6863      	ldr	r3, [r4, #4]
 8008eee:	42a2      	cmp	r2, r4
 8008ef0:	bf0c      	ite	eq
 8008ef2:	600b      	streq	r3, [r1, #0]
 8008ef4:	6053      	strne	r3, [r2, #4]
 8008ef6:	4630      	mov	r0, r6
 8008ef8:	f000 f9ec 	bl	80092d4 <__malloc_unlock>
 8008efc:	f104 000b 	add.w	r0, r4, #11
 8008f00:	1d23      	adds	r3, r4, #4
 8008f02:	f020 0007 	bic.w	r0, r0, #7
 8008f06:	1ac2      	subs	r2, r0, r3
 8008f08:	d0cc      	beq.n	8008ea4 <_malloc_r+0x20>
 8008f0a:	1a1b      	subs	r3, r3, r0
 8008f0c:	50a3      	str	r3, [r4, r2]
 8008f0e:	e7c9      	b.n	8008ea4 <_malloc_r+0x20>
 8008f10:	4622      	mov	r2, r4
 8008f12:	6864      	ldr	r4, [r4, #4]
 8008f14:	e7cc      	b.n	8008eb0 <_malloc_r+0x2c>
 8008f16:	1cc4      	adds	r4, r0, #3
 8008f18:	f024 0403 	bic.w	r4, r4, #3
 8008f1c:	42a0      	cmp	r0, r4
 8008f1e:	d0e3      	beq.n	8008ee8 <_malloc_r+0x64>
 8008f20:	1a21      	subs	r1, r4, r0
 8008f22:	4630      	mov	r0, r6
 8008f24:	f000 f964 	bl	80091f0 <_sbrk_r>
 8008f28:	3001      	adds	r0, #1
 8008f2a:	d1dd      	bne.n	8008ee8 <_malloc_r+0x64>
 8008f2c:	e7cf      	b.n	8008ece <_malloc_r+0x4a>
 8008f2e:	bf00      	nop
 8008f30:	20000254 	.word	0x20000254
 8008f34:	20000258 	.word	0x20000258

08008f38 <__ssputs_r>:
 8008f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f3c:	688e      	ldr	r6, [r1, #8]
 8008f3e:	429e      	cmp	r6, r3
 8008f40:	4682      	mov	sl, r0
 8008f42:	460c      	mov	r4, r1
 8008f44:	4690      	mov	r8, r2
 8008f46:	461f      	mov	r7, r3
 8008f48:	d838      	bhi.n	8008fbc <__ssputs_r+0x84>
 8008f4a:	898a      	ldrh	r2, [r1, #12]
 8008f4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f50:	d032      	beq.n	8008fb8 <__ssputs_r+0x80>
 8008f52:	6825      	ldr	r5, [r4, #0]
 8008f54:	6909      	ldr	r1, [r1, #16]
 8008f56:	eba5 0901 	sub.w	r9, r5, r1
 8008f5a:	6965      	ldr	r5, [r4, #20]
 8008f5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f64:	3301      	adds	r3, #1
 8008f66:	444b      	add	r3, r9
 8008f68:	106d      	asrs	r5, r5, #1
 8008f6a:	429d      	cmp	r5, r3
 8008f6c:	bf38      	it	cc
 8008f6e:	461d      	movcc	r5, r3
 8008f70:	0553      	lsls	r3, r2, #21
 8008f72:	d531      	bpl.n	8008fd8 <__ssputs_r+0xa0>
 8008f74:	4629      	mov	r1, r5
 8008f76:	f7ff ff85 	bl	8008e84 <_malloc_r>
 8008f7a:	4606      	mov	r6, r0
 8008f7c:	b950      	cbnz	r0, 8008f94 <__ssputs_r+0x5c>
 8008f7e:	230c      	movs	r3, #12
 8008f80:	f8ca 3000 	str.w	r3, [sl]
 8008f84:	89a3      	ldrh	r3, [r4, #12]
 8008f86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f8a:	81a3      	strh	r3, [r4, #12]
 8008f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f94:	6921      	ldr	r1, [r4, #16]
 8008f96:	464a      	mov	r2, r9
 8008f98:	f7fe f870 	bl	800707c <memcpy>
 8008f9c:	89a3      	ldrh	r3, [r4, #12]
 8008f9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fa6:	81a3      	strh	r3, [r4, #12]
 8008fa8:	6126      	str	r6, [r4, #16]
 8008faa:	6165      	str	r5, [r4, #20]
 8008fac:	444e      	add	r6, r9
 8008fae:	eba5 0509 	sub.w	r5, r5, r9
 8008fb2:	6026      	str	r6, [r4, #0]
 8008fb4:	60a5      	str	r5, [r4, #8]
 8008fb6:	463e      	mov	r6, r7
 8008fb8:	42be      	cmp	r6, r7
 8008fba:	d900      	bls.n	8008fbe <__ssputs_r+0x86>
 8008fbc:	463e      	mov	r6, r7
 8008fbe:	4632      	mov	r2, r6
 8008fc0:	6820      	ldr	r0, [r4, #0]
 8008fc2:	4641      	mov	r1, r8
 8008fc4:	f000 f966 	bl	8009294 <memmove>
 8008fc8:	68a3      	ldr	r3, [r4, #8]
 8008fca:	6822      	ldr	r2, [r4, #0]
 8008fcc:	1b9b      	subs	r3, r3, r6
 8008fce:	4432      	add	r2, r6
 8008fd0:	60a3      	str	r3, [r4, #8]
 8008fd2:	6022      	str	r2, [r4, #0]
 8008fd4:	2000      	movs	r0, #0
 8008fd6:	e7db      	b.n	8008f90 <__ssputs_r+0x58>
 8008fd8:	462a      	mov	r2, r5
 8008fda:	f000 f981 	bl	80092e0 <_realloc_r>
 8008fde:	4606      	mov	r6, r0
 8008fe0:	2800      	cmp	r0, #0
 8008fe2:	d1e1      	bne.n	8008fa8 <__ssputs_r+0x70>
 8008fe4:	6921      	ldr	r1, [r4, #16]
 8008fe6:	4650      	mov	r0, sl
 8008fe8:	f7ff fefc 	bl	8008de4 <_free_r>
 8008fec:	e7c7      	b.n	8008f7e <__ssputs_r+0x46>
	...

08008ff0 <_svfiprintf_r>:
 8008ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ff4:	4698      	mov	r8, r3
 8008ff6:	898b      	ldrh	r3, [r1, #12]
 8008ff8:	061b      	lsls	r3, r3, #24
 8008ffa:	b09d      	sub	sp, #116	; 0x74
 8008ffc:	4607      	mov	r7, r0
 8008ffe:	460d      	mov	r5, r1
 8009000:	4614      	mov	r4, r2
 8009002:	d50e      	bpl.n	8009022 <_svfiprintf_r+0x32>
 8009004:	690b      	ldr	r3, [r1, #16]
 8009006:	b963      	cbnz	r3, 8009022 <_svfiprintf_r+0x32>
 8009008:	2140      	movs	r1, #64	; 0x40
 800900a:	f7ff ff3b 	bl	8008e84 <_malloc_r>
 800900e:	6028      	str	r0, [r5, #0]
 8009010:	6128      	str	r0, [r5, #16]
 8009012:	b920      	cbnz	r0, 800901e <_svfiprintf_r+0x2e>
 8009014:	230c      	movs	r3, #12
 8009016:	603b      	str	r3, [r7, #0]
 8009018:	f04f 30ff 	mov.w	r0, #4294967295
 800901c:	e0d1      	b.n	80091c2 <_svfiprintf_r+0x1d2>
 800901e:	2340      	movs	r3, #64	; 0x40
 8009020:	616b      	str	r3, [r5, #20]
 8009022:	2300      	movs	r3, #0
 8009024:	9309      	str	r3, [sp, #36]	; 0x24
 8009026:	2320      	movs	r3, #32
 8009028:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800902c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009030:	2330      	movs	r3, #48	; 0x30
 8009032:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80091dc <_svfiprintf_r+0x1ec>
 8009036:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800903a:	f04f 0901 	mov.w	r9, #1
 800903e:	4623      	mov	r3, r4
 8009040:	469a      	mov	sl, r3
 8009042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009046:	b10a      	cbz	r2, 800904c <_svfiprintf_r+0x5c>
 8009048:	2a25      	cmp	r2, #37	; 0x25
 800904a:	d1f9      	bne.n	8009040 <_svfiprintf_r+0x50>
 800904c:	ebba 0b04 	subs.w	fp, sl, r4
 8009050:	d00b      	beq.n	800906a <_svfiprintf_r+0x7a>
 8009052:	465b      	mov	r3, fp
 8009054:	4622      	mov	r2, r4
 8009056:	4629      	mov	r1, r5
 8009058:	4638      	mov	r0, r7
 800905a:	f7ff ff6d 	bl	8008f38 <__ssputs_r>
 800905e:	3001      	adds	r0, #1
 8009060:	f000 80aa 	beq.w	80091b8 <_svfiprintf_r+0x1c8>
 8009064:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009066:	445a      	add	r2, fp
 8009068:	9209      	str	r2, [sp, #36]	; 0x24
 800906a:	f89a 3000 	ldrb.w	r3, [sl]
 800906e:	2b00      	cmp	r3, #0
 8009070:	f000 80a2 	beq.w	80091b8 <_svfiprintf_r+0x1c8>
 8009074:	2300      	movs	r3, #0
 8009076:	f04f 32ff 	mov.w	r2, #4294967295
 800907a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800907e:	f10a 0a01 	add.w	sl, sl, #1
 8009082:	9304      	str	r3, [sp, #16]
 8009084:	9307      	str	r3, [sp, #28]
 8009086:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800908a:	931a      	str	r3, [sp, #104]	; 0x68
 800908c:	4654      	mov	r4, sl
 800908e:	2205      	movs	r2, #5
 8009090:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009094:	4851      	ldr	r0, [pc, #324]	; (80091dc <_svfiprintf_r+0x1ec>)
 8009096:	f7f7 f8c3 	bl	8000220 <memchr>
 800909a:	9a04      	ldr	r2, [sp, #16]
 800909c:	b9d8      	cbnz	r0, 80090d6 <_svfiprintf_r+0xe6>
 800909e:	06d0      	lsls	r0, r2, #27
 80090a0:	bf44      	itt	mi
 80090a2:	2320      	movmi	r3, #32
 80090a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090a8:	0711      	lsls	r1, r2, #28
 80090aa:	bf44      	itt	mi
 80090ac:	232b      	movmi	r3, #43	; 0x2b
 80090ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090b2:	f89a 3000 	ldrb.w	r3, [sl]
 80090b6:	2b2a      	cmp	r3, #42	; 0x2a
 80090b8:	d015      	beq.n	80090e6 <_svfiprintf_r+0xf6>
 80090ba:	9a07      	ldr	r2, [sp, #28]
 80090bc:	4654      	mov	r4, sl
 80090be:	2000      	movs	r0, #0
 80090c0:	f04f 0c0a 	mov.w	ip, #10
 80090c4:	4621      	mov	r1, r4
 80090c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090ca:	3b30      	subs	r3, #48	; 0x30
 80090cc:	2b09      	cmp	r3, #9
 80090ce:	d94e      	bls.n	800916e <_svfiprintf_r+0x17e>
 80090d0:	b1b0      	cbz	r0, 8009100 <_svfiprintf_r+0x110>
 80090d2:	9207      	str	r2, [sp, #28]
 80090d4:	e014      	b.n	8009100 <_svfiprintf_r+0x110>
 80090d6:	eba0 0308 	sub.w	r3, r0, r8
 80090da:	fa09 f303 	lsl.w	r3, r9, r3
 80090de:	4313      	orrs	r3, r2
 80090e0:	9304      	str	r3, [sp, #16]
 80090e2:	46a2      	mov	sl, r4
 80090e4:	e7d2      	b.n	800908c <_svfiprintf_r+0x9c>
 80090e6:	9b03      	ldr	r3, [sp, #12]
 80090e8:	1d19      	adds	r1, r3, #4
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	9103      	str	r1, [sp, #12]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	bfbb      	ittet	lt
 80090f2:	425b      	neglt	r3, r3
 80090f4:	f042 0202 	orrlt.w	r2, r2, #2
 80090f8:	9307      	strge	r3, [sp, #28]
 80090fa:	9307      	strlt	r3, [sp, #28]
 80090fc:	bfb8      	it	lt
 80090fe:	9204      	strlt	r2, [sp, #16]
 8009100:	7823      	ldrb	r3, [r4, #0]
 8009102:	2b2e      	cmp	r3, #46	; 0x2e
 8009104:	d10c      	bne.n	8009120 <_svfiprintf_r+0x130>
 8009106:	7863      	ldrb	r3, [r4, #1]
 8009108:	2b2a      	cmp	r3, #42	; 0x2a
 800910a:	d135      	bne.n	8009178 <_svfiprintf_r+0x188>
 800910c:	9b03      	ldr	r3, [sp, #12]
 800910e:	1d1a      	adds	r2, r3, #4
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	9203      	str	r2, [sp, #12]
 8009114:	2b00      	cmp	r3, #0
 8009116:	bfb8      	it	lt
 8009118:	f04f 33ff 	movlt.w	r3, #4294967295
 800911c:	3402      	adds	r4, #2
 800911e:	9305      	str	r3, [sp, #20]
 8009120:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80091ec <_svfiprintf_r+0x1fc>
 8009124:	7821      	ldrb	r1, [r4, #0]
 8009126:	2203      	movs	r2, #3
 8009128:	4650      	mov	r0, sl
 800912a:	f7f7 f879 	bl	8000220 <memchr>
 800912e:	b140      	cbz	r0, 8009142 <_svfiprintf_r+0x152>
 8009130:	2340      	movs	r3, #64	; 0x40
 8009132:	eba0 000a 	sub.w	r0, r0, sl
 8009136:	fa03 f000 	lsl.w	r0, r3, r0
 800913a:	9b04      	ldr	r3, [sp, #16]
 800913c:	4303      	orrs	r3, r0
 800913e:	3401      	adds	r4, #1
 8009140:	9304      	str	r3, [sp, #16]
 8009142:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009146:	4826      	ldr	r0, [pc, #152]	; (80091e0 <_svfiprintf_r+0x1f0>)
 8009148:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800914c:	2206      	movs	r2, #6
 800914e:	f7f7 f867 	bl	8000220 <memchr>
 8009152:	2800      	cmp	r0, #0
 8009154:	d038      	beq.n	80091c8 <_svfiprintf_r+0x1d8>
 8009156:	4b23      	ldr	r3, [pc, #140]	; (80091e4 <_svfiprintf_r+0x1f4>)
 8009158:	bb1b      	cbnz	r3, 80091a2 <_svfiprintf_r+0x1b2>
 800915a:	9b03      	ldr	r3, [sp, #12]
 800915c:	3307      	adds	r3, #7
 800915e:	f023 0307 	bic.w	r3, r3, #7
 8009162:	3308      	adds	r3, #8
 8009164:	9303      	str	r3, [sp, #12]
 8009166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009168:	4433      	add	r3, r6
 800916a:	9309      	str	r3, [sp, #36]	; 0x24
 800916c:	e767      	b.n	800903e <_svfiprintf_r+0x4e>
 800916e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009172:	460c      	mov	r4, r1
 8009174:	2001      	movs	r0, #1
 8009176:	e7a5      	b.n	80090c4 <_svfiprintf_r+0xd4>
 8009178:	2300      	movs	r3, #0
 800917a:	3401      	adds	r4, #1
 800917c:	9305      	str	r3, [sp, #20]
 800917e:	4619      	mov	r1, r3
 8009180:	f04f 0c0a 	mov.w	ip, #10
 8009184:	4620      	mov	r0, r4
 8009186:	f810 2b01 	ldrb.w	r2, [r0], #1
 800918a:	3a30      	subs	r2, #48	; 0x30
 800918c:	2a09      	cmp	r2, #9
 800918e:	d903      	bls.n	8009198 <_svfiprintf_r+0x1a8>
 8009190:	2b00      	cmp	r3, #0
 8009192:	d0c5      	beq.n	8009120 <_svfiprintf_r+0x130>
 8009194:	9105      	str	r1, [sp, #20]
 8009196:	e7c3      	b.n	8009120 <_svfiprintf_r+0x130>
 8009198:	fb0c 2101 	mla	r1, ip, r1, r2
 800919c:	4604      	mov	r4, r0
 800919e:	2301      	movs	r3, #1
 80091a0:	e7f0      	b.n	8009184 <_svfiprintf_r+0x194>
 80091a2:	ab03      	add	r3, sp, #12
 80091a4:	9300      	str	r3, [sp, #0]
 80091a6:	462a      	mov	r2, r5
 80091a8:	4b0f      	ldr	r3, [pc, #60]	; (80091e8 <_svfiprintf_r+0x1f8>)
 80091aa:	a904      	add	r1, sp, #16
 80091ac:	4638      	mov	r0, r7
 80091ae:	f7fe f81b 	bl	80071e8 <_printf_float>
 80091b2:	1c42      	adds	r2, r0, #1
 80091b4:	4606      	mov	r6, r0
 80091b6:	d1d6      	bne.n	8009166 <_svfiprintf_r+0x176>
 80091b8:	89ab      	ldrh	r3, [r5, #12]
 80091ba:	065b      	lsls	r3, r3, #25
 80091bc:	f53f af2c 	bmi.w	8009018 <_svfiprintf_r+0x28>
 80091c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091c2:	b01d      	add	sp, #116	; 0x74
 80091c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091c8:	ab03      	add	r3, sp, #12
 80091ca:	9300      	str	r3, [sp, #0]
 80091cc:	462a      	mov	r2, r5
 80091ce:	4b06      	ldr	r3, [pc, #24]	; (80091e8 <_svfiprintf_r+0x1f8>)
 80091d0:	a904      	add	r1, sp, #16
 80091d2:	4638      	mov	r0, r7
 80091d4:	f7fe faac 	bl	8007730 <_printf_i>
 80091d8:	e7eb      	b.n	80091b2 <_svfiprintf_r+0x1c2>
 80091da:	bf00      	nop
 80091dc:	0800a054 	.word	0x0800a054
 80091e0:	0800a05e 	.word	0x0800a05e
 80091e4:	080071e9 	.word	0x080071e9
 80091e8:	08008f39 	.word	0x08008f39
 80091ec:	0800a05a 	.word	0x0800a05a

080091f0 <_sbrk_r>:
 80091f0:	b538      	push	{r3, r4, r5, lr}
 80091f2:	4d06      	ldr	r5, [pc, #24]	; (800920c <_sbrk_r+0x1c>)
 80091f4:	2300      	movs	r3, #0
 80091f6:	4604      	mov	r4, r0
 80091f8:	4608      	mov	r0, r1
 80091fa:	602b      	str	r3, [r5, #0]
 80091fc:	f7f9 f9aa 	bl	8002554 <_sbrk>
 8009200:	1c43      	adds	r3, r0, #1
 8009202:	d102      	bne.n	800920a <_sbrk_r+0x1a>
 8009204:	682b      	ldr	r3, [r5, #0]
 8009206:	b103      	cbz	r3, 800920a <_sbrk_r+0x1a>
 8009208:	6023      	str	r3, [r4, #0]
 800920a:	bd38      	pop	{r3, r4, r5, pc}
 800920c:	2000050c 	.word	0x2000050c

08009210 <__assert_func>:
 8009210:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009212:	4614      	mov	r4, r2
 8009214:	461a      	mov	r2, r3
 8009216:	4b09      	ldr	r3, [pc, #36]	; (800923c <__assert_func+0x2c>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4605      	mov	r5, r0
 800921c:	68d8      	ldr	r0, [r3, #12]
 800921e:	b14c      	cbz	r4, 8009234 <__assert_func+0x24>
 8009220:	4b07      	ldr	r3, [pc, #28]	; (8009240 <__assert_func+0x30>)
 8009222:	9100      	str	r1, [sp, #0]
 8009224:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009228:	4906      	ldr	r1, [pc, #24]	; (8009244 <__assert_func+0x34>)
 800922a:	462b      	mov	r3, r5
 800922c:	f000 f80e 	bl	800924c <fiprintf>
 8009230:	f000 faa4 	bl	800977c <abort>
 8009234:	4b04      	ldr	r3, [pc, #16]	; (8009248 <__assert_func+0x38>)
 8009236:	461c      	mov	r4, r3
 8009238:	e7f3      	b.n	8009222 <__assert_func+0x12>
 800923a:	bf00      	nop
 800923c:	2000005c 	.word	0x2000005c
 8009240:	0800a065 	.word	0x0800a065
 8009244:	0800a072 	.word	0x0800a072
 8009248:	0800a0a0 	.word	0x0800a0a0

0800924c <fiprintf>:
 800924c:	b40e      	push	{r1, r2, r3}
 800924e:	b503      	push	{r0, r1, lr}
 8009250:	4601      	mov	r1, r0
 8009252:	ab03      	add	r3, sp, #12
 8009254:	4805      	ldr	r0, [pc, #20]	; (800926c <fiprintf+0x20>)
 8009256:	f853 2b04 	ldr.w	r2, [r3], #4
 800925a:	6800      	ldr	r0, [r0, #0]
 800925c:	9301      	str	r3, [sp, #4]
 800925e:	f000 f88f 	bl	8009380 <_vfiprintf_r>
 8009262:	b002      	add	sp, #8
 8009264:	f85d eb04 	ldr.w	lr, [sp], #4
 8009268:	b003      	add	sp, #12
 800926a:	4770      	bx	lr
 800926c:	2000005c 	.word	0x2000005c

08009270 <__ascii_mbtowc>:
 8009270:	b082      	sub	sp, #8
 8009272:	b901      	cbnz	r1, 8009276 <__ascii_mbtowc+0x6>
 8009274:	a901      	add	r1, sp, #4
 8009276:	b142      	cbz	r2, 800928a <__ascii_mbtowc+0x1a>
 8009278:	b14b      	cbz	r3, 800928e <__ascii_mbtowc+0x1e>
 800927a:	7813      	ldrb	r3, [r2, #0]
 800927c:	600b      	str	r3, [r1, #0]
 800927e:	7812      	ldrb	r2, [r2, #0]
 8009280:	1e10      	subs	r0, r2, #0
 8009282:	bf18      	it	ne
 8009284:	2001      	movne	r0, #1
 8009286:	b002      	add	sp, #8
 8009288:	4770      	bx	lr
 800928a:	4610      	mov	r0, r2
 800928c:	e7fb      	b.n	8009286 <__ascii_mbtowc+0x16>
 800928e:	f06f 0001 	mvn.w	r0, #1
 8009292:	e7f8      	b.n	8009286 <__ascii_mbtowc+0x16>

08009294 <memmove>:
 8009294:	4288      	cmp	r0, r1
 8009296:	b510      	push	{r4, lr}
 8009298:	eb01 0402 	add.w	r4, r1, r2
 800929c:	d902      	bls.n	80092a4 <memmove+0x10>
 800929e:	4284      	cmp	r4, r0
 80092a0:	4623      	mov	r3, r4
 80092a2:	d807      	bhi.n	80092b4 <memmove+0x20>
 80092a4:	1e43      	subs	r3, r0, #1
 80092a6:	42a1      	cmp	r1, r4
 80092a8:	d008      	beq.n	80092bc <memmove+0x28>
 80092aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80092b2:	e7f8      	b.n	80092a6 <memmove+0x12>
 80092b4:	4402      	add	r2, r0
 80092b6:	4601      	mov	r1, r0
 80092b8:	428a      	cmp	r2, r1
 80092ba:	d100      	bne.n	80092be <memmove+0x2a>
 80092bc:	bd10      	pop	{r4, pc}
 80092be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80092c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80092c6:	e7f7      	b.n	80092b8 <memmove+0x24>

080092c8 <__malloc_lock>:
 80092c8:	4801      	ldr	r0, [pc, #4]	; (80092d0 <__malloc_lock+0x8>)
 80092ca:	f000 bc17 	b.w	8009afc <__retarget_lock_acquire_recursive>
 80092ce:	bf00      	nop
 80092d0:	20000514 	.word	0x20000514

080092d4 <__malloc_unlock>:
 80092d4:	4801      	ldr	r0, [pc, #4]	; (80092dc <__malloc_unlock+0x8>)
 80092d6:	f000 bc12 	b.w	8009afe <__retarget_lock_release_recursive>
 80092da:	bf00      	nop
 80092dc:	20000514 	.word	0x20000514

080092e0 <_realloc_r>:
 80092e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092e2:	4607      	mov	r7, r0
 80092e4:	4614      	mov	r4, r2
 80092e6:	460e      	mov	r6, r1
 80092e8:	b921      	cbnz	r1, 80092f4 <_realloc_r+0x14>
 80092ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80092ee:	4611      	mov	r1, r2
 80092f0:	f7ff bdc8 	b.w	8008e84 <_malloc_r>
 80092f4:	b922      	cbnz	r2, 8009300 <_realloc_r+0x20>
 80092f6:	f7ff fd75 	bl	8008de4 <_free_r>
 80092fa:	4625      	mov	r5, r4
 80092fc:	4628      	mov	r0, r5
 80092fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009300:	f000 fc62 	bl	8009bc8 <_malloc_usable_size_r>
 8009304:	42a0      	cmp	r0, r4
 8009306:	d20f      	bcs.n	8009328 <_realloc_r+0x48>
 8009308:	4621      	mov	r1, r4
 800930a:	4638      	mov	r0, r7
 800930c:	f7ff fdba 	bl	8008e84 <_malloc_r>
 8009310:	4605      	mov	r5, r0
 8009312:	2800      	cmp	r0, #0
 8009314:	d0f2      	beq.n	80092fc <_realloc_r+0x1c>
 8009316:	4631      	mov	r1, r6
 8009318:	4622      	mov	r2, r4
 800931a:	f7fd feaf 	bl	800707c <memcpy>
 800931e:	4631      	mov	r1, r6
 8009320:	4638      	mov	r0, r7
 8009322:	f7ff fd5f 	bl	8008de4 <_free_r>
 8009326:	e7e9      	b.n	80092fc <_realloc_r+0x1c>
 8009328:	4635      	mov	r5, r6
 800932a:	e7e7      	b.n	80092fc <_realloc_r+0x1c>

0800932c <__sfputc_r>:
 800932c:	6893      	ldr	r3, [r2, #8]
 800932e:	3b01      	subs	r3, #1
 8009330:	2b00      	cmp	r3, #0
 8009332:	b410      	push	{r4}
 8009334:	6093      	str	r3, [r2, #8]
 8009336:	da08      	bge.n	800934a <__sfputc_r+0x1e>
 8009338:	6994      	ldr	r4, [r2, #24]
 800933a:	42a3      	cmp	r3, r4
 800933c:	db01      	blt.n	8009342 <__sfputc_r+0x16>
 800933e:	290a      	cmp	r1, #10
 8009340:	d103      	bne.n	800934a <__sfputc_r+0x1e>
 8009342:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009346:	f000 b94b 	b.w	80095e0 <__swbuf_r>
 800934a:	6813      	ldr	r3, [r2, #0]
 800934c:	1c58      	adds	r0, r3, #1
 800934e:	6010      	str	r0, [r2, #0]
 8009350:	7019      	strb	r1, [r3, #0]
 8009352:	4608      	mov	r0, r1
 8009354:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009358:	4770      	bx	lr

0800935a <__sfputs_r>:
 800935a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800935c:	4606      	mov	r6, r0
 800935e:	460f      	mov	r7, r1
 8009360:	4614      	mov	r4, r2
 8009362:	18d5      	adds	r5, r2, r3
 8009364:	42ac      	cmp	r4, r5
 8009366:	d101      	bne.n	800936c <__sfputs_r+0x12>
 8009368:	2000      	movs	r0, #0
 800936a:	e007      	b.n	800937c <__sfputs_r+0x22>
 800936c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009370:	463a      	mov	r2, r7
 8009372:	4630      	mov	r0, r6
 8009374:	f7ff ffda 	bl	800932c <__sfputc_r>
 8009378:	1c43      	adds	r3, r0, #1
 800937a:	d1f3      	bne.n	8009364 <__sfputs_r+0xa>
 800937c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009380 <_vfiprintf_r>:
 8009380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009384:	460d      	mov	r5, r1
 8009386:	b09d      	sub	sp, #116	; 0x74
 8009388:	4614      	mov	r4, r2
 800938a:	4698      	mov	r8, r3
 800938c:	4606      	mov	r6, r0
 800938e:	b118      	cbz	r0, 8009398 <_vfiprintf_r+0x18>
 8009390:	6983      	ldr	r3, [r0, #24]
 8009392:	b90b      	cbnz	r3, 8009398 <_vfiprintf_r+0x18>
 8009394:	f000 fb14 	bl	80099c0 <__sinit>
 8009398:	4b89      	ldr	r3, [pc, #548]	; (80095c0 <_vfiprintf_r+0x240>)
 800939a:	429d      	cmp	r5, r3
 800939c:	d11b      	bne.n	80093d6 <_vfiprintf_r+0x56>
 800939e:	6875      	ldr	r5, [r6, #4]
 80093a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093a2:	07d9      	lsls	r1, r3, #31
 80093a4:	d405      	bmi.n	80093b2 <_vfiprintf_r+0x32>
 80093a6:	89ab      	ldrh	r3, [r5, #12]
 80093a8:	059a      	lsls	r2, r3, #22
 80093aa:	d402      	bmi.n	80093b2 <_vfiprintf_r+0x32>
 80093ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093ae:	f000 fba5 	bl	8009afc <__retarget_lock_acquire_recursive>
 80093b2:	89ab      	ldrh	r3, [r5, #12]
 80093b4:	071b      	lsls	r3, r3, #28
 80093b6:	d501      	bpl.n	80093bc <_vfiprintf_r+0x3c>
 80093b8:	692b      	ldr	r3, [r5, #16]
 80093ba:	b9eb      	cbnz	r3, 80093f8 <_vfiprintf_r+0x78>
 80093bc:	4629      	mov	r1, r5
 80093be:	4630      	mov	r0, r6
 80093c0:	f000 f96e 	bl	80096a0 <__swsetup_r>
 80093c4:	b1c0      	cbz	r0, 80093f8 <_vfiprintf_r+0x78>
 80093c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093c8:	07dc      	lsls	r4, r3, #31
 80093ca:	d50e      	bpl.n	80093ea <_vfiprintf_r+0x6a>
 80093cc:	f04f 30ff 	mov.w	r0, #4294967295
 80093d0:	b01d      	add	sp, #116	; 0x74
 80093d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093d6:	4b7b      	ldr	r3, [pc, #492]	; (80095c4 <_vfiprintf_r+0x244>)
 80093d8:	429d      	cmp	r5, r3
 80093da:	d101      	bne.n	80093e0 <_vfiprintf_r+0x60>
 80093dc:	68b5      	ldr	r5, [r6, #8]
 80093de:	e7df      	b.n	80093a0 <_vfiprintf_r+0x20>
 80093e0:	4b79      	ldr	r3, [pc, #484]	; (80095c8 <_vfiprintf_r+0x248>)
 80093e2:	429d      	cmp	r5, r3
 80093e4:	bf08      	it	eq
 80093e6:	68f5      	ldreq	r5, [r6, #12]
 80093e8:	e7da      	b.n	80093a0 <_vfiprintf_r+0x20>
 80093ea:	89ab      	ldrh	r3, [r5, #12]
 80093ec:	0598      	lsls	r0, r3, #22
 80093ee:	d4ed      	bmi.n	80093cc <_vfiprintf_r+0x4c>
 80093f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093f2:	f000 fb84 	bl	8009afe <__retarget_lock_release_recursive>
 80093f6:	e7e9      	b.n	80093cc <_vfiprintf_r+0x4c>
 80093f8:	2300      	movs	r3, #0
 80093fa:	9309      	str	r3, [sp, #36]	; 0x24
 80093fc:	2320      	movs	r3, #32
 80093fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009402:	f8cd 800c 	str.w	r8, [sp, #12]
 8009406:	2330      	movs	r3, #48	; 0x30
 8009408:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80095cc <_vfiprintf_r+0x24c>
 800940c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009410:	f04f 0901 	mov.w	r9, #1
 8009414:	4623      	mov	r3, r4
 8009416:	469a      	mov	sl, r3
 8009418:	f813 2b01 	ldrb.w	r2, [r3], #1
 800941c:	b10a      	cbz	r2, 8009422 <_vfiprintf_r+0xa2>
 800941e:	2a25      	cmp	r2, #37	; 0x25
 8009420:	d1f9      	bne.n	8009416 <_vfiprintf_r+0x96>
 8009422:	ebba 0b04 	subs.w	fp, sl, r4
 8009426:	d00b      	beq.n	8009440 <_vfiprintf_r+0xc0>
 8009428:	465b      	mov	r3, fp
 800942a:	4622      	mov	r2, r4
 800942c:	4629      	mov	r1, r5
 800942e:	4630      	mov	r0, r6
 8009430:	f7ff ff93 	bl	800935a <__sfputs_r>
 8009434:	3001      	adds	r0, #1
 8009436:	f000 80aa 	beq.w	800958e <_vfiprintf_r+0x20e>
 800943a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800943c:	445a      	add	r2, fp
 800943e:	9209      	str	r2, [sp, #36]	; 0x24
 8009440:	f89a 3000 	ldrb.w	r3, [sl]
 8009444:	2b00      	cmp	r3, #0
 8009446:	f000 80a2 	beq.w	800958e <_vfiprintf_r+0x20e>
 800944a:	2300      	movs	r3, #0
 800944c:	f04f 32ff 	mov.w	r2, #4294967295
 8009450:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009454:	f10a 0a01 	add.w	sl, sl, #1
 8009458:	9304      	str	r3, [sp, #16]
 800945a:	9307      	str	r3, [sp, #28]
 800945c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009460:	931a      	str	r3, [sp, #104]	; 0x68
 8009462:	4654      	mov	r4, sl
 8009464:	2205      	movs	r2, #5
 8009466:	f814 1b01 	ldrb.w	r1, [r4], #1
 800946a:	4858      	ldr	r0, [pc, #352]	; (80095cc <_vfiprintf_r+0x24c>)
 800946c:	f7f6 fed8 	bl	8000220 <memchr>
 8009470:	9a04      	ldr	r2, [sp, #16]
 8009472:	b9d8      	cbnz	r0, 80094ac <_vfiprintf_r+0x12c>
 8009474:	06d1      	lsls	r1, r2, #27
 8009476:	bf44      	itt	mi
 8009478:	2320      	movmi	r3, #32
 800947a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800947e:	0713      	lsls	r3, r2, #28
 8009480:	bf44      	itt	mi
 8009482:	232b      	movmi	r3, #43	; 0x2b
 8009484:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009488:	f89a 3000 	ldrb.w	r3, [sl]
 800948c:	2b2a      	cmp	r3, #42	; 0x2a
 800948e:	d015      	beq.n	80094bc <_vfiprintf_r+0x13c>
 8009490:	9a07      	ldr	r2, [sp, #28]
 8009492:	4654      	mov	r4, sl
 8009494:	2000      	movs	r0, #0
 8009496:	f04f 0c0a 	mov.w	ip, #10
 800949a:	4621      	mov	r1, r4
 800949c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094a0:	3b30      	subs	r3, #48	; 0x30
 80094a2:	2b09      	cmp	r3, #9
 80094a4:	d94e      	bls.n	8009544 <_vfiprintf_r+0x1c4>
 80094a6:	b1b0      	cbz	r0, 80094d6 <_vfiprintf_r+0x156>
 80094a8:	9207      	str	r2, [sp, #28]
 80094aa:	e014      	b.n	80094d6 <_vfiprintf_r+0x156>
 80094ac:	eba0 0308 	sub.w	r3, r0, r8
 80094b0:	fa09 f303 	lsl.w	r3, r9, r3
 80094b4:	4313      	orrs	r3, r2
 80094b6:	9304      	str	r3, [sp, #16]
 80094b8:	46a2      	mov	sl, r4
 80094ba:	e7d2      	b.n	8009462 <_vfiprintf_r+0xe2>
 80094bc:	9b03      	ldr	r3, [sp, #12]
 80094be:	1d19      	adds	r1, r3, #4
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	9103      	str	r1, [sp, #12]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	bfbb      	ittet	lt
 80094c8:	425b      	neglt	r3, r3
 80094ca:	f042 0202 	orrlt.w	r2, r2, #2
 80094ce:	9307      	strge	r3, [sp, #28]
 80094d0:	9307      	strlt	r3, [sp, #28]
 80094d2:	bfb8      	it	lt
 80094d4:	9204      	strlt	r2, [sp, #16]
 80094d6:	7823      	ldrb	r3, [r4, #0]
 80094d8:	2b2e      	cmp	r3, #46	; 0x2e
 80094da:	d10c      	bne.n	80094f6 <_vfiprintf_r+0x176>
 80094dc:	7863      	ldrb	r3, [r4, #1]
 80094de:	2b2a      	cmp	r3, #42	; 0x2a
 80094e0:	d135      	bne.n	800954e <_vfiprintf_r+0x1ce>
 80094e2:	9b03      	ldr	r3, [sp, #12]
 80094e4:	1d1a      	adds	r2, r3, #4
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	9203      	str	r2, [sp, #12]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	bfb8      	it	lt
 80094ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80094f2:	3402      	adds	r4, #2
 80094f4:	9305      	str	r3, [sp, #20]
 80094f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80095dc <_vfiprintf_r+0x25c>
 80094fa:	7821      	ldrb	r1, [r4, #0]
 80094fc:	2203      	movs	r2, #3
 80094fe:	4650      	mov	r0, sl
 8009500:	f7f6 fe8e 	bl	8000220 <memchr>
 8009504:	b140      	cbz	r0, 8009518 <_vfiprintf_r+0x198>
 8009506:	2340      	movs	r3, #64	; 0x40
 8009508:	eba0 000a 	sub.w	r0, r0, sl
 800950c:	fa03 f000 	lsl.w	r0, r3, r0
 8009510:	9b04      	ldr	r3, [sp, #16]
 8009512:	4303      	orrs	r3, r0
 8009514:	3401      	adds	r4, #1
 8009516:	9304      	str	r3, [sp, #16]
 8009518:	f814 1b01 	ldrb.w	r1, [r4], #1
 800951c:	482c      	ldr	r0, [pc, #176]	; (80095d0 <_vfiprintf_r+0x250>)
 800951e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009522:	2206      	movs	r2, #6
 8009524:	f7f6 fe7c 	bl	8000220 <memchr>
 8009528:	2800      	cmp	r0, #0
 800952a:	d03f      	beq.n	80095ac <_vfiprintf_r+0x22c>
 800952c:	4b29      	ldr	r3, [pc, #164]	; (80095d4 <_vfiprintf_r+0x254>)
 800952e:	bb1b      	cbnz	r3, 8009578 <_vfiprintf_r+0x1f8>
 8009530:	9b03      	ldr	r3, [sp, #12]
 8009532:	3307      	adds	r3, #7
 8009534:	f023 0307 	bic.w	r3, r3, #7
 8009538:	3308      	adds	r3, #8
 800953a:	9303      	str	r3, [sp, #12]
 800953c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800953e:	443b      	add	r3, r7
 8009540:	9309      	str	r3, [sp, #36]	; 0x24
 8009542:	e767      	b.n	8009414 <_vfiprintf_r+0x94>
 8009544:	fb0c 3202 	mla	r2, ip, r2, r3
 8009548:	460c      	mov	r4, r1
 800954a:	2001      	movs	r0, #1
 800954c:	e7a5      	b.n	800949a <_vfiprintf_r+0x11a>
 800954e:	2300      	movs	r3, #0
 8009550:	3401      	adds	r4, #1
 8009552:	9305      	str	r3, [sp, #20]
 8009554:	4619      	mov	r1, r3
 8009556:	f04f 0c0a 	mov.w	ip, #10
 800955a:	4620      	mov	r0, r4
 800955c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009560:	3a30      	subs	r2, #48	; 0x30
 8009562:	2a09      	cmp	r2, #9
 8009564:	d903      	bls.n	800956e <_vfiprintf_r+0x1ee>
 8009566:	2b00      	cmp	r3, #0
 8009568:	d0c5      	beq.n	80094f6 <_vfiprintf_r+0x176>
 800956a:	9105      	str	r1, [sp, #20]
 800956c:	e7c3      	b.n	80094f6 <_vfiprintf_r+0x176>
 800956e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009572:	4604      	mov	r4, r0
 8009574:	2301      	movs	r3, #1
 8009576:	e7f0      	b.n	800955a <_vfiprintf_r+0x1da>
 8009578:	ab03      	add	r3, sp, #12
 800957a:	9300      	str	r3, [sp, #0]
 800957c:	462a      	mov	r2, r5
 800957e:	4b16      	ldr	r3, [pc, #88]	; (80095d8 <_vfiprintf_r+0x258>)
 8009580:	a904      	add	r1, sp, #16
 8009582:	4630      	mov	r0, r6
 8009584:	f7fd fe30 	bl	80071e8 <_printf_float>
 8009588:	4607      	mov	r7, r0
 800958a:	1c78      	adds	r0, r7, #1
 800958c:	d1d6      	bne.n	800953c <_vfiprintf_r+0x1bc>
 800958e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009590:	07d9      	lsls	r1, r3, #31
 8009592:	d405      	bmi.n	80095a0 <_vfiprintf_r+0x220>
 8009594:	89ab      	ldrh	r3, [r5, #12]
 8009596:	059a      	lsls	r2, r3, #22
 8009598:	d402      	bmi.n	80095a0 <_vfiprintf_r+0x220>
 800959a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800959c:	f000 faaf 	bl	8009afe <__retarget_lock_release_recursive>
 80095a0:	89ab      	ldrh	r3, [r5, #12]
 80095a2:	065b      	lsls	r3, r3, #25
 80095a4:	f53f af12 	bmi.w	80093cc <_vfiprintf_r+0x4c>
 80095a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095aa:	e711      	b.n	80093d0 <_vfiprintf_r+0x50>
 80095ac:	ab03      	add	r3, sp, #12
 80095ae:	9300      	str	r3, [sp, #0]
 80095b0:	462a      	mov	r2, r5
 80095b2:	4b09      	ldr	r3, [pc, #36]	; (80095d8 <_vfiprintf_r+0x258>)
 80095b4:	a904      	add	r1, sp, #16
 80095b6:	4630      	mov	r0, r6
 80095b8:	f7fe f8ba 	bl	8007730 <_printf_i>
 80095bc:	e7e4      	b.n	8009588 <_vfiprintf_r+0x208>
 80095be:	bf00      	nop
 80095c0:	0800a1cc 	.word	0x0800a1cc
 80095c4:	0800a1ec 	.word	0x0800a1ec
 80095c8:	0800a1ac 	.word	0x0800a1ac
 80095cc:	0800a054 	.word	0x0800a054
 80095d0:	0800a05e 	.word	0x0800a05e
 80095d4:	080071e9 	.word	0x080071e9
 80095d8:	0800935b 	.word	0x0800935b
 80095dc:	0800a05a 	.word	0x0800a05a

080095e0 <__swbuf_r>:
 80095e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095e2:	460e      	mov	r6, r1
 80095e4:	4614      	mov	r4, r2
 80095e6:	4605      	mov	r5, r0
 80095e8:	b118      	cbz	r0, 80095f2 <__swbuf_r+0x12>
 80095ea:	6983      	ldr	r3, [r0, #24]
 80095ec:	b90b      	cbnz	r3, 80095f2 <__swbuf_r+0x12>
 80095ee:	f000 f9e7 	bl	80099c0 <__sinit>
 80095f2:	4b21      	ldr	r3, [pc, #132]	; (8009678 <__swbuf_r+0x98>)
 80095f4:	429c      	cmp	r4, r3
 80095f6:	d12b      	bne.n	8009650 <__swbuf_r+0x70>
 80095f8:	686c      	ldr	r4, [r5, #4]
 80095fa:	69a3      	ldr	r3, [r4, #24]
 80095fc:	60a3      	str	r3, [r4, #8]
 80095fe:	89a3      	ldrh	r3, [r4, #12]
 8009600:	071a      	lsls	r2, r3, #28
 8009602:	d52f      	bpl.n	8009664 <__swbuf_r+0x84>
 8009604:	6923      	ldr	r3, [r4, #16]
 8009606:	b36b      	cbz	r3, 8009664 <__swbuf_r+0x84>
 8009608:	6923      	ldr	r3, [r4, #16]
 800960a:	6820      	ldr	r0, [r4, #0]
 800960c:	1ac0      	subs	r0, r0, r3
 800960e:	6963      	ldr	r3, [r4, #20]
 8009610:	b2f6      	uxtb	r6, r6
 8009612:	4283      	cmp	r3, r0
 8009614:	4637      	mov	r7, r6
 8009616:	dc04      	bgt.n	8009622 <__swbuf_r+0x42>
 8009618:	4621      	mov	r1, r4
 800961a:	4628      	mov	r0, r5
 800961c:	f000 f93c 	bl	8009898 <_fflush_r>
 8009620:	bb30      	cbnz	r0, 8009670 <__swbuf_r+0x90>
 8009622:	68a3      	ldr	r3, [r4, #8]
 8009624:	3b01      	subs	r3, #1
 8009626:	60a3      	str	r3, [r4, #8]
 8009628:	6823      	ldr	r3, [r4, #0]
 800962a:	1c5a      	adds	r2, r3, #1
 800962c:	6022      	str	r2, [r4, #0]
 800962e:	701e      	strb	r6, [r3, #0]
 8009630:	6963      	ldr	r3, [r4, #20]
 8009632:	3001      	adds	r0, #1
 8009634:	4283      	cmp	r3, r0
 8009636:	d004      	beq.n	8009642 <__swbuf_r+0x62>
 8009638:	89a3      	ldrh	r3, [r4, #12]
 800963a:	07db      	lsls	r3, r3, #31
 800963c:	d506      	bpl.n	800964c <__swbuf_r+0x6c>
 800963e:	2e0a      	cmp	r6, #10
 8009640:	d104      	bne.n	800964c <__swbuf_r+0x6c>
 8009642:	4621      	mov	r1, r4
 8009644:	4628      	mov	r0, r5
 8009646:	f000 f927 	bl	8009898 <_fflush_r>
 800964a:	b988      	cbnz	r0, 8009670 <__swbuf_r+0x90>
 800964c:	4638      	mov	r0, r7
 800964e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009650:	4b0a      	ldr	r3, [pc, #40]	; (800967c <__swbuf_r+0x9c>)
 8009652:	429c      	cmp	r4, r3
 8009654:	d101      	bne.n	800965a <__swbuf_r+0x7a>
 8009656:	68ac      	ldr	r4, [r5, #8]
 8009658:	e7cf      	b.n	80095fa <__swbuf_r+0x1a>
 800965a:	4b09      	ldr	r3, [pc, #36]	; (8009680 <__swbuf_r+0xa0>)
 800965c:	429c      	cmp	r4, r3
 800965e:	bf08      	it	eq
 8009660:	68ec      	ldreq	r4, [r5, #12]
 8009662:	e7ca      	b.n	80095fa <__swbuf_r+0x1a>
 8009664:	4621      	mov	r1, r4
 8009666:	4628      	mov	r0, r5
 8009668:	f000 f81a 	bl	80096a0 <__swsetup_r>
 800966c:	2800      	cmp	r0, #0
 800966e:	d0cb      	beq.n	8009608 <__swbuf_r+0x28>
 8009670:	f04f 37ff 	mov.w	r7, #4294967295
 8009674:	e7ea      	b.n	800964c <__swbuf_r+0x6c>
 8009676:	bf00      	nop
 8009678:	0800a1cc 	.word	0x0800a1cc
 800967c:	0800a1ec 	.word	0x0800a1ec
 8009680:	0800a1ac 	.word	0x0800a1ac

08009684 <__ascii_wctomb>:
 8009684:	b149      	cbz	r1, 800969a <__ascii_wctomb+0x16>
 8009686:	2aff      	cmp	r2, #255	; 0xff
 8009688:	bf85      	ittet	hi
 800968a:	238a      	movhi	r3, #138	; 0x8a
 800968c:	6003      	strhi	r3, [r0, #0]
 800968e:	700a      	strbls	r2, [r1, #0]
 8009690:	f04f 30ff 	movhi.w	r0, #4294967295
 8009694:	bf98      	it	ls
 8009696:	2001      	movls	r0, #1
 8009698:	4770      	bx	lr
 800969a:	4608      	mov	r0, r1
 800969c:	4770      	bx	lr
	...

080096a0 <__swsetup_r>:
 80096a0:	4b32      	ldr	r3, [pc, #200]	; (800976c <__swsetup_r+0xcc>)
 80096a2:	b570      	push	{r4, r5, r6, lr}
 80096a4:	681d      	ldr	r5, [r3, #0]
 80096a6:	4606      	mov	r6, r0
 80096a8:	460c      	mov	r4, r1
 80096aa:	b125      	cbz	r5, 80096b6 <__swsetup_r+0x16>
 80096ac:	69ab      	ldr	r3, [r5, #24]
 80096ae:	b913      	cbnz	r3, 80096b6 <__swsetup_r+0x16>
 80096b0:	4628      	mov	r0, r5
 80096b2:	f000 f985 	bl	80099c0 <__sinit>
 80096b6:	4b2e      	ldr	r3, [pc, #184]	; (8009770 <__swsetup_r+0xd0>)
 80096b8:	429c      	cmp	r4, r3
 80096ba:	d10f      	bne.n	80096dc <__swsetup_r+0x3c>
 80096bc:	686c      	ldr	r4, [r5, #4]
 80096be:	89a3      	ldrh	r3, [r4, #12]
 80096c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80096c4:	0719      	lsls	r1, r3, #28
 80096c6:	d42c      	bmi.n	8009722 <__swsetup_r+0x82>
 80096c8:	06dd      	lsls	r5, r3, #27
 80096ca:	d411      	bmi.n	80096f0 <__swsetup_r+0x50>
 80096cc:	2309      	movs	r3, #9
 80096ce:	6033      	str	r3, [r6, #0]
 80096d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80096d4:	81a3      	strh	r3, [r4, #12]
 80096d6:	f04f 30ff 	mov.w	r0, #4294967295
 80096da:	e03e      	b.n	800975a <__swsetup_r+0xba>
 80096dc:	4b25      	ldr	r3, [pc, #148]	; (8009774 <__swsetup_r+0xd4>)
 80096de:	429c      	cmp	r4, r3
 80096e0:	d101      	bne.n	80096e6 <__swsetup_r+0x46>
 80096e2:	68ac      	ldr	r4, [r5, #8]
 80096e4:	e7eb      	b.n	80096be <__swsetup_r+0x1e>
 80096e6:	4b24      	ldr	r3, [pc, #144]	; (8009778 <__swsetup_r+0xd8>)
 80096e8:	429c      	cmp	r4, r3
 80096ea:	bf08      	it	eq
 80096ec:	68ec      	ldreq	r4, [r5, #12]
 80096ee:	e7e6      	b.n	80096be <__swsetup_r+0x1e>
 80096f0:	0758      	lsls	r0, r3, #29
 80096f2:	d512      	bpl.n	800971a <__swsetup_r+0x7a>
 80096f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096f6:	b141      	cbz	r1, 800970a <__swsetup_r+0x6a>
 80096f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096fc:	4299      	cmp	r1, r3
 80096fe:	d002      	beq.n	8009706 <__swsetup_r+0x66>
 8009700:	4630      	mov	r0, r6
 8009702:	f7ff fb6f 	bl	8008de4 <_free_r>
 8009706:	2300      	movs	r3, #0
 8009708:	6363      	str	r3, [r4, #52]	; 0x34
 800970a:	89a3      	ldrh	r3, [r4, #12]
 800970c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009710:	81a3      	strh	r3, [r4, #12]
 8009712:	2300      	movs	r3, #0
 8009714:	6063      	str	r3, [r4, #4]
 8009716:	6923      	ldr	r3, [r4, #16]
 8009718:	6023      	str	r3, [r4, #0]
 800971a:	89a3      	ldrh	r3, [r4, #12]
 800971c:	f043 0308 	orr.w	r3, r3, #8
 8009720:	81a3      	strh	r3, [r4, #12]
 8009722:	6923      	ldr	r3, [r4, #16]
 8009724:	b94b      	cbnz	r3, 800973a <__swsetup_r+0x9a>
 8009726:	89a3      	ldrh	r3, [r4, #12]
 8009728:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800972c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009730:	d003      	beq.n	800973a <__swsetup_r+0x9a>
 8009732:	4621      	mov	r1, r4
 8009734:	4630      	mov	r0, r6
 8009736:	f000 fa07 	bl	8009b48 <__smakebuf_r>
 800973a:	89a0      	ldrh	r0, [r4, #12]
 800973c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009740:	f010 0301 	ands.w	r3, r0, #1
 8009744:	d00a      	beq.n	800975c <__swsetup_r+0xbc>
 8009746:	2300      	movs	r3, #0
 8009748:	60a3      	str	r3, [r4, #8]
 800974a:	6963      	ldr	r3, [r4, #20]
 800974c:	425b      	negs	r3, r3
 800974e:	61a3      	str	r3, [r4, #24]
 8009750:	6923      	ldr	r3, [r4, #16]
 8009752:	b943      	cbnz	r3, 8009766 <__swsetup_r+0xc6>
 8009754:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009758:	d1ba      	bne.n	80096d0 <__swsetup_r+0x30>
 800975a:	bd70      	pop	{r4, r5, r6, pc}
 800975c:	0781      	lsls	r1, r0, #30
 800975e:	bf58      	it	pl
 8009760:	6963      	ldrpl	r3, [r4, #20]
 8009762:	60a3      	str	r3, [r4, #8]
 8009764:	e7f4      	b.n	8009750 <__swsetup_r+0xb0>
 8009766:	2000      	movs	r0, #0
 8009768:	e7f7      	b.n	800975a <__swsetup_r+0xba>
 800976a:	bf00      	nop
 800976c:	2000005c 	.word	0x2000005c
 8009770:	0800a1cc 	.word	0x0800a1cc
 8009774:	0800a1ec 	.word	0x0800a1ec
 8009778:	0800a1ac 	.word	0x0800a1ac

0800977c <abort>:
 800977c:	b508      	push	{r3, lr}
 800977e:	2006      	movs	r0, #6
 8009780:	f000 fa52 	bl	8009c28 <raise>
 8009784:	2001      	movs	r0, #1
 8009786:	f7f8 fe6d 	bl	8002464 <_exit>
	...

0800978c <__sflush_r>:
 800978c:	898a      	ldrh	r2, [r1, #12]
 800978e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009792:	4605      	mov	r5, r0
 8009794:	0710      	lsls	r0, r2, #28
 8009796:	460c      	mov	r4, r1
 8009798:	d458      	bmi.n	800984c <__sflush_r+0xc0>
 800979a:	684b      	ldr	r3, [r1, #4]
 800979c:	2b00      	cmp	r3, #0
 800979e:	dc05      	bgt.n	80097ac <__sflush_r+0x20>
 80097a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	dc02      	bgt.n	80097ac <__sflush_r+0x20>
 80097a6:	2000      	movs	r0, #0
 80097a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097ae:	2e00      	cmp	r6, #0
 80097b0:	d0f9      	beq.n	80097a6 <__sflush_r+0x1a>
 80097b2:	2300      	movs	r3, #0
 80097b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80097b8:	682f      	ldr	r7, [r5, #0]
 80097ba:	602b      	str	r3, [r5, #0]
 80097bc:	d032      	beq.n	8009824 <__sflush_r+0x98>
 80097be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80097c0:	89a3      	ldrh	r3, [r4, #12]
 80097c2:	075a      	lsls	r2, r3, #29
 80097c4:	d505      	bpl.n	80097d2 <__sflush_r+0x46>
 80097c6:	6863      	ldr	r3, [r4, #4]
 80097c8:	1ac0      	subs	r0, r0, r3
 80097ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80097cc:	b10b      	cbz	r3, 80097d2 <__sflush_r+0x46>
 80097ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80097d0:	1ac0      	subs	r0, r0, r3
 80097d2:	2300      	movs	r3, #0
 80097d4:	4602      	mov	r2, r0
 80097d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097d8:	6a21      	ldr	r1, [r4, #32]
 80097da:	4628      	mov	r0, r5
 80097dc:	47b0      	blx	r6
 80097de:	1c43      	adds	r3, r0, #1
 80097e0:	89a3      	ldrh	r3, [r4, #12]
 80097e2:	d106      	bne.n	80097f2 <__sflush_r+0x66>
 80097e4:	6829      	ldr	r1, [r5, #0]
 80097e6:	291d      	cmp	r1, #29
 80097e8:	d82c      	bhi.n	8009844 <__sflush_r+0xb8>
 80097ea:	4a2a      	ldr	r2, [pc, #168]	; (8009894 <__sflush_r+0x108>)
 80097ec:	40ca      	lsrs	r2, r1
 80097ee:	07d6      	lsls	r6, r2, #31
 80097f0:	d528      	bpl.n	8009844 <__sflush_r+0xb8>
 80097f2:	2200      	movs	r2, #0
 80097f4:	6062      	str	r2, [r4, #4]
 80097f6:	04d9      	lsls	r1, r3, #19
 80097f8:	6922      	ldr	r2, [r4, #16]
 80097fa:	6022      	str	r2, [r4, #0]
 80097fc:	d504      	bpl.n	8009808 <__sflush_r+0x7c>
 80097fe:	1c42      	adds	r2, r0, #1
 8009800:	d101      	bne.n	8009806 <__sflush_r+0x7a>
 8009802:	682b      	ldr	r3, [r5, #0]
 8009804:	b903      	cbnz	r3, 8009808 <__sflush_r+0x7c>
 8009806:	6560      	str	r0, [r4, #84]	; 0x54
 8009808:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800980a:	602f      	str	r7, [r5, #0]
 800980c:	2900      	cmp	r1, #0
 800980e:	d0ca      	beq.n	80097a6 <__sflush_r+0x1a>
 8009810:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009814:	4299      	cmp	r1, r3
 8009816:	d002      	beq.n	800981e <__sflush_r+0x92>
 8009818:	4628      	mov	r0, r5
 800981a:	f7ff fae3 	bl	8008de4 <_free_r>
 800981e:	2000      	movs	r0, #0
 8009820:	6360      	str	r0, [r4, #52]	; 0x34
 8009822:	e7c1      	b.n	80097a8 <__sflush_r+0x1c>
 8009824:	6a21      	ldr	r1, [r4, #32]
 8009826:	2301      	movs	r3, #1
 8009828:	4628      	mov	r0, r5
 800982a:	47b0      	blx	r6
 800982c:	1c41      	adds	r1, r0, #1
 800982e:	d1c7      	bne.n	80097c0 <__sflush_r+0x34>
 8009830:	682b      	ldr	r3, [r5, #0]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d0c4      	beq.n	80097c0 <__sflush_r+0x34>
 8009836:	2b1d      	cmp	r3, #29
 8009838:	d001      	beq.n	800983e <__sflush_r+0xb2>
 800983a:	2b16      	cmp	r3, #22
 800983c:	d101      	bne.n	8009842 <__sflush_r+0xb6>
 800983e:	602f      	str	r7, [r5, #0]
 8009840:	e7b1      	b.n	80097a6 <__sflush_r+0x1a>
 8009842:	89a3      	ldrh	r3, [r4, #12]
 8009844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009848:	81a3      	strh	r3, [r4, #12]
 800984a:	e7ad      	b.n	80097a8 <__sflush_r+0x1c>
 800984c:	690f      	ldr	r7, [r1, #16]
 800984e:	2f00      	cmp	r7, #0
 8009850:	d0a9      	beq.n	80097a6 <__sflush_r+0x1a>
 8009852:	0793      	lsls	r3, r2, #30
 8009854:	680e      	ldr	r6, [r1, #0]
 8009856:	bf08      	it	eq
 8009858:	694b      	ldreq	r3, [r1, #20]
 800985a:	600f      	str	r7, [r1, #0]
 800985c:	bf18      	it	ne
 800985e:	2300      	movne	r3, #0
 8009860:	eba6 0807 	sub.w	r8, r6, r7
 8009864:	608b      	str	r3, [r1, #8]
 8009866:	f1b8 0f00 	cmp.w	r8, #0
 800986a:	dd9c      	ble.n	80097a6 <__sflush_r+0x1a>
 800986c:	6a21      	ldr	r1, [r4, #32]
 800986e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009870:	4643      	mov	r3, r8
 8009872:	463a      	mov	r2, r7
 8009874:	4628      	mov	r0, r5
 8009876:	47b0      	blx	r6
 8009878:	2800      	cmp	r0, #0
 800987a:	dc06      	bgt.n	800988a <__sflush_r+0xfe>
 800987c:	89a3      	ldrh	r3, [r4, #12]
 800987e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009882:	81a3      	strh	r3, [r4, #12]
 8009884:	f04f 30ff 	mov.w	r0, #4294967295
 8009888:	e78e      	b.n	80097a8 <__sflush_r+0x1c>
 800988a:	4407      	add	r7, r0
 800988c:	eba8 0800 	sub.w	r8, r8, r0
 8009890:	e7e9      	b.n	8009866 <__sflush_r+0xda>
 8009892:	bf00      	nop
 8009894:	20400001 	.word	0x20400001

08009898 <_fflush_r>:
 8009898:	b538      	push	{r3, r4, r5, lr}
 800989a:	690b      	ldr	r3, [r1, #16]
 800989c:	4605      	mov	r5, r0
 800989e:	460c      	mov	r4, r1
 80098a0:	b913      	cbnz	r3, 80098a8 <_fflush_r+0x10>
 80098a2:	2500      	movs	r5, #0
 80098a4:	4628      	mov	r0, r5
 80098a6:	bd38      	pop	{r3, r4, r5, pc}
 80098a8:	b118      	cbz	r0, 80098b2 <_fflush_r+0x1a>
 80098aa:	6983      	ldr	r3, [r0, #24]
 80098ac:	b90b      	cbnz	r3, 80098b2 <_fflush_r+0x1a>
 80098ae:	f000 f887 	bl	80099c0 <__sinit>
 80098b2:	4b14      	ldr	r3, [pc, #80]	; (8009904 <_fflush_r+0x6c>)
 80098b4:	429c      	cmp	r4, r3
 80098b6:	d11b      	bne.n	80098f0 <_fflush_r+0x58>
 80098b8:	686c      	ldr	r4, [r5, #4]
 80098ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d0ef      	beq.n	80098a2 <_fflush_r+0xa>
 80098c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80098c4:	07d0      	lsls	r0, r2, #31
 80098c6:	d404      	bmi.n	80098d2 <_fflush_r+0x3a>
 80098c8:	0599      	lsls	r1, r3, #22
 80098ca:	d402      	bmi.n	80098d2 <_fflush_r+0x3a>
 80098cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098ce:	f000 f915 	bl	8009afc <__retarget_lock_acquire_recursive>
 80098d2:	4628      	mov	r0, r5
 80098d4:	4621      	mov	r1, r4
 80098d6:	f7ff ff59 	bl	800978c <__sflush_r>
 80098da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80098dc:	07da      	lsls	r2, r3, #31
 80098de:	4605      	mov	r5, r0
 80098e0:	d4e0      	bmi.n	80098a4 <_fflush_r+0xc>
 80098e2:	89a3      	ldrh	r3, [r4, #12]
 80098e4:	059b      	lsls	r3, r3, #22
 80098e6:	d4dd      	bmi.n	80098a4 <_fflush_r+0xc>
 80098e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098ea:	f000 f908 	bl	8009afe <__retarget_lock_release_recursive>
 80098ee:	e7d9      	b.n	80098a4 <_fflush_r+0xc>
 80098f0:	4b05      	ldr	r3, [pc, #20]	; (8009908 <_fflush_r+0x70>)
 80098f2:	429c      	cmp	r4, r3
 80098f4:	d101      	bne.n	80098fa <_fflush_r+0x62>
 80098f6:	68ac      	ldr	r4, [r5, #8]
 80098f8:	e7df      	b.n	80098ba <_fflush_r+0x22>
 80098fa:	4b04      	ldr	r3, [pc, #16]	; (800990c <_fflush_r+0x74>)
 80098fc:	429c      	cmp	r4, r3
 80098fe:	bf08      	it	eq
 8009900:	68ec      	ldreq	r4, [r5, #12]
 8009902:	e7da      	b.n	80098ba <_fflush_r+0x22>
 8009904:	0800a1cc 	.word	0x0800a1cc
 8009908:	0800a1ec 	.word	0x0800a1ec
 800990c:	0800a1ac 	.word	0x0800a1ac

08009910 <std>:
 8009910:	2300      	movs	r3, #0
 8009912:	b510      	push	{r4, lr}
 8009914:	4604      	mov	r4, r0
 8009916:	e9c0 3300 	strd	r3, r3, [r0]
 800991a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800991e:	6083      	str	r3, [r0, #8]
 8009920:	8181      	strh	r1, [r0, #12]
 8009922:	6643      	str	r3, [r0, #100]	; 0x64
 8009924:	81c2      	strh	r2, [r0, #14]
 8009926:	6183      	str	r3, [r0, #24]
 8009928:	4619      	mov	r1, r3
 800992a:	2208      	movs	r2, #8
 800992c:	305c      	adds	r0, #92	; 0x5c
 800992e:	f7fd fbb3 	bl	8007098 <memset>
 8009932:	4b05      	ldr	r3, [pc, #20]	; (8009948 <std+0x38>)
 8009934:	6263      	str	r3, [r4, #36]	; 0x24
 8009936:	4b05      	ldr	r3, [pc, #20]	; (800994c <std+0x3c>)
 8009938:	62a3      	str	r3, [r4, #40]	; 0x28
 800993a:	4b05      	ldr	r3, [pc, #20]	; (8009950 <std+0x40>)
 800993c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800993e:	4b05      	ldr	r3, [pc, #20]	; (8009954 <std+0x44>)
 8009940:	6224      	str	r4, [r4, #32]
 8009942:	6323      	str	r3, [r4, #48]	; 0x30
 8009944:	bd10      	pop	{r4, pc}
 8009946:	bf00      	nop
 8009948:	08009c61 	.word	0x08009c61
 800994c:	08009c83 	.word	0x08009c83
 8009950:	08009cbb 	.word	0x08009cbb
 8009954:	08009cdf 	.word	0x08009cdf

08009958 <_cleanup_r>:
 8009958:	4901      	ldr	r1, [pc, #4]	; (8009960 <_cleanup_r+0x8>)
 800995a:	f000 b8af 	b.w	8009abc <_fwalk_reent>
 800995e:	bf00      	nop
 8009960:	08009899 	.word	0x08009899

08009964 <__sfmoreglue>:
 8009964:	b570      	push	{r4, r5, r6, lr}
 8009966:	1e4a      	subs	r2, r1, #1
 8009968:	2568      	movs	r5, #104	; 0x68
 800996a:	4355      	muls	r5, r2
 800996c:	460e      	mov	r6, r1
 800996e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009972:	f7ff fa87 	bl	8008e84 <_malloc_r>
 8009976:	4604      	mov	r4, r0
 8009978:	b140      	cbz	r0, 800998c <__sfmoreglue+0x28>
 800997a:	2100      	movs	r1, #0
 800997c:	e9c0 1600 	strd	r1, r6, [r0]
 8009980:	300c      	adds	r0, #12
 8009982:	60a0      	str	r0, [r4, #8]
 8009984:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009988:	f7fd fb86 	bl	8007098 <memset>
 800998c:	4620      	mov	r0, r4
 800998e:	bd70      	pop	{r4, r5, r6, pc}

08009990 <__sfp_lock_acquire>:
 8009990:	4801      	ldr	r0, [pc, #4]	; (8009998 <__sfp_lock_acquire+0x8>)
 8009992:	f000 b8b3 	b.w	8009afc <__retarget_lock_acquire_recursive>
 8009996:	bf00      	nop
 8009998:	20000518 	.word	0x20000518

0800999c <__sfp_lock_release>:
 800999c:	4801      	ldr	r0, [pc, #4]	; (80099a4 <__sfp_lock_release+0x8>)
 800999e:	f000 b8ae 	b.w	8009afe <__retarget_lock_release_recursive>
 80099a2:	bf00      	nop
 80099a4:	20000518 	.word	0x20000518

080099a8 <__sinit_lock_acquire>:
 80099a8:	4801      	ldr	r0, [pc, #4]	; (80099b0 <__sinit_lock_acquire+0x8>)
 80099aa:	f000 b8a7 	b.w	8009afc <__retarget_lock_acquire_recursive>
 80099ae:	bf00      	nop
 80099b0:	20000513 	.word	0x20000513

080099b4 <__sinit_lock_release>:
 80099b4:	4801      	ldr	r0, [pc, #4]	; (80099bc <__sinit_lock_release+0x8>)
 80099b6:	f000 b8a2 	b.w	8009afe <__retarget_lock_release_recursive>
 80099ba:	bf00      	nop
 80099bc:	20000513 	.word	0x20000513

080099c0 <__sinit>:
 80099c0:	b510      	push	{r4, lr}
 80099c2:	4604      	mov	r4, r0
 80099c4:	f7ff fff0 	bl	80099a8 <__sinit_lock_acquire>
 80099c8:	69a3      	ldr	r3, [r4, #24]
 80099ca:	b11b      	cbz	r3, 80099d4 <__sinit+0x14>
 80099cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099d0:	f7ff bff0 	b.w	80099b4 <__sinit_lock_release>
 80099d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80099d8:	6523      	str	r3, [r4, #80]	; 0x50
 80099da:	4b13      	ldr	r3, [pc, #76]	; (8009a28 <__sinit+0x68>)
 80099dc:	4a13      	ldr	r2, [pc, #76]	; (8009a2c <__sinit+0x6c>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80099e2:	42a3      	cmp	r3, r4
 80099e4:	bf04      	itt	eq
 80099e6:	2301      	moveq	r3, #1
 80099e8:	61a3      	streq	r3, [r4, #24]
 80099ea:	4620      	mov	r0, r4
 80099ec:	f000 f820 	bl	8009a30 <__sfp>
 80099f0:	6060      	str	r0, [r4, #4]
 80099f2:	4620      	mov	r0, r4
 80099f4:	f000 f81c 	bl	8009a30 <__sfp>
 80099f8:	60a0      	str	r0, [r4, #8]
 80099fa:	4620      	mov	r0, r4
 80099fc:	f000 f818 	bl	8009a30 <__sfp>
 8009a00:	2200      	movs	r2, #0
 8009a02:	60e0      	str	r0, [r4, #12]
 8009a04:	2104      	movs	r1, #4
 8009a06:	6860      	ldr	r0, [r4, #4]
 8009a08:	f7ff ff82 	bl	8009910 <std>
 8009a0c:	68a0      	ldr	r0, [r4, #8]
 8009a0e:	2201      	movs	r2, #1
 8009a10:	2109      	movs	r1, #9
 8009a12:	f7ff ff7d 	bl	8009910 <std>
 8009a16:	68e0      	ldr	r0, [r4, #12]
 8009a18:	2202      	movs	r2, #2
 8009a1a:	2112      	movs	r1, #18
 8009a1c:	f7ff ff78 	bl	8009910 <std>
 8009a20:	2301      	movs	r3, #1
 8009a22:	61a3      	str	r3, [r4, #24]
 8009a24:	e7d2      	b.n	80099cc <__sinit+0xc>
 8009a26:	bf00      	nop
 8009a28:	08009e28 	.word	0x08009e28
 8009a2c:	08009959 	.word	0x08009959

08009a30 <__sfp>:
 8009a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a32:	4607      	mov	r7, r0
 8009a34:	f7ff ffac 	bl	8009990 <__sfp_lock_acquire>
 8009a38:	4b1e      	ldr	r3, [pc, #120]	; (8009ab4 <__sfp+0x84>)
 8009a3a:	681e      	ldr	r6, [r3, #0]
 8009a3c:	69b3      	ldr	r3, [r6, #24]
 8009a3e:	b913      	cbnz	r3, 8009a46 <__sfp+0x16>
 8009a40:	4630      	mov	r0, r6
 8009a42:	f7ff ffbd 	bl	80099c0 <__sinit>
 8009a46:	3648      	adds	r6, #72	; 0x48
 8009a48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009a4c:	3b01      	subs	r3, #1
 8009a4e:	d503      	bpl.n	8009a58 <__sfp+0x28>
 8009a50:	6833      	ldr	r3, [r6, #0]
 8009a52:	b30b      	cbz	r3, 8009a98 <__sfp+0x68>
 8009a54:	6836      	ldr	r6, [r6, #0]
 8009a56:	e7f7      	b.n	8009a48 <__sfp+0x18>
 8009a58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009a5c:	b9d5      	cbnz	r5, 8009a94 <__sfp+0x64>
 8009a5e:	4b16      	ldr	r3, [pc, #88]	; (8009ab8 <__sfp+0x88>)
 8009a60:	60e3      	str	r3, [r4, #12]
 8009a62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009a66:	6665      	str	r5, [r4, #100]	; 0x64
 8009a68:	f000 f847 	bl	8009afa <__retarget_lock_init_recursive>
 8009a6c:	f7ff ff96 	bl	800999c <__sfp_lock_release>
 8009a70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009a74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009a78:	6025      	str	r5, [r4, #0]
 8009a7a:	61a5      	str	r5, [r4, #24]
 8009a7c:	2208      	movs	r2, #8
 8009a7e:	4629      	mov	r1, r5
 8009a80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009a84:	f7fd fb08 	bl	8007098 <memset>
 8009a88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009a8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009a90:	4620      	mov	r0, r4
 8009a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a94:	3468      	adds	r4, #104	; 0x68
 8009a96:	e7d9      	b.n	8009a4c <__sfp+0x1c>
 8009a98:	2104      	movs	r1, #4
 8009a9a:	4638      	mov	r0, r7
 8009a9c:	f7ff ff62 	bl	8009964 <__sfmoreglue>
 8009aa0:	4604      	mov	r4, r0
 8009aa2:	6030      	str	r0, [r6, #0]
 8009aa4:	2800      	cmp	r0, #0
 8009aa6:	d1d5      	bne.n	8009a54 <__sfp+0x24>
 8009aa8:	f7ff ff78 	bl	800999c <__sfp_lock_release>
 8009aac:	230c      	movs	r3, #12
 8009aae:	603b      	str	r3, [r7, #0]
 8009ab0:	e7ee      	b.n	8009a90 <__sfp+0x60>
 8009ab2:	bf00      	nop
 8009ab4:	08009e28 	.word	0x08009e28
 8009ab8:	ffff0001 	.word	0xffff0001

08009abc <_fwalk_reent>:
 8009abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ac0:	4606      	mov	r6, r0
 8009ac2:	4688      	mov	r8, r1
 8009ac4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009ac8:	2700      	movs	r7, #0
 8009aca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ace:	f1b9 0901 	subs.w	r9, r9, #1
 8009ad2:	d505      	bpl.n	8009ae0 <_fwalk_reent+0x24>
 8009ad4:	6824      	ldr	r4, [r4, #0]
 8009ad6:	2c00      	cmp	r4, #0
 8009ad8:	d1f7      	bne.n	8009aca <_fwalk_reent+0xe>
 8009ada:	4638      	mov	r0, r7
 8009adc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ae0:	89ab      	ldrh	r3, [r5, #12]
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d907      	bls.n	8009af6 <_fwalk_reent+0x3a>
 8009ae6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009aea:	3301      	adds	r3, #1
 8009aec:	d003      	beq.n	8009af6 <_fwalk_reent+0x3a>
 8009aee:	4629      	mov	r1, r5
 8009af0:	4630      	mov	r0, r6
 8009af2:	47c0      	blx	r8
 8009af4:	4307      	orrs	r7, r0
 8009af6:	3568      	adds	r5, #104	; 0x68
 8009af8:	e7e9      	b.n	8009ace <_fwalk_reent+0x12>

08009afa <__retarget_lock_init_recursive>:
 8009afa:	4770      	bx	lr

08009afc <__retarget_lock_acquire_recursive>:
 8009afc:	4770      	bx	lr

08009afe <__retarget_lock_release_recursive>:
 8009afe:	4770      	bx	lr

08009b00 <__swhatbuf_r>:
 8009b00:	b570      	push	{r4, r5, r6, lr}
 8009b02:	460e      	mov	r6, r1
 8009b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b08:	2900      	cmp	r1, #0
 8009b0a:	b096      	sub	sp, #88	; 0x58
 8009b0c:	4614      	mov	r4, r2
 8009b0e:	461d      	mov	r5, r3
 8009b10:	da07      	bge.n	8009b22 <__swhatbuf_r+0x22>
 8009b12:	2300      	movs	r3, #0
 8009b14:	602b      	str	r3, [r5, #0]
 8009b16:	89b3      	ldrh	r3, [r6, #12]
 8009b18:	061a      	lsls	r2, r3, #24
 8009b1a:	d410      	bmi.n	8009b3e <__swhatbuf_r+0x3e>
 8009b1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b20:	e00e      	b.n	8009b40 <__swhatbuf_r+0x40>
 8009b22:	466a      	mov	r2, sp
 8009b24:	f000 f902 	bl	8009d2c <_fstat_r>
 8009b28:	2800      	cmp	r0, #0
 8009b2a:	dbf2      	blt.n	8009b12 <__swhatbuf_r+0x12>
 8009b2c:	9a01      	ldr	r2, [sp, #4]
 8009b2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009b32:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009b36:	425a      	negs	r2, r3
 8009b38:	415a      	adcs	r2, r3
 8009b3a:	602a      	str	r2, [r5, #0]
 8009b3c:	e7ee      	b.n	8009b1c <__swhatbuf_r+0x1c>
 8009b3e:	2340      	movs	r3, #64	; 0x40
 8009b40:	2000      	movs	r0, #0
 8009b42:	6023      	str	r3, [r4, #0]
 8009b44:	b016      	add	sp, #88	; 0x58
 8009b46:	bd70      	pop	{r4, r5, r6, pc}

08009b48 <__smakebuf_r>:
 8009b48:	898b      	ldrh	r3, [r1, #12]
 8009b4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b4c:	079d      	lsls	r5, r3, #30
 8009b4e:	4606      	mov	r6, r0
 8009b50:	460c      	mov	r4, r1
 8009b52:	d507      	bpl.n	8009b64 <__smakebuf_r+0x1c>
 8009b54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009b58:	6023      	str	r3, [r4, #0]
 8009b5a:	6123      	str	r3, [r4, #16]
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	6163      	str	r3, [r4, #20]
 8009b60:	b002      	add	sp, #8
 8009b62:	bd70      	pop	{r4, r5, r6, pc}
 8009b64:	ab01      	add	r3, sp, #4
 8009b66:	466a      	mov	r2, sp
 8009b68:	f7ff ffca 	bl	8009b00 <__swhatbuf_r>
 8009b6c:	9900      	ldr	r1, [sp, #0]
 8009b6e:	4605      	mov	r5, r0
 8009b70:	4630      	mov	r0, r6
 8009b72:	f7ff f987 	bl	8008e84 <_malloc_r>
 8009b76:	b948      	cbnz	r0, 8009b8c <__smakebuf_r+0x44>
 8009b78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b7c:	059a      	lsls	r2, r3, #22
 8009b7e:	d4ef      	bmi.n	8009b60 <__smakebuf_r+0x18>
 8009b80:	f023 0303 	bic.w	r3, r3, #3
 8009b84:	f043 0302 	orr.w	r3, r3, #2
 8009b88:	81a3      	strh	r3, [r4, #12]
 8009b8a:	e7e3      	b.n	8009b54 <__smakebuf_r+0xc>
 8009b8c:	4b0d      	ldr	r3, [pc, #52]	; (8009bc4 <__smakebuf_r+0x7c>)
 8009b8e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009b90:	89a3      	ldrh	r3, [r4, #12]
 8009b92:	6020      	str	r0, [r4, #0]
 8009b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b98:	81a3      	strh	r3, [r4, #12]
 8009b9a:	9b00      	ldr	r3, [sp, #0]
 8009b9c:	6163      	str	r3, [r4, #20]
 8009b9e:	9b01      	ldr	r3, [sp, #4]
 8009ba0:	6120      	str	r0, [r4, #16]
 8009ba2:	b15b      	cbz	r3, 8009bbc <__smakebuf_r+0x74>
 8009ba4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ba8:	4630      	mov	r0, r6
 8009baa:	f000 f8d1 	bl	8009d50 <_isatty_r>
 8009bae:	b128      	cbz	r0, 8009bbc <__smakebuf_r+0x74>
 8009bb0:	89a3      	ldrh	r3, [r4, #12]
 8009bb2:	f023 0303 	bic.w	r3, r3, #3
 8009bb6:	f043 0301 	orr.w	r3, r3, #1
 8009bba:	81a3      	strh	r3, [r4, #12]
 8009bbc:	89a0      	ldrh	r0, [r4, #12]
 8009bbe:	4305      	orrs	r5, r0
 8009bc0:	81a5      	strh	r5, [r4, #12]
 8009bc2:	e7cd      	b.n	8009b60 <__smakebuf_r+0x18>
 8009bc4:	08009959 	.word	0x08009959

08009bc8 <_malloc_usable_size_r>:
 8009bc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bcc:	1f18      	subs	r0, r3, #4
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	bfbc      	itt	lt
 8009bd2:	580b      	ldrlt	r3, [r1, r0]
 8009bd4:	18c0      	addlt	r0, r0, r3
 8009bd6:	4770      	bx	lr

08009bd8 <_raise_r>:
 8009bd8:	291f      	cmp	r1, #31
 8009bda:	b538      	push	{r3, r4, r5, lr}
 8009bdc:	4604      	mov	r4, r0
 8009bde:	460d      	mov	r5, r1
 8009be0:	d904      	bls.n	8009bec <_raise_r+0x14>
 8009be2:	2316      	movs	r3, #22
 8009be4:	6003      	str	r3, [r0, #0]
 8009be6:	f04f 30ff 	mov.w	r0, #4294967295
 8009bea:	bd38      	pop	{r3, r4, r5, pc}
 8009bec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009bee:	b112      	cbz	r2, 8009bf6 <_raise_r+0x1e>
 8009bf0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009bf4:	b94b      	cbnz	r3, 8009c0a <_raise_r+0x32>
 8009bf6:	4620      	mov	r0, r4
 8009bf8:	f000 f830 	bl	8009c5c <_getpid_r>
 8009bfc:	462a      	mov	r2, r5
 8009bfe:	4601      	mov	r1, r0
 8009c00:	4620      	mov	r0, r4
 8009c02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c06:	f000 b817 	b.w	8009c38 <_kill_r>
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d00a      	beq.n	8009c24 <_raise_r+0x4c>
 8009c0e:	1c59      	adds	r1, r3, #1
 8009c10:	d103      	bne.n	8009c1a <_raise_r+0x42>
 8009c12:	2316      	movs	r3, #22
 8009c14:	6003      	str	r3, [r0, #0]
 8009c16:	2001      	movs	r0, #1
 8009c18:	e7e7      	b.n	8009bea <_raise_r+0x12>
 8009c1a:	2400      	movs	r4, #0
 8009c1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009c20:	4628      	mov	r0, r5
 8009c22:	4798      	blx	r3
 8009c24:	2000      	movs	r0, #0
 8009c26:	e7e0      	b.n	8009bea <_raise_r+0x12>

08009c28 <raise>:
 8009c28:	4b02      	ldr	r3, [pc, #8]	; (8009c34 <raise+0xc>)
 8009c2a:	4601      	mov	r1, r0
 8009c2c:	6818      	ldr	r0, [r3, #0]
 8009c2e:	f7ff bfd3 	b.w	8009bd8 <_raise_r>
 8009c32:	bf00      	nop
 8009c34:	2000005c 	.word	0x2000005c

08009c38 <_kill_r>:
 8009c38:	b538      	push	{r3, r4, r5, lr}
 8009c3a:	4d07      	ldr	r5, [pc, #28]	; (8009c58 <_kill_r+0x20>)
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	4604      	mov	r4, r0
 8009c40:	4608      	mov	r0, r1
 8009c42:	4611      	mov	r1, r2
 8009c44:	602b      	str	r3, [r5, #0]
 8009c46:	f7f8 fbfd 	bl	8002444 <_kill>
 8009c4a:	1c43      	adds	r3, r0, #1
 8009c4c:	d102      	bne.n	8009c54 <_kill_r+0x1c>
 8009c4e:	682b      	ldr	r3, [r5, #0]
 8009c50:	b103      	cbz	r3, 8009c54 <_kill_r+0x1c>
 8009c52:	6023      	str	r3, [r4, #0]
 8009c54:	bd38      	pop	{r3, r4, r5, pc}
 8009c56:	bf00      	nop
 8009c58:	2000050c 	.word	0x2000050c

08009c5c <_getpid_r>:
 8009c5c:	f7f8 bbea 	b.w	8002434 <_getpid>

08009c60 <__sread>:
 8009c60:	b510      	push	{r4, lr}
 8009c62:	460c      	mov	r4, r1
 8009c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c68:	f000 f894 	bl	8009d94 <_read_r>
 8009c6c:	2800      	cmp	r0, #0
 8009c6e:	bfab      	itete	ge
 8009c70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009c72:	89a3      	ldrhlt	r3, [r4, #12]
 8009c74:	181b      	addge	r3, r3, r0
 8009c76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009c7a:	bfac      	ite	ge
 8009c7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009c7e:	81a3      	strhlt	r3, [r4, #12]
 8009c80:	bd10      	pop	{r4, pc}

08009c82 <__swrite>:
 8009c82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c86:	461f      	mov	r7, r3
 8009c88:	898b      	ldrh	r3, [r1, #12]
 8009c8a:	05db      	lsls	r3, r3, #23
 8009c8c:	4605      	mov	r5, r0
 8009c8e:	460c      	mov	r4, r1
 8009c90:	4616      	mov	r6, r2
 8009c92:	d505      	bpl.n	8009ca0 <__swrite+0x1e>
 8009c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c98:	2302      	movs	r3, #2
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f000 f868 	bl	8009d70 <_lseek_r>
 8009ca0:	89a3      	ldrh	r3, [r4, #12]
 8009ca2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ca6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009caa:	81a3      	strh	r3, [r4, #12]
 8009cac:	4632      	mov	r2, r6
 8009cae:	463b      	mov	r3, r7
 8009cb0:	4628      	mov	r0, r5
 8009cb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cb6:	f000 b817 	b.w	8009ce8 <_write_r>

08009cba <__sseek>:
 8009cba:	b510      	push	{r4, lr}
 8009cbc:	460c      	mov	r4, r1
 8009cbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cc2:	f000 f855 	bl	8009d70 <_lseek_r>
 8009cc6:	1c43      	adds	r3, r0, #1
 8009cc8:	89a3      	ldrh	r3, [r4, #12]
 8009cca:	bf15      	itete	ne
 8009ccc:	6560      	strne	r0, [r4, #84]	; 0x54
 8009cce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009cd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009cd6:	81a3      	strheq	r3, [r4, #12]
 8009cd8:	bf18      	it	ne
 8009cda:	81a3      	strhne	r3, [r4, #12]
 8009cdc:	bd10      	pop	{r4, pc}

08009cde <__sclose>:
 8009cde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ce2:	f000 b813 	b.w	8009d0c <_close_r>
	...

08009ce8 <_write_r>:
 8009ce8:	b538      	push	{r3, r4, r5, lr}
 8009cea:	4d07      	ldr	r5, [pc, #28]	; (8009d08 <_write_r+0x20>)
 8009cec:	4604      	mov	r4, r0
 8009cee:	4608      	mov	r0, r1
 8009cf0:	4611      	mov	r1, r2
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	602a      	str	r2, [r5, #0]
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	f7f8 fbdb 	bl	80024b2 <_write>
 8009cfc:	1c43      	adds	r3, r0, #1
 8009cfe:	d102      	bne.n	8009d06 <_write_r+0x1e>
 8009d00:	682b      	ldr	r3, [r5, #0]
 8009d02:	b103      	cbz	r3, 8009d06 <_write_r+0x1e>
 8009d04:	6023      	str	r3, [r4, #0]
 8009d06:	bd38      	pop	{r3, r4, r5, pc}
 8009d08:	2000050c 	.word	0x2000050c

08009d0c <_close_r>:
 8009d0c:	b538      	push	{r3, r4, r5, lr}
 8009d0e:	4d06      	ldr	r5, [pc, #24]	; (8009d28 <_close_r+0x1c>)
 8009d10:	2300      	movs	r3, #0
 8009d12:	4604      	mov	r4, r0
 8009d14:	4608      	mov	r0, r1
 8009d16:	602b      	str	r3, [r5, #0]
 8009d18:	f7f8 fbe7 	bl	80024ea <_close>
 8009d1c:	1c43      	adds	r3, r0, #1
 8009d1e:	d102      	bne.n	8009d26 <_close_r+0x1a>
 8009d20:	682b      	ldr	r3, [r5, #0]
 8009d22:	b103      	cbz	r3, 8009d26 <_close_r+0x1a>
 8009d24:	6023      	str	r3, [r4, #0]
 8009d26:	bd38      	pop	{r3, r4, r5, pc}
 8009d28:	2000050c 	.word	0x2000050c

08009d2c <_fstat_r>:
 8009d2c:	b538      	push	{r3, r4, r5, lr}
 8009d2e:	4d07      	ldr	r5, [pc, #28]	; (8009d4c <_fstat_r+0x20>)
 8009d30:	2300      	movs	r3, #0
 8009d32:	4604      	mov	r4, r0
 8009d34:	4608      	mov	r0, r1
 8009d36:	4611      	mov	r1, r2
 8009d38:	602b      	str	r3, [r5, #0]
 8009d3a:	f7f8 fbe2 	bl	8002502 <_fstat>
 8009d3e:	1c43      	adds	r3, r0, #1
 8009d40:	d102      	bne.n	8009d48 <_fstat_r+0x1c>
 8009d42:	682b      	ldr	r3, [r5, #0]
 8009d44:	b103      	cbz	r3, 8009d48 <_fstat_r+0x1c>
 8009d46:	6023      	str	r3, [r4, #0]
 8009d48:	bd38      	pop	{r3, r4, r5, pc}
 8009d4a:	bf00      	nop
 8009d4c:	2000050c 	.word	0x2000050c

08009d50 <_isatty_r>:
 8009d50:	b538      	push	{r3, r4, r5, lr}
 8009d52:	4d06      	ldr	r5, [pc, #24]	; (8009d6c <_isatty_r+0x1c>)
 8009d54:	2300      	movs	r3, #0
 8009d56:	4604      	mov	r4, r0
 8009d58:	4608      	mov	r0, r1
 8009d5a:	602b      	str	r3, [r5, #0]
 8009d5c:	f7f8 fbe1 	bl	8002522 <_isatty>
 8009d60:	1c43      	adds	r3, r0, #1
 8009d62:	d102      	bne.n	8009d6a <_isatty_r+0x1a>
 8009d64:	682b      	ldr	r3, [r5, #0]
 8009d66:	b103      	cbz	r3, 8009d6a <_isatty_r+0x1a>
 8009d68:	6023      	str	r3, [r4, #0]
 8009d6a:	bd38      	pop	{r3, r4, r5, pc}
 8009d6c:	2000050c 	.word	0x2000050c

08009d70 <_lseek_r>:
 8009d70:	b538      	push	{r3, r4, r5, lr}
 8009d72:	4d07      	ldr	r5, [pc, #28]	; (8009d90 <_lseek_r+0x20>)
 8009d74:	4604      	mov	r4, r0
 8009d76:	4608      	mov	r0, r1
 8009d78:	4611      	mov	r1, r2
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	602a      	str	r2, [r5, #0]
 8009d7e:	461a      	mov	r2, r3
 8009d80:	f7f8 fbda 	bl	8002538 <_lseek>
 8009d84:	1c43      	adds	r3, r0, #1
 8009d86:	d102      	bne.n	8009d8e <_lseek_r+0x1e>
 8009d88:	682b      	ldr	r3, [r5, #0]
 8009d8a:	b103      	cbz	r3, 8009d8e <_lseek_r+0x1e>
 8009d8c:	6023      	str	r3, [r4, #0]
 8009d8e:	bd38      	pop	{r3, r4, r5, pc}
 8009d90:	2000050c 	.word	0x2000050c

08009d94 <_read_r>:
 8009d94:	b538      	push	{r3, r4, r5, lr}
 8009d96:	4d07      	ldr	r5, [pc, #28]	; (8009db4 <_read_r+0x20>)
 8009d98:	4604      	mov	r4, r0
 8009d9a:	4608      	mov	r0, r1
 8009d9c:	4611      	mov	r1, r2
 8009d9e:	2200      	movs	r2, #0
 8009da0:	602a      	str	r2, [r5, #0]
 8009da2:	461a      	mov	r2, r3
 8009da4:	f7f8 fb68 	bl	8002478 <_read>
 8009da8:	1c43      	adds	r3, r0, #1
 8009daa:	d102      	bne.n	8009db2 <_read_r+0x1e>
 8009dac:	682b      	ldr	r3, [r5, #0]
 8009dae:	b103      	cbz	r3, 8009db2 <_read_r+0x1e>
 8009db0:	6023      	str	r3, [r4, #0]
 8009db2:	bd38      	pop	{r3, r4, r5, pc}
 8009db4:	2000050c 	.word	0x2000050c

08009db8 <_init>:
 8009db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dba:	bf00      	nop
 8009dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dbe:	bc08      	pop	{r3}
 8009dc0:	469e      	mov	lr, r3
 8009dc2:	4770      	bx	lr

08009dc4 <_fini>:
 8009dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dc6:	bf00      	nop
 8009dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dca:	bc08      	pop	{r3}
 8009dcc:	469e      	mov	lr, r3
 8009dce:	4770      	bx	lr
